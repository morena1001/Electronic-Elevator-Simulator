
Elevator Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005254  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080053e4  080053e4  000063e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054fc  080054fc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005504  08005504  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005508  08005508  00006508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800550c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000005c  08005568  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08005568  000073c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5f5  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d53  00000000  00000000  00015681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000173d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c1  00000000  00000000  00018038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdfb  00000000  00000000  000189f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff5b  00000000  00000000  000347f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a647d  00000000  00000000  0004474f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eabcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003924  00000000  00000000  000eac10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ee534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053cc 	.word	0x080053cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080053cc 	.word	0x080053cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f001 fc1a 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f810 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f968 	bl	8000550 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f85e 	bl	8000340 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f934 	bl	80004f0 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8000288:	f000 f8e0 	bl	800044c <MX_TIM15_Init>
  MX_TIM6_Init();
 800028c:	f000 f8a6 	bl	80003dc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Program_Start_Light_Up();
 8000290:	f000 fa9e 	bl	80007d0 <Program_Start_Light_Up>
  Elevator_Simulator_Init();
 8000294:	f000 fa12 	bl	80006bc <Elevator_Simulator_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <main+0x28>

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b09c      	sub	sp, #112	@ 0x70
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002a6:	2228      	movs	r2, #40	@ 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 fc0e 	bl	8004acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2234      	movs	r2, #52	@ 0x34
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 fc00 	bl	8004acc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	2302      	movs	r3, #2
 80002ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	2301      	movs	r3, #1
 80002d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	2310      	movs	r3, #16
 80002d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	2300      	movs	r3, #0
 80002da:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 ff53 	bl	800218c <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002ec:	f000 fbd2 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f4:	2300      	movs	r3, #0
 80002f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000304:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 ff7c 	bl	8003208 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000316:	f000 fbbd 	bl	8000a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 800031a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800031e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000320:	2300      	movs	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4618      	mov	r0, r3
 8000328:	f003 f98e 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000332:	f000 fbaf 	bl	8000a94 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3770      	adds	r7, #112	@ 0x70
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800035e:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000364:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000366:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000368:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800036c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b1a      	ldr	r3, [pc, #104]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9995;
 8000374:	4b18      	ldr	r3, [pc, #96]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000376:	f242 720b 	movw	r2, #9995	@ 0x270b
 800037a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_TIM2_Init+0x98>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000382:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000388:	4813      	ldr	r0, [pc, #76]	@ (80003d8 <MX_TIM2_Init+0x98>)
 800038a:	f003 faef 	bl	800396c <HAL_TIM_Base_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000394:	f000 fb7e 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800039c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <MX_TIM2_Init+0x98>)
 80003a6:	f003 fcbe 	bl	8003d26 <HAL_TIM_ConfigClockSource>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003b0:	f000 fb70 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	@ (80003d8 <MX_TIM2_Init+0x98>)
 80003c2:	f003 feb5 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003cc:	f000 fb62 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000078 	.word	0x20000078

080003dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003ec:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003ee:	4a16      	ldr	r2, [pc, #88]	@ (8000448 <MX_TIM6_Init+0x6c>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 80003f2:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003f4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80003f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8000400:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <MX_TIM6_Init+0x68>)
 8000402:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000406:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000408:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_TIM6_Init+0x68>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800040e:	480d      	ldr	r0, [pc, #52]	@ (8000444 <MX_TIM6_Init+0x68>)
 8000410:	f003 faac 	bl	800396c <HAL_TIM_Base_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800041a:	f000 fb3b 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4806      	ldr	r0, [pc, #24]	@ (8000444 <MX_TIM6_Init+0x68>)
 800042c:	f003 fe80 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000436:	f000 fb2d 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	200000c4 	.word	0x200000c4
 8000448:	40001000 	.word	0x40001000

0800044c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800046a:	4b1f      	ldr	r3, [pc, #124]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800046c:	4a1f      	ldr	r2, [pc, #124]	@ (80004ec <MX_TIM15_Init+0xa0>)
 800046e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 8000470:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000472:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000476:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 111;
 800047e:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000480:	226f      	movs	r2, #111	@ 0x6f
 8000482:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000496:	4814      	ldr	r0, [pc, #80]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000498:	f003 fa68 	bl	800396c <HAL_TIM_Base_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80004a2:	f000 faf7 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 80004b4:	f003 fc37 	bl	8003d26 <HAL_TIM_ConfigClockSource>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80004be:	f000 fae9 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4619      	mov	r1, r3
 80004ce:	4806      	ldr	r0, [pc, #24]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 80004d0:	f003 fe2e 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80004da:	f000 fadb 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000110 	.word	0x20000110
 80004ec:	40014000 	.word	0x40014000

080004f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f4:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 80004f6:	4a15      	ldr	r2, [pc, #84]	@ (800054c <MX_USART2_UART_Init+0x5c>)
 80004f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004fa:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 80004fc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000516:	220c      	movs	r2, #12
 8000518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000526:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000534:	f003 fe80 	bl	8004238 <HAL_UART_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800053e:	f000 faa9 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000015c 	.word	0x2000015c
 800054c:	40004400 	.word	0x40004400

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b52      	ldr	r3, [pc, #328]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a51      	ldr	r2, [pc, #324]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800056c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b4f      	ldr	r3, [pc, #316]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b4c      	ldr	r3, [pc, #304]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a4b      	ldr	r2, [pc, #300]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b49      	ldr	r3, [pc, #292]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b46      	ldr	r3, [pc, #280]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a45      	ldr	r2, [pc, #276]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800059c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b43      	ldr	r3, [pc, #268]	@ (80006b0 <MX_GPIO_Init+0x160>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PF1_Pin|PF2_Pin|PF3_Pin|DF1_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80005b4:	483f      	ldr	r0, [pc, #252]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005b6:	f001 fd9f 	bl	80020f8 <HAL_GPIO_WritePin>
                          |DF2_Pin|DF3_Pin|DU_Pin|DD_Pin
                          |FR1_Pin|FR2_Pin|FR3_Pin|BCDI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c0:	483d      	ldr	r0, [pc, #244]	@ (80006b8 <MX_GPIO_Init+0x168>)
 80005c2:	f001 fd99 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4835      	ldr	r0, [pc, #212]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005de:	f001 fc01 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1_Pin PF2_Pin PF3_Pin DF1_Pin
                           DF2_Pin DF3_Pin DU_Pin DD_Pin
                           FR1_Pin FR2_Pin FR3_Pin BCDI_Pin */
  GPIO_InitStruct.Pin = PF1_Pin|PF2_Pin|PF3_Pin|DF1_Pin
 80005e2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005e6:	60fb      	str	r3, [r7, #12]
                          |DF2_Pin|DF3_Pin|DU_Pin|DD_Pin
                          |FR1_Pin|FR2_Pin|FR3_Pin|BCDI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	482e      	ldr	r0, [pc, #184]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005fc:	f001 fbf2 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : II1_Pin II2_Pin II3_Pin OI1U_Pin
                           OI2D_Pin OI2U_Pin OI3D_Pin */
  GPIO_InitStruct.Pin = II1_Pin|II2_Pin|II3_Pin|OI1U_Pin
 8000600:	237f      	movs	r3, #127	@ 0x7f
 8000602:	60fb      	str	r3, [r7, #12]
                          |OI2D_Pin|OI2U_Pin|OI3D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000604:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	4828      	ldr	r0, [pc, #160]	@ (80006b8 <MX_GPIO_Init+0x168>)
 8000616:	f001 fbe5 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0x168>)
 8000634:	f001 fbd6 	bl	8001de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	2006      	movs	r0, #6
 800063e:	f001 fb9a 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000642:	2006      	movs	r0, #6
 8000644:	f001 fbb3 	bl	8001dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2007      	movs	r0, #7
 800064e:	f001 fb92 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000652:	2007      	movs	r0, #7
 8000654:	f001 fbab 	bl	8001dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2008      	movs	r0, #8
 800065e:	f001 fb8a 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000662:	2008      	movs	r0, #8
 8000664:	f001 fba3 	bl	8001dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2009      	movs	r0, #9
 800066e:	f001 fb82 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000672:	2009      	movs	r0, #9
 8000674:	f001 fb9b 	bl	8001dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	200a      	movs	r0, #10
 800067e:	f001 fb7a 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000682:	200a      	movs	r0, #10
 8000684:	f001 fb93 	bl	8001dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2017      	movs	r0, #23
 800068e:	f001 fb72 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000692:	2017      	movs	r0, #23
 8000694:	f001 fb8b 	bl	8001dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2028      	movs	r0, #40	@ 0x28
 800069e:	f001 fb6a 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a2:	2028      	movs	r0, #40	@ 0x28
 80006a4:	f001 fb83 	bl	8001dae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000800 	.word	0x48000800
 80006b8:	48000400 	.word	0x48000400

080006bc <Elevator_Simulator_Init>:
//		sprintf(msg, "YIPPEE\r\n");
//		HAL_UART_Transmit(&huart2, (uint8_t*) msg, 10, 100);
//	}
//}

void Elevator_Simulator_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	201c      	movs	r0, #28
 80006c8:	f001 fb55 	bl	8001d76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006cc:	201c      	movs	r0, #28
 80006ce:	f001 fb6e 	bl	8001dae <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	2036      	movs	r0, #54	@ 0x36
 80006d8:	f001 fb4d 	bl	8001d76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006dc:	2036      	movs	r0, #54	@ 0x36
 80006de:	f001 fb66 	bl	8001dae <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	2018      	movs	r0, #24
 80006e8:	f001 fb45 	bl	8001d76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80006ec:	2018      	movs	r0, #24
 80006ee:	f001 fb5e 	bl	8001dae <HAL_NVIC_EnableIRQ>

	// Floor request corresponding to floor 1 in an upward direction
	floor_requests[0].requested = 0;
 80006f2:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
	floor_requests[0].floor_number = 1;
 80006f8:	4b2b      	ldr	r3, [pc, #172]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	705a      	strb	r2, [r3, #1]
	floor_requests[0].direction = 'u';
 80006fe:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000700:	2275      	movs	r2, #117	@ 0x75
 8000702:	709a      	strb	r2, [r3, #2]

	// Floor request corresponding to floor 2 in a downward direction
	floor_requests[1].requested = 0;
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	70da      	strb	r2, [r3, #3]
	floor_requests[1].floor_number = 2;
 800070a:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 800070c:	2202      	movs	r2, #2
 800070e:	711a      	strb	r2, [r3, #4]
	floor_requests[1].direction = 'd';
 8000710:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000712:	2264      	movs	r2, #100	@ 0x64
 8000714:	715a      	strb	r2, [r3, #5]

	// Floor request corresponding to floor 2 in an upward direction
	floor_requests[2].requested = 0;
 8000716:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000718:	2200      	movs	r2, #0
 800071a:	719a      	strb	r2, [r3, #6]
	floor_requests[2].floor_number = 2;
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 800071e:	2202      	movs	r2, #2
 8000720:	71da      	strb	r2, [r3, #7]
	floor_requests[2].direction = 'u';
 8000722:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000724:	2275      	movs	r2, #117	@ 0x75
 8000726:	721a      	strb	r2, [r3, #8]

	// Floor request corresponding to floor 3 in a downward direction
	floor_requests[3].requested = 0;
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 800072a:	2200      	movs	r2, #0
 800072c:	725a      	strb	r2, [r3, #9]
	floor_requests[3].floor_number = 3;
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000730:	2203      	movs	r2, #3
 8000732:	729a      	strb	r2, [r3, #10]
	floor_requests[3].direction = 'd';
 8000734:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000736:	2264      	movs	r2, #100	@ 0x64
 8000738:	72da      	strb	r2, [r3, #11]

	elevator_direction = 'n';
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <Elevator_Simulator_Init+0xf0>)
 800073c:	226e      	movs	r2, #110	@ 0x6e
 800073e:	701a      	strb	r2, [r3, #0]
	floor_position = 1; // The elevator always begins in the first floor
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <Elevator_Simulator_Init+0xf4>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 2; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	e007      	b.n	800075c <Elevator_Simulator_Init+0xa0>
		floor_destinations[i] = 0;
 800074c:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <Elevator_Simulator_Init+0xf8>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b01      	cmp	r3, #1
 8000760:	ddf4      	ble.n	800074c <Elevator_Simulator_Init+0x90>
	}

	for (int i =  0; i < 3; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	e007      	b.n	8000778 <Elevator_Simulator_Init+0xbc>
			requests[i] = NULL;
 8000768:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <Elevator_Simulator_Init+0xfc>)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2100      	movs	r1, #0
 800076e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =  0; i < 3; i++) {
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b02      	cmp	r3, #2
 800077c:	ddf4      	ble.n	8000768 <Elevator_Simulator_Init+0xac>
		}

	pin_num = 0;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <Elevator_Simulator_Init+0x100>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
	serving = NULL;
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <Elevator_Simulator_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
	start_timer = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <Elevator_Simulator_Init+0x108>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
	traveling = 0;
 8000790:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <Elevator_Simulator_Init+0x10c>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2101      	movs	r1, #1
 800079a:	480c      	ldr	r0, [pc, #48]	@ (80007cc <Elevator_Simulator_Init+0x110>)
 800079c:	f001 fcac 	bl	80020f8 <HAL_GPIO_WritePin>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000020c 	.word	0x2000020c
 80007ac:	20000218 	.word	0x20000218
 80007b0:	20000219 	.word	0x20000219
 80007b4:	2000021c 	.word	0x2000021c
 80007b8:	20000220 	.word	0x20000220
 80007bc:	20000230 	.word	0x20000230
 80007c0:	20000234 	.word	0x20000234
 80007c4:	20000238 	.word	0x20000238
 80007c8:	20000239 	.word	0x20000239
 80007cc:	48000800 	.word	0x48000800

080007d0 <Program_Start_Light_Up>:

void Program_Start_Light_Up(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
 80007d4:	2101      	movs	r1, #1
 80007d6:	4842      	ldr	r0, [pc, #264]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 80007d8:	f001 fca6 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007dc:	20fa      	movs	r0, #250	@ 0xfa
 80007de:	f001 f9cb 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(PF2_GPIO_Port, PF2_Pin);
 80007e2:	2102      	movs	r1, #2
 80007e4:	483e      	ldr	r0, [pc, #248]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 80007e6:	f001 fc9f 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
 80007ea:	2101      	movs	r1, #1
 80007ec:	483c      	ldr	r0, [pc, #240]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 80007ee:	f001 fc9b 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007f2:	20fa      	movs	r0, #250	@ 0xfa
 80007f4:	f001 f9c0 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(PF3_GPIO_Port, PF3_Pin);
 80007f8:	2104      	movs	r1, #4
 80007fa:	4839      	ldr	r0, [pc, #228]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 80007fc:	f001 fc94 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF2_GPIO_Port, PF2_Pin);
 8000800:	2102      	movs	r1, #2
 8000802:	4837      	ldr	r0, [pc, #220]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 8000804:	f001 fc90 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000808:	20fa      	movs	r0, #250	@ 0xfa
 800080a:	f001 f9b5 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(DF1_GPIO_Port, DF1_Pin);
 800080e:	2108      	movs	r1, #8
 8000810:	4833      	ldr	r0, [pc, #204]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 8000812:	f001 fc89 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF3_GPIO_Port, PF3_Pin);
 8000816:	2104      	movs	r1, #4
 8000818:	4831      	ldr	r0, [pc, #196]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 800081a:	f001 fc85 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800081e:	20fa      	movs	r0, #250	@ 0xfa
 8000820:	f001 f9aa 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(DF2_GPIO_Port, DF2_Pin);
 8000824:	2110      	movs	r1, #16
 8000826:	482e      	ldr	r0, [pc, #184]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 8000828:	f001 fc7e 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF1_GPIO_Port, DF1_Pin);
 800082c:	2108      	movs	r1, #8
 800082e:	482c      	ldr	r0, [pc, #176]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 8000830:	f001 fc7a 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000834:	20fa      	movs	r0, #250	@ 0xfa
 8000836:	f001 f99f 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(DF3_GPIO_Port, DF3_Pin);
 800083a:	2120      	movs	r1, #32
 800083c:	4828      	ldr	r0, [pc, #160]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 800083e:	f001 fc73 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF2_GPIO_Port, DF2_Pin);
 8000842:	2110      	movs	r1, #16
 8000844:	4826      	ldr	r0, [pc, #152]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 8000846:	f001 fc6f 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800084a:	20fa      	movs	r0, #250	@ 0xfa
 800084c:	f001 f994 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(DU_GPIO_Port, DU_Pin);
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	4823      	ldr	r0, [pc, #140]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 8000854:	f001 fc68 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF3_GPIO_Port, DF3_Pin);
 8000858:	2120      	movs	r1, #32
 800085a:	4821      	ldr	r0, [pc, #132]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 800085c:	f001 fc64 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000860:	20fa      	movs	r0, #250	@ 0xfa
 8000862:	f001 f989 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(DD_GPIO_Port, DD_Pin);
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	481d      	ldr	r0, [pc, #116]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 800086a:	f001 fc5d 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DU_GPIO_Port, DU_Pin);
 800086e:	2140      	movs	r1, #64	@ 0x40
 8000870:	481b      	ldr	r0, [pc, #108]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 8000872:	f001 fc59 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000876:	20fa      	movs	r0, #250	@ 0xfa
 8000878:	f001 f97e 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(FR1_GPIO_Port, FR1_Pin);
 800087c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000880:	4817      	ldr	r0, [pc, #92]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 8000882:	f001 fc51 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DD_GPIO_Port, DD_Pin);
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	4815      	ldr	r0, [pc, #84]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 800088a:	f001 fc4d 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800088e:	20fa      	movs	r0, #250	@ 0xfa
 8000890:	f001 f972 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(FR2_GPIO_Port, FR2_Pin);
 8000894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000898:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 800089a:	f001 fc45 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR1_GPIO_Port, FR1_Pin);
 800089e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008a2:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 80008a4:	f001 fc40 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80008a8:	20fa      	movs	r0, #250	@ 0xfa
 80008aa:	f001 f965 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(FR3_GPIO_Port, FR3_Pin);
 80008ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b2:	480b      	ldr	r0, [pc, #44]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 80008b4:	f001 fc38 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR2_GPIO_Port, FR2_Pin);
 80008b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008bc:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 80008be:	f001 fc33 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80008c2:	20fa      	movs	r0, #250	@ 0xfa
 80008c4:	f001 f958 	bl	8001b78 <HAL_Delay>

	HAL_GPIO_TogglePin(FR3_GPIO_Port, FR3_Pin);
 80008c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <Program_Start_Light_Up+0x110>)
 80008ce:	f001 fc2b 	bl	8002128 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80008d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d6:	f001 f94f 	bl	8001b78 <HAL_Delay>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	48000800 	.word	0x48000800

080008e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OI2U_Pin) {
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	2b20      	cmp	r3, #32
 80008f2:	d103      	bne.n	80008fc <HAL_GPIO_EXTI_Callback+0x18>
		pin_num = 2;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x30>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == OI3D_Pin) {
		pin_num = 3;
	}
}
 80008fa:	e005      	b.n	8000908 <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == OI3D_Pin) {
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	2b40      	cmp	r3, #64	@ 0x40
 8000900:	d102      	bne.n	8000908 <HAL_GPIO_EXTI_Callback+0x24>
		pin_num = 3;
 8000902:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x30>)
 8000904:	2203      	movs	r2, #3
 8000906:	701a      	strb	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000230 	.word	0x20000230

08000918 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	// IF htim2 has fully run once, it will check if there are any destination
	if (htim->Instance == TIM2 && start_timer == 1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000928:	f040 809a 	bne.w	8000a60 <HAL_TIM_PeriodElapsedCallback+0x148>
 800092c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	f040 8095 	bne.w	8000a60 <HAL_TIM_PeriodElapsedCallback+0x148>
		// IF no destinations, the elevator has finished serving the floor in the serving variable
		if (!floor_destinations[0]) {
 8000936:	4b4d      	ldr	r3, [pc, #308]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d123      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x6e>
			// IF there are no other requests, stop moving the elevator
//			if (!requests[0] && !serving) {
			if (!requests[0]) {
 800093e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d109      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x42>
				sprintf(msg, "NOTHING TO DO\r\n");
 8000946:	494b      	ldr	r1, [pc, #300]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000948:	484b      	ldr	r0, [pc, #300]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800094a:	f004 f89f 	bl	8004a8c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, 15, 100);
 800094e:	2364      	movs	r3, #100	@ 0x64
 8000950:	220f      	movs	r2, #15
 8000952:	4949      	ldr	r1, [pc, #292]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000954:	4849      	ldr	r0, [pc, #292]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000956:	f003 fcbd 	bl	80042d4 <HAL_UART_Transmit>
			}

			// reset the serving variable and the LED corresponding to the elevator_direction variable
			serving->requested = 0;
 800095a:	4b49      	ldr	r3, [pc, #292]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
			serving = NULL;
 8000962:	4b47      	ldr	r3, [pc, #284]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
			Choose_Floor_To_Service();
 8000968:	f000 ff96 	bl	8001898 <Choose_Floor_To_Service>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 800096c:	4b45      	ldr	r3, [pc, #276]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b75      	cmp	r3, #117	@ 0x75
 8000972:	d101      	bne.n	8000978 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000974:	2340      	movs	r3, #64	@ 0x40
 8000976:	e000      	b.n	800097a <HAL_TIM_PeriodElapsedCallback+0x62>
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	4842      	ldr	r0, [pc, #264]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000980:	f001 fbba 	bl	80020f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DD_Pin : DU_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
			HAL_TIM_Base_Start_IT(&htim6);
		}
	}
}
 8000984:	e06c      	b.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x148>
		  else if (floor_destinations[1] == 0) {
 8000986:	4b39      	ldr	r3, [pc, #228]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000988:	785b      	ldrb	r3, [r3, #1]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d126      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0xc4>
		    elevator_direction = floor_destinations[0] < floor_position ? 'd' : 'u';
 800098e:	4b37      	ldr	r3, [pc, #220]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	4b3e      	ldr	r3, [pc, #248]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	d201      	bcs.n	800099e <HAL_TIM_PeriodElapsedCallback+0x86>
 800099a:	2264      	movs	r2, #100	@ 0x64
 800099c:	e000      	b.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x88>
 800099e:	2275      	movs	r2, #117	@ 0x75
 80009a0:	4b38      	ldr	r3, [pc, #224]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009a2:	701a      	strb	r2, [r3, #0]
		    HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DD_Pin : DU_Pin, GPIO_PIN_RESET);
 80009a4:	4b37      	ldr	r3, [pc, #220]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b75      	cmp	r3, #117	@ 0x75
 80009aa:	d101      	bne.n	80009b0 <HAL_TIM_PeriodElapsedCallback+0x98>
 80009ac:	2380      	movs	r3, #128	@ 0x80
 80009ae:	e000      	b.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0x9a>
 80009b0:	2340      	movs	r3, #64	@ 0x40
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4834      	ldr	r0, [pc, #208]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009b8:	f001 fb9e 	bl	80020f8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 80009bc:	4b31      	ldr	r3, [pc, #196]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b75      	cmp	r3, #117	@ 0x75
 80009c2:	d101      	bne.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	e000      	b.n	80009ca <HAL_TIM_PeriodElapsedCallback+0xb2>
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	482e      	ldr	r0, [pc, #184]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009d0:	f001 fb92 	bl	80020f8 <HAL_GPIO_WritePin>
		    HAL_TIM_Base_Start_IT(&htim6);
 80009d4:	482e      	ldr	r0, [pc, #184]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80009d6:	f003 f821 	bl	8003a1c <HAL_TIM_Base_Start_IT>
}
 80009da:	e041      	b.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x148>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 80009dc:	4b29      	ldr	r3, [pc, #164]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b75      	cmp	r3, #117	@ 0x75
 80009e2:	d101      	bne.n	80009e8 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80009e4:	2340      	movs	r3, #64	@ 0x40
 80009e6:	e000      	b.n	80009ea <HAL_TIM_PeriodElapsedCallback+0xd2>
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	4826      	ldr	r0, [pc, #152]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009f0:	f001 fb82 	bl	80020f8 <HAL_GPIO_WritePin>
			if (floor_destinations[0] - floor_position > floor_destinations[1] - floor_position) {
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d909      	bls.n	8000a14 <HAL_TIM_PeriodElapsedCallback+0xfc>
				uint8_t temp = floor_destinations[0];
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	73fb      	strb	r3, [r7, #15]
				floor_destinations[0] = floor_destinations[1];
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a08:	785a      	ldrb	r2, [r3, #1]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a0c:	701a      	strb	r2, [r3, #0]
				floor_destinations[1] = temp;
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	7053      	strb	r3, [r2, #1]
			elevator_direction = floor_destinations[0] < floor_position ? 'd' : 'u';
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d201      	bcs.n	8000a24 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000a20:	2264      	movs	r2, #100	@ 0x64
 8000a22:	e000      	b.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0x10e>
 8000a24:	2275      	movs	r2, #117	@ 0x75
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a28:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DD_Pin : DU_Pin, GPIO_PIN_RESET);
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b75      	cmp	r3, #117	@ 0x75
 8000a30:	d101      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x11e>
 8000a32:	2380      	movs	r3, #128	@ 0x80
 8000a34:	e000      	b.n	8000a38 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a3e:	f001 fb5b 	bl	80020f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b75      	cmp	r3, #117	@ 0x75
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x136>
 8000a4a:	2340      	movs	r3, #64	@ 0x40
 8000a4c:	e000      	b.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0x138>
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	2201      	movs	r2, #1
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a56:	f001 fb4f 	bl	80020f8 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Start_IT(&htim6);
 8000a5a:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000a5c:	f002 ffde 	bl	8003a1c <HAL_TIM_Base_Start_IT>
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000238 	.word	0x20000238
 8000a6c:	2000021c 	.word	0x2000021c
 8000a70:	20000220 	.word	0x20000220
 8000a74:	080053e4 	.word	0x080053e4
 8000a78:	200001e4 	.word	0x200001e4
 8000a7c:	2000015c 	.word	0x2000015c
 8000a80:	20000234 	.word	0x20000234
 8000a84:	20000218 	.word	0x20000218
 8000a88:	48000800 	.word	0x48000800
 8000a8c:	20000219 	.word	0x20000219
 8000a90:	200000c4 	.word	0x200000c4

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af8:	d114      	bne.n	8000b24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a25      	ldr	r2, [pc, #148]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	201c      	movs	r0, #28
 8000b18:	f001 f92d 	bl	8001d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b1c:	201c      	movs	r0, #28
 8000b1e:	f001 f946 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000b22:	e032      	b.n	8000b8a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <HAL_TIM_Base_MspInit+0xb0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d114      	bne.n	8000b58 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a18      	ldr	r2, [pc, #96]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2036      	movs	r0, #54	@ 0x36
 8000b4c:	f001 f913 	bl	8001d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b50:	2036      	movs	r0, #54	@ 0x36
 8000b52:	f001 f92c 	bl	8001dae <HAL_NVIC_EnableIRQ>
}
 8000b56:	e018      	b.n	8000b8a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM15)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <HAL_TIM_Base_MspInit+0xb4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d113      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_TIM_Base_MspInit+0xac>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2018      	movs	r0, #24
 8000b80:	f001 f8f9 	bl	8001d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b84:	2018      	movs	r0, #24
 8000b86:	f001 f912 	bl	8001dae <HAL_NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40001000 	.word	0x40001000
 8000b9c:	40014000 	.word	0x40014000

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <HAL_UART_MspInit+0x7c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d128      	bne.n	8000c14 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_UART_MspInit+0x80>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a16      	ldr	r2, [pc, #88]	@ (8000c20 <HAL_UART_MspInit+0x80>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <HAL_UART_MspInit+0x80>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <HAL_UART_MspInit+0x80>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <HAL_UART_MspInit+0x80>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_UART_MspInit+0x80>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c02:	2307      	movs	r3, #7
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c10:	f001 f8e8 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7a:	f000 ff5d 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	// FUNCTION SETS FLOOR 1 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e002      	b.n	8000c96 <EXTI0_IRQHandler+0x12>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	ddf7      	ble.n	8000c90 <EXTI0_IRQHandler+0xc>
	// IF button for choosing floor 1 as a destination is pressed
	if(HAL_GPIO_ReadPin(II1_GPIO_Port, II1_Pin)) {
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	481d      	ldr	r0, [pc, #116]	@ (8000d18 <EXTI0_IRQHandler+0x94>)
 8000ca4:	f001 fa10 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d02c      	beq.n	8000d08 <EXTI0_IRQHandler+0x84>
		// IF the current floor_position is not 1 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 1 && serving && !traveling) {
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <EXTI0_IRQHandler+0x98>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d028      	beq.n	8000d08 <EXTI0_IRQHandler+0x84>
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <EXTI0_IRQHandler+0x9c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d024      	beq.n	8000d08 <EXTI0_IRQHandler+0x84>
 8000cbe:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <EXTI0_IRQHandler+0xa0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d120      	bne.n	8000d08 <EXTI0_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <EXTI0_IRQHandler+0xa4>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d110      	bne.n	8000cf0 <EXTI0_IRQHandler+0x6c>
				floor_destinations[0] = 1;
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <EXTI0_IRQHandler+0xa4>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4814      	ldr	r0, [pc, #80]	@ (8000d2c <EXTI0_IRQHandler+0xa8>)
 8000cda:	f001 fa0d 	bl	80020f8 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000cde:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <EXTI0_IRQHandler+0xac>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d110      	bne.n	8000d08 <EXTI0_IRQHandler+0x84>
 8000ce6:	4913      	ldr	r1, [pc, #76]	@ (8000d34 <EXTI0_IRQHandler+0xb0>)
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fd8f 	bl	800180c <Reset_Timer>
 8000cee:	e00b      	b.n	8000d08 <EXTI0_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  // (There are only at most 2 possible floors to set as a destination, overwriting can never occur)
			  else if (floor_destinations[0] != 1 /* !floor_destinations[1] */) {
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <EXTI0_IRQHandler+0xa4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d007      	beq.n	8000d08 <EXTI0_IRQHandler+0x84>
				floor_destinations[1] = 1;
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <EXTI0_IRQHandler+0xa4>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2108      	movs	r1, #8
 8000d02:	480a      	ldr	r0, [pc, #40]	@ (8000d2c <EXTI0_IRQHandler+0xa8>)
 8000d04:	f001 f9f8 	bl	80020f8 <HAL_GPIO_WritePin>
//				return;
//			}
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II1_Pin);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f001 fa27 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	20000219 	.word	0x20000219
 8000d20:	20000234 	.word	0x20000234
 8000d24:	20000239 	.word	0x20000239
 8000d28:	2000021c 	.word	0x2000021c
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	20000220 	.word	0x20000220
 8000d34:	20000078 	.word	0x20000078

08000d38 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// FUNCTION SETS FLOOR 2 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	e002      	b.n	8000d4a <EXTI1_IRQHandler+0x12>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3301      	adds	r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000d50:	4293      	cmp	r3, r2
 8000d52:	ddf7      	ble.n	8000d44 <EXTI1_IRQHandler+0xc>
	// IF button for choosing floor 2 as a destination is pressed
	if(HAL_GPIO_ReadPin(II2_GPIO_Port, II2_Pin)) {
 8000d54:	2102      	movs	r1, #2
 8000d56:	481d      	ldr	r0, [pc, #116]	@ (8000dcc <EXTI1_IRQHandler+0x94>)
 8000d58:	f001 f9b6 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d02c      	beq.n	8000dbc <EXTI1_IRQHandler+0x84>
		// IF the current floor_position is not 2 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 2 && serving && !traveling) {
 8000d62:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <EXTI1_IRQHandler+0x98>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d028      	beq.n	8000dbc <EXTI1_IRQHandler+0x84>
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <EXTI1_IRQHandler+0x9c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d024      	beq.n	8000dbc <EXTI1_IRQHandler+0x84>
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <EXTI1_IRQHandler+0xa0>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d120      	bne.n	8000dbc <EXTI1_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <EXTI1_IRQHandler+0xa4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d110      	bne.n	8000da4 <EXTI1_IRQHandler+0x6c>
				floor_destinations[0] = 2;
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <EXTI1_IRQHandler+0xa4>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <EXTI1_IRQHandler+0xa8>)
 8000d8e:	f001 f9b3 	bl	80020f8 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <EXTI1_IRQHandler+0xac>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d110      	bne.n	8000dbc <EXTI1_IRQHandler+0x84>
 8000d9a:	4913      	ldr	r1, [pc, #76]	@ (8000de8 <EXTI1_IRQHandler+0xb0>)
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 fd35 	bl	800180c <Reset_Timer>
 8000da2:	e00b      	b.n	8000dbc <EXTI1_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  else if (floor_destinations[0] != 2){
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <EXTI1_IRQHandler+0xa4>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d007      	beq.n	8000dbc <EXTI1_IRQHandler+0x84>
				floor_destinations[1] = 2;
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <EXTI1_IRQHandler+0xa4>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2110      	movs	r1, #16
 8000db6:	480a      	ldr	r0, [pc, #40]	@ (8000de0 <EXTI1_IRQHandler+0xa8>)
 8000db8:	f001 f99e 	bl	80020f8 <HAL_GPIO_WritePin>
//				  return;
//			  }
		}
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II2_Pin);
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f001 f9cd 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	20000219 	.word	0x20000219
 8000dd4:	20000234 	.word	0x20000234
 8000dd8:	20000239 	.word	0x20000239
 8000ddc:	2000021c 	.word	0x2000021c
 8000de0:	48000800 	.word	0x48000800
 8000de4:	20000220 	.word	0x20000220
 8000de8:	20000078 	.word	0x20000078

08000dec <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
	// FUNCTION SET FLOOR 3 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e002      	b.n	8000dfe <EXTI2_TSC_IRQHandler+0x12>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000e04:	4293      	cmp	r3, r2
 8000e06:	ddf7      	ble.n	8000df8 <EXTI2_TSC_IRQHandler+0xc>
	// IF button for choosing floor 3 as a destination is pressed
	if(HAL_GPIO_ReadPin(II3_GPIO_Port, II3_Pin)) {
 8000e08:	2104      	movs	r1, #4
 8000e0a:	481d      	ldr	r0, [pc, #116]	@ (8000e80 <EXTI2_TSC_IRQHandler+0x94>)
 8000e0c:	f001 f95c 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d02c      	beq.n	8000e70 <EXTI2_TSC_IRQHandler+0x84>
		// IF the current floor_position is not 2 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 3 && serving && !traveling) {
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <EXTI2_TSC_IRQHandler+0x98>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d028      	beq.n	8000e70 <EXTI2_TSC_IRQHandler+0x84>
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <EXTI2_TSC_IRQHandler+0x9c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d024      	beq.n	8000e70 <EXTI2_TSC_IRQHandler+0x84>
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <EXTI2_TSC_IRQHandler+0xa0>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d120      	bne.n	8000e70 <EXTI2_TSC_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <EXTI2_TSC_IRQHandler+0xa4>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d110      	bne.n	8000e58 <EXTI2_TSC_IRQHandler+0x6c>
				floor_destinations[0] = 3;
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <EXTI2_TSC_IRQHandler+0xa4>)
 8000e38:	2203      	movs	r2, #3
 8000e3a:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2120      	movs	r1, #32
 8000e40:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <EXTI2_TSC_IRQHandler+0xa8>)
 8000e42:	f001 f959 	bl	80020f8 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000e46:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <EXTI2_TSC_IRQHandler+0xac>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d110      	bne.n	8000e70 <EXTI2_TSC_IRQHandler+0x84>
 8000e4e:	4913      	ldr	r1, [pc, #76]	@ (8000e9c <EXTI2_TSC_IRQHandler+0xb0>)
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 fcdb 	bl	800180c <Reset_Timer>
 8000e56:	e00b      	b.n	8000e70 <EXTI2_TSC_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  else if (floor_destinations[0] != 3) {
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <EXTI2_TSC_IRQHandler+0xa4>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d007      	beq.n	8000e70 <EXTI2_TSC_IRQHandler+0x84>
				floor_destinations[1] = 3;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <EXTI2_TSC_IRQHandler+0xa4>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2120      	movs	r1, #32
 8000e6a:	480a      	ldr	r0, [pc, #40]	@ (8000e94 <EXTI2_TSC_IRQHandler+0xa8>)
 8000e6c:	f001 f944 	bl	80020f8 <HAL_GPIO_WritePin>
//				  return;
//			  }
		}
	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II3_Pin);
 8000e70:	2004      	movs	r0, #4
 8000e72:	f001 f973 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	48000400 	.word	0x48000400
 8000e84:	20000219 	.word	0x20000219
 8000e88:	20000234 	.word	0x20000234
 8000e8c:	20000239 	.word	0x20000239
 8000e90:	2000021c 	.word	0x2000021c
 8000e94:	48000800 	.word	0x48000800
 8000e98:	20000220 	.word	0x20000220
 8000e9c:	20000078 	.word	0x20000078

08000ea0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	// FUNCTION REQUESTS FLOOR 1

	for (int i = 0; i < 65535; i++);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	e002      	b.n	8000eb2 <EXTI3_IRQHandler+0x12>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	ddf7      	ble.n	8000eac <EXTI3_IRQHandler+0xc>
	// IF button for choosing floor 1 as a request is pressed
	if(HAL_GPIO_ReadPin(OI1U_GPIO_Port, OI1U_Pin)) {
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	4839      	ldr	r0, [pc, #228]	@ (8000fa4 <EXTI3_IRQHandler+0x104>)
 8000ec0:	f001 f902 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d065      	beq.n	8000f96 <EXTI3_IRQHandler+0xf6>
		uint8_t i = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	70fb      	strb	r3, [r7, #3]
		while (requests[i]) i++;
 8000ece:	e002      	b.n	8000ed6 <EXTI3_IRQHandler+0x36>
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	70fb      	strb	r3, [r7, #3]
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	4a33      	ldr	r2, [pc, #204]	@ (8000fa8 <EXTI3_IRQHandler+0x108>)
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f6      	bne.n	8000ed0 <EXTI3_IRQHandler+0x30>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving->floor_number == 1) {
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d11e      	bne.n	8000f26 <EXTI3_IRQHandler+0x86>
 8000ee8:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <EXTI3_IRQHandler+0x10c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d119      	bne.n	8000f26 <EXTI3_IRQHandler+0x86>
			// IF the floor position is not equal to the floor we are servicing
			if (floor_position != serving->floor_number) {
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <EXTI3_IRQHandler+0x10c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	785a      	ldrb	r2, [r3, #1]
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <EXTI3_IRQHandler+0x110>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d04a      	beq.n	8000f96 <EXTI3_IRQHandler+0xf6>
				floor_requests[0].requested = 1;
 8000f00:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <EXTI3_IRQHandler+0x114>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]

				requests[i] = &floor_requests[0];
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <EXTI3_IRQHandler+0x108>)
 8000f0a:	492a      	ldr	r1, [pc, #168]	@ (8000fb4 <EXTI3_IRQHandler+0x114>)
 8000f0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Reset_Timer(1, &htim2);
 8000f10:	4929      	ldr	r1, [pc, #164]	@ (8000fb8 <EXTI3_IRQHandler+0x118>)
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fc7a 	bl	800180c <Reset_Timer>
				HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f1e:	4827      	ldr	r0, [pc, #156]	@ (8000fbc <EXTI3_IRQHandler+0x11c>)
 8000f20:	f001 f8ea 	bl	80020f8 <HAL_GPIO_WritePin>
			if (floor_position != serving->floor_number) {
 8000f24:	e037      	b.n	8000f96 <EXTI3_IRQHandler+0xf6>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[0].requested || serving->floor_number == 1) && (!(i == 0 && serving->floor_number == 1) && !(i > 0 && requests[i - 1]->floor_number == 1))) {
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <EXTI3_IRQHandler+0x114>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d004      	beq.n	8000f38 <EXTI3_IRQHandler+0x98>
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <EXTI3_IRQHandler+0x10c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d12e      	bne.n	8000f96 <EXTI3_IRQHandler+0xf6>
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d104      	bne.n	8000f48 <EXTI3_IRQHandler+0xa8>
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <EXTI3_IRQHandler+0x10c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d026      	beq.n	8000f96 <EXTI3_IRQHandler+0xf6>
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <EXTI3_IRQHandler+0xbe>
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <EXTI3_IRQHandler+0x108>)
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d01b      	beq.n	8000f96 <EXTI3_IRQHandler+0xf6>
			floor_requests[0].requested = 1;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <EXTI3_IRQHandler+0x114>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
			requests[i] = &floor_requests[0];
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <EXTI3_IRQHandler+0x108>)
 8000f68:	4912      	ldr	r1, [pc, #72]	@ (8000fb4 <EXTI3_IRQHandler+0x114>)
 8000f6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <EXTI3_IRQHandler+0x10c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <EXTI3_IRQHandler+0xe6>
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <EXTI3_IRQHandler+0x120>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <EXTI3_IRQHandler+0xe6>
				Reset_Timer(1, &htim2);
 8000f7e:	490e      	ldr	r1, [pc, #56]	@ (8000fb8 <EXTI3_IRQHandler+0x118>)
 8000f80:	2001      	movs	r0, #1
 8000f82:	f000 fc43 	bl	800180c <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <EXTI3_IRQHandler+0x11c>)
 8000f8e:	f001 f8b3 	bl	80020f8 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 8000f92:	f000 fc81 	bl	8001898 <Choose_Floor_To_Service>
		}
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI1U_Pin);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f001 f8e0 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	20000220 	.word	0x20000220
 8000fac:	20000234 	.word	0x20000234
 8000fb0:	20000219 	.word	0x20000219
 8000fb4:	2000020c 	.word	0x2000020c
 8000fb8:	20000078 	.word	0x20000078
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	2000021c 	.word	0x2000021c

08000fc4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// FUNCTION REQUESTS FLOOR 2 DOWN

	for (int i = 0; i < 65535; i++);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	e002      	b.n	8000fd6 <EXTI4_IRQHandler+0x12>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	ddf7      	ble.n	8000fd0 <EXTI4_IRQHandler+0xc>
	// IF button for choosing floor 2 as a request is pressed
	if(HAL_GPIO_ReadPin(OI2D_GPIO_Port, OI2D_Pin)) {
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	4839      	ldr	r0, [pc, #228]	@ (80010c8 <EXTI4_IRQHandler+0x104>)
 8000fe4:	f001 f870 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d065      	beq.n	80010ba <EXTI4_IRQHandler+0xf6>
		uint8_t i = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	70fb      	strb	r3, [r7, #3]
		while (requests[i]) i++;
 8000ff2:	e002      	b.n	8000ffa <EXTI4_IRQHandler+0x36>
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	70fb      	strb	r3, [r7, #3]
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	4a33      	ldr	r2, [pc, #204]	@ (80010cc <EXTI4_IRQHandler+0x108>)
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f6      	bne.n	8000ff4 <EXTI4_IRQHandler+0x30>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving->floor_number == 2) {
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11e      	bne.n	800104a <EXTI4_IRQHandler+0x86>
 800100c:	4b30      	ldr	r3, [pc, #192]	@ (80010d0 <EXTI4_IRQHandler+0x10c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d119      	bne.n	800104a <EXTI4_IRQHandler+0x86>
			// IF the floor position is not equal to the floor we are servicing
			if (floor_position != serving->floor_number) {
 8001016:	4b2e      	ldr	r3, [pc, #184]	@ (80010d0 <EXTI4_IRQHandler+0x10c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	785a      	ldrb	r2, [r3, #1]
 800101c:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <EXTI4_IRQHandler+0x110>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d04a      	beq.n	80010ba <EXTI4_IRQHandler+0xf6>
				floor_requests[1].requested = 1;
 8001024:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <EXTI4_IRQHandler+0x114>)
 8001026:	2201      	movs	r2, #1
 8001028:	70da      	strb	r2, [r3, #3]

				requests[i] = &floor_requests[1];
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	4a27      	ldr	r2, [pc, #156]	@ (80010cc <EXTI4_IRQHandler+0x108>)
 800102e:	492b      	ldr	r1, [pc, #172]	@ (80010dc <EXTI4_IRQHandler+0x118>)
 8001030:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Reset_Timer(1, &htim2);
 8001034:	492a      	ldr	r1, [pc, #168]	@ (80010e0 <EXTI4_IRQHandler+0x11c>)
 8001036:	2001      	movs	r0, #1
 8001038:	f000 fbe8 	bl	800180c <Reset_Timer>
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001042:	4828      	ldr	r0, [pc, #160]	@ (80010e4 <EXTI4_IRQHandler+0x120>)
 8001044:	f001 f858 	bl	80020f8 <HAL_GPIO_WritePin>
			if (floor_position != serving->floor_number) {
 8001048:	e037      	b.n	80010ba <EXTI4_IRQHandler+0xf6>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[1].requested || serving->floor_number == 2) && (!(i == 0 && serving->floor_number == 2) && !(i > 0 && requests[i - 1]->floor_number == 2))) {
 800104a:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <EXTI4_IRQHandler+0x114>)
 800104c:	78db      	ldrb	r3, [r3, #3]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <EXTI4_IRQHandler+0x98>
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <EXTI4_IRQHandler+0x10c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	785b      	ldrb	r3, [r3, #1]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d12e      	bne.n	80010ba <EXTI4_IRQHandler+0xf6>
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d104      	bne.n	800106c <EXTI4_IRQHandler+0xa8>
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <EXTI4_IRQHandler+0x10c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d026      	beq.n	80010ba <EXTI4_IRQHandler+0xf6>
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <EXTI4_IRQHandler+0xbe>
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	3b01      	subs	r3, #1
 8001076:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <EXTI4_IRQHandler+0x108>)
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d01b      	beq.n	80010ba <EXTI4_IRQHandler+0xf6>
			floor_requests[1].requested = 1;
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <EXTI4_IRQHandler+0x114>)
 8001084:	2201      	movs	r2, #1
 8001086:	70da      	strb	r2, [r3, #3]
			requests[i] = &floor_requests[1];
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	4a10      	ldr	r2, [pc, #64]	@ (80010cc <EXTI4_IRQHandler+0x108>)
 800108c:	4913      	ldr	r1, [pc, #76]	@ (80010dc <EXTI4_IRQHandler+0x118>)
 800108e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <EXTI4_IRQHandler+0x10c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <EXTI4_IRQHandler+0xe6>
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <EXTI4_IRQHandler+0x124>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <EXTI4_IRQHandler+0xe6>
				Reset_Timer(1, &htim2);
 80010a2:	490f      	ldr	r1, [pc, #60]	@ (80010e0 <EXTI4_IRQHandler+0x11c>)
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 fbb1 	bl	800180c <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <EXTI4_IRQHandler+0x120>)
 80010b2:	f001 f821 	bl	80020f8 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 80010b6:	f000 fbef 	bl	8001898 <Choose_Floor_To_Service>
		}
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI2D_Pin);
 80010ba:	2010      	movs	r0, #16
 80010bc:	f001 f84e 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	48000400 	.word	0x48000400
 80010cc:	20000220 	.word	0x20000220
 80010d0:	20000234 	.word	0x20000234
 80010d4:	20000219 	.word	0x20000219
 80010d8:	2000020c 	.word	0x2000020c
 80010dc:	2000020f 	.word	0x2000020f
 80010e0:	20000078 	.word	0x20000078
 80010e4:	48000800 	.word	0x48000800
 80010e8:	2000021c 	.word	0x2000021c

080010ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI2U_Pin);
 80010f2:	2020      	movs	r0, #32
 80010f4:	f001 f832 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OI3D_Pin);
 80010f8:	2040      	movs	r0, #64	@ 0x40
 80010fa:	f001 f82f 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  // FUNCTION REQUESTS FLOOR 2 UP AND FLOOR 3

  // IF button for choosing floor 2 is pressed
    if(pin_num == 2) {
 80010fe:	4b6e      	ldr	r3, [pc, #440]	@ (80012b8 <EXTI9_5_IRQHandler+0x1cc>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d16a      	bne.n	80011dc <EXTI9_5_IRQHandler+0xf0>
	    uint8_t i = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
		while (requests[i]) i++;
 800110a:	e002      	b.n	8001112 <EXTI9_5_IRQHandler+0x26>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	3301      	adds	r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4a69      	ldr	r2, [pc, #420]	@ (80012bc <EXTI9_5_IRQHandler+0x1d0>)
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f6      	bne.n	800110c <EXTI9_5_IRQHandler+0x20>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving->floor_number == 2) {
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d11f      	bne.n	8001164 <EXTI9_5_IRQHandler+0x78>
 8001124:	4b66      	ldr	r3, [pc, #408]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d11a      	bne.n	8001164 <EXTI9_5_IRQHandler+0x78>
			// IF the floor position is not equal to the floor we are servicing
			if (floor_position != serving->floor_number) {
 800112e:	4b64      	ldr	r3, [pc, #400]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	785a      	ldrb	r2, [r3, #1]
 8001134:	4b63      	ldr	r3, [pc, #396]	@ (80012c4 <EXTI9_5_IRQHandler+0x1d8>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	f000 80b9 	beq.w	80012b0 <EXTI9_5_IRQHandler+0x1c4>
				floor_requests[2].requested = 1;
 800113e:	4b62      	ldr	r3, [pc, #392]	@ (80012c8 <EXTI9_5_IRQHandler+0x1dc>)
 8001140:	2201      	movs	r2, #1
 8001142:	719a      	strb	r2, [r3, #6]

				requests[i] = &floor_requests[2];
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4a5d      	ldr	r2, [pc, #372]	@ (80012bc <EXTI9_5_IRQHandler+0x1d0>)
 8001148:	4960      	ldr	r1, [pc, #384]	@ (80012cc <EXTI9_5_IRQHandler+0x1e0>)
 800114a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Reset_Timer(1, &htim2);
 800114e:	4960      	ldr	r1, [pc, #384]	@ (80012d0 <EXTI9_5_IRQHandler+0x1e4>)
 8001150:	2001      	movs	r0, #1
 8001152:	f000 fb5b 	bl	800180c <Reset_Timer>
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	485d      	ldr	r0, [pc, #372]	@ (80012d4 <EXTI9_5_IRQHandler+0x1e8>)
 800115e:	f000 ffcb 	bl	80020f8 <HAL_GPIO_WritePin>
			if (floor_position != serving->floor_number) {
 8001162:	e0a5      	b.n	80012b0 <EXTI9_5_IRQHandler+0x1c4>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[2].requested || serving->floor_number == 2) && (!(i == 0 && serving->floor_number == 2) && !(i > 0 && requests[i - 1]->floor_number == 2))) {
 8001164:	4b58      	ldr	r3, [pc, #352]	@ (80012c8 <EXTI9_5_IRQHandler+0x1dc>)
 8001166:	799b      	ldrb	r3, [r3, #6]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <EXTI9_5_IRQHandler+0x8c>
 800116c:	4b54      	ldr	r3, [pc, #336]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	2b02      	cmp	r3, #2
 8001174:	f040 809c 	bne.w	80012b0 <EXTI9_5_IRQHandler+0x1c4>
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d105      	bne.n	800118a <EXTI9_5_IRQHandler+0x9e>
 800117e:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	2b02      	cmp	r3, #2
 8001186:	f000 8093 	beq.w	80012b0 <EXTI9_5_IRQHandler+0x1c4>
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <EXTI9_5_IRQHandler+0xb6>
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3b01      	subs	r3, #1
 8001194:	4a49      	ldr	r2, [pc, #292]	@ (80012bc <EXTI9_5_IRQHandler+0x1d0>)
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	2b02      	cmp	r3, #2
 800119e:	f000 8087 	beq.w	80012b0 <EXTI9_5_IRQHandler+0x1c4>
			floor_requests[2].requested = 1;
 80011a2:	4b49      	ldr	r3, [pc, #292]	@ (80012c8 <EXTI9_5_IRQHandler+0x1dc>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	719a      	strb	r2, [r3, #6]
			requests[i] = &floor_requests[2];
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4a44      	ldr	r2, [pc, #272]	@ (80012bc <EXTI9_5_IRQHandler+0x1d0>)
 80011ac:	4947      	ldr	r1, [pc, #284]	@ (80012cc <EXTI9_5_IRQHandler+0x1e0>)
 80011ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 80011b2:	4b43      	ldr	r3, [pc, #268]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d007      	beq.n	80011ca <EXTI9_5_IRQHandler+0xde>
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <EXTI9_5_IRQHandler+0x1ec>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <EXTI9_5_IRQHandler+0xde>
				Reset_Timer(1, &htim2);
 80011c2:	4943      	ldr	r1, [pc, #268]	@ (80012d0 <EXTI9_5_IRQHandler+0x1e4>)
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 fb21 	bl	800180c <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011d0:	4840      	ldr	r0, [pc, #256]	@ (80012d4 <EXTI9_5_IRQHandler+0x1e8>)
 80011d2:	f000 ff91 	bl	80020f8 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 80011d6:	f000 fb5f 	bl	8001898 <Choose_Floor_To_Service>
			HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
			Choose_Floor_To_Service();
		}
	}
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011da:	e069      	b.n	80012b0 <EXTI9_5_IRQHandler+0x1c4>
      else if (pin_num == 3) {
 80011dc:	4b36      	ldr	r3, [pc, #216]	@ (80012b8 <EXTI9_5_IRQHandler+0x1cc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d165      	bne.n	80012b0 <EXTI9_5_IRQHandler+0x1c4>
		uint8_t i = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	71bb      	strb	r3, [r7, #6]
		while (requests[i]) i++;
 80011e8:	e002      	b.n	80011f0 <EXTI9_5_IRQHandler+0x104>
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	3301      	adds	r3, #1
 80011ee:	71bb      	strb	r3, [r7, #6]
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	4a32      	ldr	r2, [pc, #200]	@ (80012bc <EXTI9_5_IRQHandler+0x1d0>)
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f6      	bne.n	80011ea <EXTI9_5_IRQHandler+0xfe>
		if (i == 0 && serving->floor_number == 3) {
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d11d      	bne.n	800123e <EXTI9_5_IRQHandler+0x152>
 8001202:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d118      	bne.n	800123e <EXTI9_5_IRQHandler+0x152>
			if (floor_position != serving->floor_number) {
 800120c:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	785a      	ldrb	r2, [r3, #1]
 8001212:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <EXTI9_5_IRQHandler+0x1d8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d011      	beq.n	800123e <EXTI9_5_IRQHandler+0x152>
				floor_requests[3].requested = 1;
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <EXTI9_5_IRQHandler+0x1dc>)
 800121c:	2201      	movs	r2, #1
 800121e:	725a      	strb	r2, [r3, #9]
				requests[i] = &floor_requests[3];
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	4a26      	ldr	r2, [pc, #152]	@ (80012bc <EXTI9_5_IRQHandler+0x1d0>)
 8001224:	492d      	ldr	r1, [pc, #180]	@ (80012dc <EXTI9_5_IRQHandler+0x1f0>)
 8001226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Reset_Timer(1, &htim2);
 800122a:	4929      	ldr	r1, [pc, #164]	@ (80012d0 <EXTI9_5_IRQHandler+0x1e4>)
 800122c:	2001      	movs	r0, #1
 800122e:	f000 faed 	bl	800180c <Reset_Timer>
				HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001238:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <EXTI9_5_IRQHandler+0x1e8>)
 800123a:	f000 ff5d 	bl	80020f8 <HAL_GPIO_WritePin>
		if ((!floor_requests[3].requested || serving->floor_number == 3) && (!(i == 0 && serving->floor_number == 3) && !(i > 0 && requests[i - 1]->floor_number == 3))) {
 800123e:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <EXTI9_5_IRQHandler+0x1dc>)
 8001240:	7a5b      	ldrb	r3, [r3, #9]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <EXTI9_5_IRQHandler+0x164>
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d12f      	bne.n	80012b0 <EXTI9_5_IRQHandler+0x1c4>
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d104      	bne.n	8001260 <EXTI9_5_IRQHandler+0x174>
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	785b      	ldrb	r3, [r3, #1]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d027      	beq.n	80012b0 <EXTI9_5_IRQHandler+0x1c4>
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <EXTI9_5_IRQHandler+0x18a>
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	3b01      	subs	r3, #1
 800126a:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <EXTI9_5_IRQHandler+0x1d0>)
 800126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d01c      	beq.n	80012b0 <EXTI9_5_IRQHandler+0x1c4>
			floor_requests[3].requested = 1;
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <EXTI9_5_IRQHandler+0x1dc>)
 8001278:	2201      	movs	r2, #1
 800127a:	725a      	strb	r2, [r3, #9]
			requests[i] = &floor_requests[3];
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	4a0f      	ldr	r2, [pc, #60]	@ (80012bc <EXTI9_5_IRQHandler+0x1d0>)
 8001280:	4916      	ldr	r1, [pc, #88]	@ (80012dc <EXTI9_5_IRQHandler+0x1f0>)
 8001282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (serving && !floor_destinations[0]) {
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <EXTI9_5_IRQHandler+0x1d4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <EXTI9_5_IRQHandler+0x1b2>
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <EXTI9_5_IRQHandler+0x1ec>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <EXTI9_5_IRQHandler+0x1b2>
				Reset_Timer(1, &htim2);
 8001296:	490e      	ldr	r1, [pc, #56]	@ (80012d0 <EXTI9_5_IRQHandler+0x1e4>)
 8001298:	2001      	movs	r0, #1
 800129a:	f000 fab7 	bl	800180c <Reset_Timer>
			HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012a4:	480b      	ldr	r0, [pc, #44]	@ (80012d4 <EXTI9_5_IRQHandler+0x1e8>)
 80012a6:	f000 ff27 	bl	80020f8 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 80012aa:	f000 faf5 	bl	8001898 <Choose_Floor_To_Service>
}
 80012ae:	e7ff      	b.n	80012b0 <EXTI9_5_IRQHandler+0x1c4>
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000230 	.word	0x20000230
 80012bc:	20000220 	.word	0x20000220
 80012c0:	20000234 	.word	0x20000234
 80012c4:	20000219 	.word	0x20000219
 80012c8:	2000020c 	.word	0x2000020c
 80012cc:	20000212 	.word	0x20000212
 80012d0:	20000078 	.word	0x20000078
 80012d4:	48000800 	.word	0x48000800
 80012d8:	2000021c 	.word	0x2000021c
 80012dc:	20000215 	.word	0x20000215

080012e0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	count++;
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80012ee:	701a      	strb	r2, [r3, #0]
	if (count == 15 || (count < 10 && count % 2 == 1)) {
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d00a      	beq.n	800130e <TIM1_BRK_TIM15_IRQHandler+0x2e>
 80012f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b09      	cmp	r3, #9
 80012fe:	d80b      	bhi.n	8001318 <TIM1_BRK_TIM15_IRQHandler+0x38>
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <TIM1_BRK_TIM15_IRQHandler+0x38>
		HAL_GPIO_TogglePin(BCDI_GPIO_Port, BCDI_Pin);
 800130e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001312:	4808      	ldr	r0, [pc, #32]	@ (8001334 <TIM1_BRK_TIM15_IRQHandler+0x54>)
 8001314:	f000 ff08 	bl	8002128 <HAL_GPIO_TogglePin>
	}

	if (count == 18) 	count = 0;
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b12      	cmp	r3, #18
 800131e:	d102      	bne.n	8001326 <TIM1_BRK_TIM15_IRQHandler+0x46>
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001326:	4804      	ldr	r0, [pc, #16]	@ (8001338 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001328:	f002 fbfb 	bl	8003b22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000023a 	.word	0x2000023a
 8001334:	48000800 	.word	0x48000800
 8001338:	20000110 	.word	0x20000110

0800133c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001340:	4812      	ldr	r0, [pc, #72]	@ (800138c <TIM2_IRQHandler+0x50>)
 8001342:	f002 fbee 	bl	8003b22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (start_timer) {
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <TIM2_IRQHandler+0x54>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00f      	beq.n	800136e <TIM2_IRQHandler+0x32>
  		start_timer = 0;
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <TIM2_IRQHandler+0x54>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
  		HAL_TIM_Base_Stop_IT(&htim2);
 8001354:	480d      	ldr	r0, [pc, #52]	@ (800138c <TIM2_IRQHandler+0x50>)
 8001356:	f002 fbb5 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
  		HAL_TIM_Base_Stop_IT(&htim15);
 800135a:	480e      	ldr	r0, [pc, #56]	@ (8001394 <TIM2_IRQHandler+0x58>)
 800135c:	f002 fbb2 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
  		HAL_GPIO_WritePin(BCDI_GPIO_Port, BCDI_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001366:	480c      	ldr	r0, [pc, #48]	@ (8001398 <TIM2_IRQHandler+0x5c>)
 8001368:	f000 fec6 	bl	80020f8 <HAL_GPIO_WritePin>
  		start_timer = 1;
  		sprintf(msgs, "HURRY UP TIMER STARTING\r\n");
  		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 25, 100);
  	}
  /* USER CODE END TIM2_IRQn 1 */
}
 800136c:	e00c      	b.n	8001388 <TIM2_IRQHandler+0x4c>
  		start_timer = 1;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <TIM2_IRQHandler+0x54>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
  		sprintf(msgs, "HURRY UP TIMER STARTING\r\n");
 8001374:	4909      	ldr	r1, [pc, #36]	@ (800139c <TIM2_IRQHandler+0x60>)
 8001376:	480a      	ldr	r0, [pc, #40]	@ (80013a0 <TIM2_IRQHandler+0x64>)
 8001378:	f003 fb88 	bl	8004a8c <siprintf>
  		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 25, 100);
 800137c:	2364      	movs	r3, #100	@ 0x64
 800137e:	2219      	movs	r2, #25
 8001380:	4907      	ldr	r1, [pc, #28]	@ (80013a0 <TIM2_IRQHandler+0x64>)
 8001382:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <TIM2_IRQHandler+0x68>)
 8001384:	f002 ffa6 	bl	80042d4 <HAL_UART_Transmit>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000078 	.word	0x20000078
 8001390:	20000238 	.word	0x20000238
 8001394:	20000110 	.word	0x20000110
 8001398:	48000800 	.word	0x48000800
 800139c:	080053f4 	.word	0x080053f4
 80013a0:	2000023c 	.word	0x2000023c
 80013a4:	2000015c 	.word	0x2000015c

080013a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
//	for (int i = 0; i < 65535; i++);
//	if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
//		on = 1;
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013b0:	f000 fed4 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (elevator_moving_counter < 3) {
 80013be:	4b94      	ldr	r3, [pc, #592]	@ (8001610 <TIM6_DAC_IRQHandler+0x258>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d81d      	bhi.n	8001402 <TIM6_DAC_IRQHandler+0x4a>
//			case 2:
//				HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
//				break;
//			}
//		}
		sprintf(msgs, "MOVING TO FLOOR %d FROM FLOOR %d\r\n", elevator_direction == 'u' ? floor_position + 1 : floor_position - 1, floor_position);
 80013c6:	4b93      	ldr	r3, [pc, #588]	@ (8001614 <TIM6_DAC_IRQHandler+0x25c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b75      	cmp	r3, #117	@ 0x75
 80013cc:	d103      	bne.n	80013d6 <TIM6_DAC_IRQHandler+0x1e>
 80013ce:	4b92      	ldr	r3, [pc, #584]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	e002      	b.n	80013dc <TIM6_DAC_IRQHandler+0x24>
 80013d6:	4b90      	ldr	r3, [pc, #576]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	4b8e      	ldr	r3, [pc, #568]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	498e      	ldr	r1, [pc, #568]	@ (800161c <TIM6_DAC_IRQHandler+0x264>)
 80013e2:	488f      	ldr	r0, [pc, #572]	@ (8001620 <TIM6_DAC_IRQHandler+0x268>)
 80013e4:	f003 fb52 	bl	8004a8c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 32, 100);
 80013e8:	2364      	movs	r3, #100	@ 0x64
 80013ea:	2220      	movs	r2, #32
 80013ec:	498c      	ldr	r1, [pc, #560]	@ (8001620 <TIM6_DAC_IRQHandler+0x268>)
 80013ee:	488d      	ldr	r0, [pc, #564]	@ (8001624 <TIM6_DAC_IRQHandler+0x26c>)
 80013f0:	f002 ff70 	bl	80042d4 <HAL_UART_Transmit>
		elevator_moving_counter++;
 80013f4:	4b86      	ldr	r3, [pc, #536]	@ (8001610 <TIM6_DAC_IRQHandler+0x258>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b84      	ldr	r3, [pc, #528]	@ (8001610 <TIM6_DAC_IRQHandler+0x258>)
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e1e9      	b.n	80017d6 <TIM6_DAC_IRQHandler+0x41e>
	} else {
		switch (floor_position) {
 8001402:	4b85      	ldr	r3, [pc, #532]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d012      	beq.n	8001430 <TIM6_DAC_IRQHandler+0x78>
 800140a:	2b03      	cmp	r3, #3
 800140c:	dc16      	bgt.n	800143c <TIM6_DAC_IRQHandler+0x84>
 800140e:	2b01      	cmp	r3, #1
 8001410:	d002      	beq.n	8001418 <TIM6_DAC_IRQHandler+0x60>
 8001412:	2b02      	cmp	r3, #2
 8001414:	d006      	beq.n	8001424 <TIM6_DAC_IRQHandler+0x6c>
 8001416:	e011      	b.n	800143c <TIM6_DAC_IRQHandler+0x84>
		case 1:
			HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2101      	movs	r1, #1
 800141c:	4882      	ldr	r0, [pc, #520]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 800141e:	f000 fe6b 	bl	80020f8 <HAL_GPIO_WritePin>
			break;
 8001422:	e00b      	b.n	800143c <TIM6_DAC_IRQHandler+0x84>
		case 2:
			HAL_GPIO_WritePin(PF2_GPIO_Port, PF2_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2102      	movs	r1, #2
 8001428:	487f      	ldr	r0, [pc, #508]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 800142a:	f000 fe65 	bl	80020f8 <HAL_GPIO_WritePin>
			break;
 800142e:	e005      	b.n	800143c <TIM6_DAC_IRQHandler+0x84>
		case 3:
			HAL_GPIO_WritePin(PF3_GPIO_Port, PF3_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2104      	movs	r1, #4
 8001434:	487c      	ldr	r0, [pc, #496]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 8001436:	f000 fe5f 	bl	80020f8 <HAL_GPIO_WritePin>
			break;
 800143a:	bf00      	nop
		}
		if (elevator_direction == 'd') {
 800143c:	4b75      	ldr	r3, [pc, #468]	@ (8001614 <TIM6_DAC_IRQHandler+0x25c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b64      	cmp	r3, #100	@ 0x64
 8001442:	d106      	bne.n	8001452 <TIM6_DAC_IRQHandler+0x9a>
			floor_position--;
 8001444:	4b74      	ldr	r3, [pc, #464]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3b01      	subs	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b72      	ldr	r3, [pc, #456]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e005      	b.n	800145e <TIM6_DAC_IRQHandler+0xa6>
		} else {
			floor_position++;
 8001452:	4b71      	ldr	r3, [pc, #452]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b6f      	ldr	r3, [pc, #444]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 800145c:	701a      	strb	r2, [r3, #0]
		}
		switch (floor_position) {
 800145e:	4b6e      	ldr	r3, [pc, #440]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d012      	beq.n	800148c <TIM6_DAC_IRQHandler+0xd4>
 8001466:	2b03      	cmp	r3, #3
 8001468:	dc16      	bgt.n	8001498 <TIM6_DAC_IRQHandler+0xe0>
 800146a:	2b01      	cmp	r3, #1
 800146c:	d002      	beq.n	8001474 <TIM6_DAC_IRQHandler+0xbc>
 800146e:	2b02      	cmp	r3, #2
 8001470:	d006      	beq.n	8001480 <TIM6_DAC_IRQHandler+0xc8>
 8001472:	e011      	b.n	8001498 <TIM6_DAC_IRQHandler+0xe0>
		case 1:
			HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2101      	movs	r1, #1
 8001478:	486b      	ldr	r0, [pc, #428]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 800147a:	f000 fe3d 	bl	80020f8 <HAL_GPIO_WritePin>
			break;
 800147e:	e00b      	b.n	8001498 <TIM6_DAC_IRQHandler+0xe0>
		case 2:
			HAL_GPIO_WritePin(PF2_GPIO_Port, PF2_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2102      	movs	r1, #2
 8001484:	4868      	ldr	r0, [pc, #416]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 8001486:	f000 fe37 	bl	80020f8 <HAL_GPIO_WritePin>
			break;
 800148a:	e005      	b.n	8001498 <TIM6_DAC_IRQHandler+0xe0>
		case 3:
			HAL_GPIO_WritePin(PF3_GPIO_Port, PF3_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2104      	movs	r1, #4
 8001490:	4865      	ldr	r0, [pc, #404]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 8001492:	f000 fe31 	bl	80020f8 <HAL_GPIO_WritePin>
			break;
 8001496:	bf00      	nop
		}


		elevator_moving_counter = 0;
 8001498:	4b5d      	ldr	r3, [pc, #372]	@ (8001610 <TIM6_DAC_IRQHandler+0x258>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
		sprintf(msgs, "ELEVATOR AT FLOOR %d\r\n", floor_position);
 800149e:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4961      	ldr	r1, [pc, #388]	@ (800162c <TIM6_DAC_IRQHandler+0x274>)
 80014a6:	485e      	ldr	r0, [pc, #376]	@ (8001620 <TIM6_DAC_IRQHandler+0x268>)
 80014a8:	f003 faf0 	bl	8004a8c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 21, 100);
 80014ac:	2364      	movs	r3, #100	@ 0x64
 80014ae:	2215      	movs	r2, #21
 80014b0:	495b      	ldr	r1, [pc, #364]	@ (8001620 <TIM6_DAC_IRQHandler+0x268>)
 80014b2:	485c      	ldr	r0, [pc, #368]	@ (8001624 <TIM6_DAC_IRQHandler+0x26c>)
 80014b4:	f002 ff0e 	bl	80042d4 <HAL_UART_Transmit>

		if (floor_position == floor_destinations[0]) { // IF ELEVATOR HAS REACHED FIRST DESTINATION
 80014b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001630 <TIM6_DAC_IRQHandler+0x278>)
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	4b56      	ldr	r3, [pc, #344]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d15a      	bne.n	800157a <TIM6_DAC_IRQHandler+0x1c2>
			sprintf(msgs, "DESTINATION AT FLOOR %d REACHED\r\n", floor_position);
 80014c4:	4b54      	ldr	r3, [pc, #336]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	495a      	ldr	r1, [pc, #360]	@ (8001634 <TIM6_DAC_IRQHandler+0x27c>)
 80014cc:	4854      	ldr	r0, [pc, #336]	@ (8001620 <TIM6_DAC_IRQHandler+0x268>)
 80014ce:	f003 fadd 	bl	8004a8c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 32, 100);
 80014d2:	2364      	movs	r3, #100	@ 0x64
 80014d4:	2220      	movs	r2, #32
 80014d6:	4952      	ldr	r1, [pc, #328]	@ (8001620 <TIM6_DAC_IRQHandler+0x268>)
 80014d8:	4852      	ldr	r0, [pc, #328]	@ (8001624 <TIM6_DAC_IRQHandler+0x26c>)
 80014da:	f002 fefb 	bl	80042d4 <HAL_UART_Transmit>

			switch(floor_position) {
 80014de:	4b4e      	ldr	r3, [pc, #312]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d012      	beq.n	800150c <TIM6_DAC_IRQHandler+0x154>
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	dc16      	bgt.n	8001518 <TIM6_DAC_IRQHandler+0x160>
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d002      	beq.n	80014f4 <TIM6_DAC_IRQHandler+0x13c>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d006      	beq.n	8001500 <TIM6_DAC_IRQHandler+0x148>
 80014f2:	e011      	b.n	8001518 <TIM6_DAC_IRQHandler+0x160>
			case 1:
				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2108      	movs	r1, #8
 80014f8:	484b      	ldr	r0, [pc, #300]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 80014fa:	f000 fdfd 	bl	80020f8 <HAL_GPIO_WritePin>
				break;
 80014fe:	e00b      	b.n	8001518 <TIM6_DAC_IRQHandler+0x160>
			case 2:
				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2110      	movs	r1, #16
 8001504:	4848      	ldr	r0, [pc, #288]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 8001506:	f000 fdf7 	bl	80020f8 <HAL_GPIO_WritePin>
				break;
 800150a:	e005      	b.n	8001518 <TIM6_DAC_IRQHandler+0x160>
			case 3:
				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2120      	movs	r1, #32
 8001510:	4845      	ldr	r0, [pc, #276]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 8001512:	f000 fdf1 	bl	80020f8 <HAL_GPIO_WritePin>
				break;
 8001516:	bf00      	nop
			}

			HAL_GPIO_WritePin(elevator_direction == 'u' ? DU_GPIO_Port : DD_GPIO_Port, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 8001518:	4b3e      	ldr	r3, [pc, #248]	@ (8001614 <TIM6_DAC_IRQHandler+0x25c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b75      	cmp	r3, #117	@ 0x75
 800151e:	d101      	bne.n	8001524 <TIM6_DAC_IRQHandler+0x16c>
 8001520:	2340      	movs	r3, #64	@ 0x40
 8001522:	e000      	b.n	8001526 <TIM6_DAC_IRQHandler+0x16e>
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	483f      	ldr	r0, [pc, #252]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 800152c:	f000 fde4 	bl	80020f8 <HAL_GPIO_WritePin>
			if (floor_destinations[1] == 0) { // IF THERE ARE NO OTHER FLOOR DESTINATION REQUESTS
 8001530:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <TIM6_DAC_IRQHandler+0x278>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <TIM6_DAC_IRQHandler+0x188>
				floor_destinations[0] = 0;
 8001538:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <TIM6_DAC_IRQHandler+0x278>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e006      	b.n	800154e <TIM6_DAC_IRQHandler+0x196>

			} else { // IF THERE IS ANOTHER FLOOR DESTINATION REQUEST
				floor_destinations[0] = floor_destinations[1];
 8001540:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <TIM6_DAC_IRQHandler+0x278>)
 8001542:	785a      	ldrb	r2, [r3, #1]
 8001544:	4b3a      	ldr	r3, [pc, #232]	@ (8001630 <TIM6_DAC_IRQHandler+0x278>)
 8001546:	701a      	strb	r2, [r3, #0]
				floor_destinations[1] = 0;
 8001548:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <TIM6_DAC_IRQHandler+0x278>)
 800154a:	2200      	movs	r2, #0
 800154c:	705a      	strb	r2, [r3, #1]
				// CHECK FOR ANY INPUTS INSIDE ELEVATOR, ONLY ALLOW TO GO IN THE CURRENT DIRECTION
			}
//			HAL_TIM_Base_Stop_IT(&htim2);
//			start_timer = 0;
//			if (requests[0] || floor_destinations[0])		HAL_TIM_Base_Start_IT(&htim2);
			if (requests[0] || floor_destinations[0])	Reset_Timer(1, &htim2);
 800154e:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <TIM6_DAC_IRQHandler+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d103      	bne.n	800155e <TIM6_DAC_IRQHandler+0x1a6>
 8001556:	4b36      	ldr	r3, [pc, #216]	@ (8001630 <TIM6_DAC_IRQHandler+0x278>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <TIM6_DAC_IRQHandler+0x1ae>
 800155e:	4937      	ldr	r1, [pc, #220]	@ (800163c <TIM6_DAC_IRQHandler+0x284>)
 8001560:	2001      	movs	r0, #1
 8001562:	f000 f953 	bl	800180c <Reset_Timer>
			count = 0;
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <TIM6_DAC_IRQHandler+0x288>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 800156c:	4835      	ldr	r0, [pc, #212]	@ (8001644 <TIM6_DAC_IRQHandler+0x28c>)
 800156e:	f002 fa55 	bl	8003a1c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Stop_IT(&htim6);
 8001572:	4835      	ldr	r0, [pc, #212]	@ (8001648 <TIM6_DAC_IRQHandler+0x290>)
 8001574:	f002 faa6 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
 8001578:	e12d      	b.n	80017d6 <TIM6_DAC_IRQHandler+0x41e>

		} else if (floor_position == serving->floor_number && traveling) {
 800157a:	4b34      	ldr	r3, [pc, #208]	@ (800164c <TIM6_DAC_IRQHandler+0x294>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	785a      	ldrb	r2, [r3, #1]
 8001580:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 8088 	bne.w	800169a <TIM6_DAC_IRQHandler+0x2e2>
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <TIM6_DAC_IRQHandler+0x298>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8083 	beq.w	800169a <TIM6_DAC_IRQHandler+0x2e2>
			sprintf(msgs, "REQUEST AT FLOOR %d REACHED\r\n", floor_position);
 8001594:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <TIM6_DAC_IRQHandler+0x260>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	492e      	ldr	r1, [pc, #184]	@ (8001654 <TIM6_DAC_IRQHandler+0x29c>)
 800159c:	4820      	ldr	r0, [pc, #128]	@ (8001620 <TIM6_DAC_IRQHandler+0x268>)
 800159e:	f003 fa75 	bl	8004a8c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 28, 100);
 80015a2:	2364      	movs	r3, #100	@ 0x64
 80015a4:	221c      	movs	r2, #28
 80015a6:	491e      	ldr	r1, [pc, #120]	@ (8001620 <TIM6_DAC_IRQHandler+0x268>)
 80015a8:	481e      	ldr	r0, [pc, #120]	@ (8001624 <TIM6_DAC_IRQHandler+0x26c>)
 80015aa:	f002 fe93 	bl	80042d4 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(elevator_direction == 'u' ? DU_GPIO_Port : DD_GPIO_Port, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <TIM6_DAC_IRQHandler+0x25c>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b75      	cmp	r3, #117	@ 0x75
 80015b4:	d101      	bne.n	80015ba <TIM6_DAC_IRQHandler+0x202>
 80015b6:	2340      	movs	r3, #64	@ 0x40
 80015b8:	e000      	b.n	80015bc <TIM6_DAC_IRQHandler+0x204>
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	2200      	movs	r2, #0
 80015be:	4619      	mov	r1, r3
 80015c0:	4819      	ldr	r0, [pc, #100]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 80015c2:	f000 fd99 	bl	80020f8 <HAL_GPIO_WritePin>
			traveling = 0;
 80015c6:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <TIM6_DAC_IRQHandler+0x298>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
			switch(serving->floor_number) {
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <TIM6_DAC_IRQHandler+0x294>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d040      	beq.n	8001658 <TIM6_DAC_IRQHandler+0x2a0>
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	dc48      	bgt.n	800166c <TIM6_DAC_IRQHandler+0x2b4>
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d002      	beq.n	80015e4 <TIM6_DAC_IRQHandler+0x22c>
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d00a      	beq.n	80015f8 <TIM6_DAC_IRQHandler+0x240>
 80015e2:	e043      	b.n	800166c <TIM6_DAC_IRQHandler+0x2b4>
			  case 1:
				  elevator_direction = 'u';
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <TIM6_DAC_IRQHandler+0x25c>)
 80015e6:	2275      	movs	r2, #117	@ 0x75
 80015e8:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f0:	480d      	ldr	r0, [pc, #52]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 80015f2:	f000 fd81 	bl	80020f8 <HAL_GPIO_WritePin>
				  break;
 80015f6:	e039      	b.n	800166c <TIM6_DAC_IRQHandler+0x2b4>
			  case 2:
				  elevator_direction = serving->direction;
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <TIM6_DAC_IRQHandler+0x294>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	789a      	ldrb	r2, [r3, #2]
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <TIM6_DAC_IRQHandler+0x25c>)
 8001600:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001608:	4807      	ldr	r0, [pc, #28]	@ (8001628 <TIM6_DAC_IRQHandler+0x270>)
 800160a:	f000 fd75 	bl	80020f8 <HAL_GPIO_WritePin>
				  break;
 800160e:	e02d      	b.n	800166c <TIM6_DAC_IRQHandler+0x2b4>
 8001610:	2000023b 	.word	0x2000023b
 8001614:	20000218 	.word	0x20000218
 8001618:	20000219 	.word	0x20000219
 800161c:	08005410 	.word	0x08005410
 8001620:	2000023c 	.word	0x2000023c
 8001624:	2000015c 	.word	0x2000015c
 8001628:	48000800 	.word	0x48000800
 800162c:	08005434 	.word	0x08005434
 8001630:	2000021c 	.word	0x2000021c
 8001634:	0800544c 	.word	0x0800544c
 8001638:	20000220 	.word	0x20000220
 800163c:	20000078 	.word	0x20000078
 8001640:	2000023a 	.word	0x2000023a
 8001644:	20000110 	.word	0x20000110
 8001648:	200000c4 	.word	0x200000c4
 800164c:	20000234 	.word	0x20000234
 8001650:	20000239 	.word	0x20000239
 8001654:	08005470 	.word	0x08005470
			  case 3:
				  elevator_direction = 'd';
 8001658:	4b62      	ldr	r3, [pc, #392]	@ (80017e4 <TIM6_DAC_IRQHandler+0x42c>)
 800165a:	2264      	movs	r2, #100	@ 0x64
 800165c:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001664:	4860      	ldr	r0, [pc, #384]	@ (80017e8 <TIM6_DAC_IRQHandler+0x430>)
 8001666:	f000 fd47 	bl	80020f8 <HAL_GPIO_WritePin>
				  break;
 800166a:	bf00      	nop
			  }
			HAL_TIM_Base_Stop_IT(&htim2);
 800166c:	485f      	ldr	r0, [pc, #380]	@ (80017ec <TIM6_DAC_IRQHandler+0x434>)
 800166e:	f002 fa29 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
			start_timer = 0;
 8001672:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <TIM6_DAC_IRQHandler+0x438>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
			if (requests[0])		HAL_TIM_Base_Start_IT(&htim2);
 8001678:	4b5e      	ldr	r3, [pc, #376]	@ (80017f4 <TIM6_DAC_IRQHandler+0x43c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <TIM6_DAC_IRQHandler+0x2ce>
 8001680:	485a      	ldr	r0, [pc, #360]	@ (80017ec <TIM6_DAC_IRQHandler+0x434>)
 8001682:	f002 f9cb 	bl	8003a1c <HAL_TIM_Base_Start_IT>
			count = 0;
 8001686:	4b5c      	ldr	r3, [pc, #368]	@ (80017f8 <TIM6_DAC_IRQHandler+0x440>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 800168c:	485b      	ldr	r0, [pc, #364]	@ (80017fc <TIM6_DAC_IRQHandler+0x444>)
 800168e:	f002 f9c5 	bl	8003a1c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Stop_IT(&htim6);
 8001692:	485b      	ldr	r0, [pc, #364]	@ (8001800 <TIM6_DAC_IRQHandler+0x448>)
 8001694:	f002 fa16 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
 8001698:	e09d      	b.n	80017d6 <TIM6_DAC_IRQHandler+0x41e>
		} else {
			// CHECK IF THERE ARE ANY REQUESTS AT THAT FLOOR GOING IN THE SAME DIRECTION AS THE ELEVATOR, AND SERVICE THEM IF SO
			int8_t floor_requested = -1;
 800169a:	23ff      	movs	r3, #255	@ 0xff
 800169c:	73fb      	strb	r3, [r7, #15]
			switch(floor_position) {
 800169e:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <TIM6_DAC_IRQHandler+0x44c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d03e      	beq.n	8001724 <TIM6_DAC_IRQHandler+0x36c>
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	dc51      	bgt.n	800174e <TIM6_DAC_IRQHandler+0x396>
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d002      	beq.n	80016b4 <TIM6_DAC_IRQHandler+0x2fc>
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d010      	beq.n	80016d4 <TIM6_DAC_IRQHandler+0x31c>
 80016b2:	e04c      	b.n	800174e <TIM6_DAC_IRQHandler+0x396>
			case 1:
				if (floor_requests[0].requested) {
 80016b4:	4b54      	ldr	r3, [pc, #336]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d043      	beq.n	8001744 <TIM6_DAC_IRQHandler+0x38c>
					HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c2:	4849      	ldr	r0, [pc, #292]	@ (80017e8 <TIM6_DAC_IRQHandler+0x430>)
 80016c4:	f000 fd18 	bl	80020f8 <HAL_GPIO_WritePin>
					floor_requests[0].requested = 0;
 80016c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
					floor_requested = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80016d2:	e037      	b.n	8001744 <TIM6_DAC_IRQHandler+0x38c>
			case 2:
				if (floor_requests[1].requested && elevator_direction == 'd') {
 80016d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00f      	beq.n	80016fc <TIM6_DAC_IRQHandler+0x344>
 80016dc:	4b41      	ldr	r3, [pc, #260]	@ (80017e4 <TIM6_DAC_IRQHandler+0x42c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b64      	cmp	r3, #100	@ 0x64
 80016e2:	d10b      	bne.n	80016fc <TIM6_DAC_IRQHandler+0x344>
					HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ea:	483f      	ldr	r0, [pc, #252]	@ (80017e8 <TIM6_DAC_IRQHandler+0x430>)
 80016ec:	f000 fd04 	bl	80020f8 <HAL_GPIO_WritePin>
					floor_requests[1].requested = 0;
 80016f0:	4b45      	ldr	r3, [pc, #276]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	70da      	strb	r2, [r3, #3]
					floor_requested = 1;
 80016f6:	2301      	movs	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
				} else if (floor_requests[2].requested && elevator_direction == 'u') {
					HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
					floor_requests[2].requested = 0;
					floor_requested = 2;
				}
				break;
 80016fa:	e025      	b.n	8001748 <TIM6_DAC_IRQHandler+0x390>
				} else if (floor_requests[2].requested && elevator_direction == 'u') {
 80016fc:	4b42      	ldr	r3, [pc, #264]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 80016fe:	799b      	ldrb	r3, [r3, #6]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d021      	beq.n	8001748 <TIM6_DAC_IRQHandler+0x390>
 8001704:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <TIM6_DAC_IRQHandler+0x42c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b75      	cmp	r3, #117	@ 0x75
 800170a:	d11d      	bne.n	8001748 <TIM6_DAC_IRQHandler+0x390>
					HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001712:	4835      	ldr	r0, [pc, #212]	@ (80017e8 <TIM6_DAC_IRQHandler+0x430>)
 8001714:	f000 fcf0 	bl	80020f8 <HAL_GPIO_WritePin>
					floor_requests[2].requested = 0;
 8001718:	4b3b      	ldr	r3, [pc, #236]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 800171a:	2200      	movs	r2, #0
 800171c:	719a      	strb	r2, [r3, #6]
					floor_requested = 2;
 800171e:	2302      	movs	r3, #2
 8001720:	73fb      	strb	r3, [r7, #15]
				break;
 8001722:	e011      	b.n	8001748 <TIM6_DAC_IRQHandler+0x390>
			case 3:
				if (floor_requests[3].requested) {
 8001724:	4b38      	ldr	r3, [pc, #224]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 8001726:	7a5b      	ldrb	r3, [r3, #9]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00f      	beq.n	800174c <TIM6_DAC_IRQHandler+0x394>
					HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001732:	482d      	ldr	r0, [pc, #180]	@ (80017e8 <TIM6_DAC_IRQHandler+0x430>)
 8001734:	f000 fce0 	bl	80020f8 <HAL_GPIO_WritePin>
					floor_requests[3].requested = 0;
 8001738:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 800173a:	2200      	movs	r2, #0
 800173c:	725a      	strb	r2, [r3, #9]
					floor_requested = 3;
 800173e:	2303      	movs	r3, #3
 8001740:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001742:	e003      	b.n	800174c <TIM6_DAC_IRQHandler+0x394>
				break;
 8001744:	bf00      	nop
 8001746:	e002      	b.n	800174e <TIM6_DAC_IRQHandler+0x396>
				break;
 8001748:	bf00      	nop
 800174a:	e000      	b.n	800174e <TIM6_DAC_IRQHandler+0x396>
				break;
 800174c:	bf00      	nop
			}

			if (floor_requested != -1) {
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001756:	d03e      	beq.n	80017d6 <TIM6_DAC_IRQHandler+0x41e>
				for (int i = 0; i < 4; i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	e026      	b.n	80017ac <TIM6_DAC_IRQHandler+0x3f4>
					if (requests[i] == &floor_requests[floor_requested]) {
 800175e:	4a25      	ldr	r2, [pc, #148]	@ (80017f4 <TIM6_DAC_IRQHandler+0x43c>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001766:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	4a25      	ldr	r2, [pc, #148]	@ (8001808 <TIM6_DAC_IRQHandler+0x450>)
 8001772:	4413      	add	r3, r2
 8001774:	4299      	cmp	r1, r3
 8001776:	d116      	bne.n	80017a6 <TIM6_DAC_IRQHandler+0x3ee>
						for (int k = i; k < 3; k++) {
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	e00b      	b.n	8001796 <TIM6_DAC_IRQHandler+0x3de>
							requests[k] = requests[k + 1];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <TIM6_DAC_IRQHandler+0x43c>)
 8001784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001788:	491a      	ldr	r1, [pc, #104]	@ (80017f4 <TIM6_DAC_IRQHandler+0x43c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						for (int k = i; k < 3; k++) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b02      	cmp	r3, #2
 800179a:	ddf0      	ble.n	800177e <TIM6_DAC_IRQHandler+0x3c6>
						}
						requests[3] = NULL;
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <TIM6_DAC_IRQHandler+0x43c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
						i = 4;
 80017a2:	2304      	movs	r3, #4
 80017a4:	60bb      	str	r3, [r7, #8]
				for (int i = 0; i < 4; i++) {
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3301      	adds	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	ddd5      	ble.n	800175e <TIM6_DAC_IRQHandler+0x3a6>
					}
				}
				count = 0;
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <TIM6_DAC_IRQHandler+0x440>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <TIM6_DAC_IRQHandler+0x434>)
 80017ba:	f002 f983 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
				start_timer = 0;
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <TIM6_DAC_IRQHandler+0x438>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 80017c4:	4809      	ldr	r0, [pc, #36]	@ (80017ec <TIM6_DAC_IRQHandler+0x434>)
 80017c6:	f002 f929 	bl	8003a1c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim15);
 80017ca:	480c      	ldr	r0, [pc, #48]	@ (80017fc <TIM6_DAC_IRQHandler+0x444>)
 80017cc:	f002 f926 	bl	8003a1c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 80017d0:	480b      	ldr	r0, [pc, #44]	@ (8001800 <TIM6_DAC_IRQHandler+0x448>)
 80017d2:	f002 f977 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
//				HAL_TIM_Base_Stop_IT(&htim6);
			}
		}
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017d6:	480a      	ldr	r0, [pc, #40]	@ (8001800 <TIM6_DAC_IRQHandler+0x448>)
 80017d8:	f002 f9a3 	bl	8003b22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000218 	.word	0x20000218
 80017e8:	48000800 	.word	0x48000800
 80017ec:	20000078 	.word	0x20000078
 80017f0:	20000238 	.word	0x20000238
 80017f4:	20000220 	.word	0x20000220
 80017f8:	2000023a 	.word	0x2000023a
 80017fc:	20000110 	.word	0x20000110
 8001800:	200000c4 	.word	0x200000c4
 8001804:	20000219 	.word	0x20000219
 8001808:	2000020c 	.word	0x2000020c

0800180c <Reset_Timer>:
//	if (htim->Instance == TIM2) {
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	}
//}

void Reset_Timer(int num, ...) {
 800180c:	b40f      	push	{r0, r1, r2, r3}
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
	va_list arg_list;
	va_start(arg_list, num);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < num; i++) {
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e025      	b.n	800186c <Reset_Timer+0x60>
		if (va_arg(arg_list, TIM_HandleTypeDef*)->Instance == TIM2) {
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	1d1a      	adds	r2, r3, #4
 8001824:	603a      	str	r2, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800182e:	d109      	bne.n	8001844 <Reset_Timer+0x38>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001830:	4814      	ldr	r0, [pc, #80]	@ (8001884 <Reset_Timer+0x78>)
 8001832:	f002 f947 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
			start_timer = 0;
 8001836:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <Reset_Timer+0x7c>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 800183c:	4811      	ldr	r0, [pc, #68]	@ (8001884 <Reset_Timer+0x78>)
 800183e:	f002 f8ed 	bl	8003a1c <HAL_TIM_Base_Start_IT>
 8001842:	e010      	b.n	8001866 <Reset_Timer+0x5a>
		} else if (va_arg(arg_list, TIM_HandleTypeDef*)->Instance == TIM15) {
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	1d1a      	adds	r2, r3, #4
 8001848:	603a      	str	r2, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a0f      	ldr	r2, [pc, #60]	@ (800188c <Reset_Timer+0x80>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d108      	bne.n	8001866 <Reset_Timer+0x5a>
			HAL_TIM_Base_Stop_IT(&htim15);
 8001854:	480e      	ldr	r0, [pc, #56]	@ (8001890 <Reset_Timer+0x84>)
 8001856:	f002 f935 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
			count = 0;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <Reset_Timer+0x88>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 8001860:	480b      	ldr	r0, [pc, #44]	@ (8001890 <Reset_Timer+0x84>)
 8001862:	f002 f8db 	bl	8003a1c <HAL_TIM_Base_Start_IT>
	for (int i = 0; i < num; i++) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3301      	adds	r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbd5      	blt.n	8001820 <Reset_Timer+0x14>
		}
	}
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001880:	b004      	add	sp, #16
 8001882:	4770      	bx	lr
 8001884:	20000078 	.word	0x20000078
 8001888:	20000238 	.word	0x20000238
 800188c:	40014000 	.word	0x40014000
 8001890:	20000110 	.word	0x20000110
 8001894:	2000023a 	.word	0x2000023a

08001898 <Choose_Floor_To_Service>:

void Choose_Floor_To_Service(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
	// IF there is at least one floor requests and if we are not serving
	if (requests[0] && !serving) {
 800189e:	4b42      	ldr	r3, [pc, #264]	@ (80019a8 <Choose_Floor_To_Service+0x110>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d07c      	beq.n	80019a0 <Choose_Floor_To_Service+0x108>
 80018a6:	4b41      	ldr	r3, [pc, #260]	@ (80019ac <Choose_Floor_To_Service+0x114>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d178      	bne.n	80019a0 <Choose_Floor_To_Service+0x108>
		serving = requests[0];
 80018ae:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <Choose_Floor_To_Service+0x110>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3e      	ldr	r2, [pc, #248]	@ (80019ac <Choose_Floor_To_Service+0x114>)
 80018b4:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 3; i++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	e00b      	b.n	80018d4 <Choose_Floor_To_Service+0x3c>
			requests[i] = requests[i + 1];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a39      	ldr	r2, [pc, #228]	@ (80019a8 <Choose_Floor_To_Service+0x110>)
 80018c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018c6:	4938      	ldr	r1, [pc, #224]	@ (80019a8 <Choose_Floor_To_Service+0x110>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 3; i++) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3301      	adds	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	ddf0      	ble.n	80018bc <Choose_Floor_To_Service+0x24>
		}
		requests[3] = NULL;
 80018da:	4b33      	ldr	r3, [pc, #204]	@ (80019a8 <Choose_Floor_To_Service+0x110>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]

		// CASE 1
		// IF the elevator's floor position matches with the floor that we are serving
		if (floor_position == serving->floor_number) {
 80018e0:	4b32      	ldr	r3, [pc, #200]	@ (80019ac <Choose_Floor_To_Service+0x114>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	785a      	ldrb	r2, [r3, #1]
 80018e6:	4b32      	ldr	r3, [pc, #200]	@ (80019b0 <Choose_Floor_To_Service+0x118>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d12f      	bne.n	800194e <Choose_Floor_To_Service+0xb6>
			switch(serving->floor_number) { // CHANGE THIS SWITCH CASE
 80018ee:	4b2f      	ldr	r3, [pc, #188]	@ (80019ac <Choose_Floor_To_Service+0x114>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	785b      	ldrb	r3, [r3, #1]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d01c      	beq.n	8001932 <Choose_Floor_To_Service+0x9a>
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	dc24      	bgt.n	8001946 <Choose_Floor_To_Service+0xae>
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d002      	beq.n	8001906 <Choose_Floor_To_Service+0x6e>
 8001900:	2b02      	cmp	r3, #2
 8001902:	d00a      	beq.n	800191a <Choose_Floor_To_Service+0x82>
 8001904:	e01f      	b.n	8001946 <Choose_Floor_To_Service+0xae>
			case 1:
				elevator_direction = 'u';
 8001906:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <Choose_Floor_To_Service+0x11c>)
 8001908:	2275      	movs	r2, #117	@ 0x75
 800190a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001912:	4829      	ldr	r0, [pc, #164]	@ (80019b8 <Choose_Floor_To_Service+0x120>)
 8001914:	f000 fbf0 	bl	80020f8 <HAL_GPIO_WritePin>
				break;
 8001918:	e015      	b.n	8001946 <Choose_Floor_To_Service+0xae>
			case 2:
				elevator_direction = serving->direction;
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <Choose_Floor_To_Service+0x114>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	789a      	ldrb	r2, [r3, #2]
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <Choose_Floor_To_Service+0x11c>)
 8001922:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800192a:	4823      	ldr	r0, [pc, #140]	@ (80019b8 <Choose_Floor_To_Service+0x120>)
 800192c:	f000 fbe4 	bl	80020f8 <HAL_GPIO_WritePin>
				break;
 8001930:	e009      	b.n	8001946 <Choose_Floor_To_Service+0xae>
			case 3:
				elevator_direction = 'd';
 8001932:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <Choose_Floor_To_Service+0x11c>)
 8001934:	2264      	movs	r2, #100	@ 0x64
 8001936:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800193e:	481e      	ldr	r0, [pc, #120]	@ (80019b8 <Choose_Floor_To_Service+0x120>)
 8001940:	f000 fbda 	bl	80020f8 <HAL_GPIO_WritePin>
				break;
 8001944:	bf00      	nop
			}

			HAL_TIM_Base_Start_IT(&htim15);
 8001946:	481d      	ldr	r0, [pc, #116]	@ (80019bc <Choose_Floor_To_Service+0x124>)
 8001948:	f002 f868 	bl	8003a1c <HAL_TIM_Base_Start_IT>
		  }
	}

//	// IF there is at least 1 floor request and if the elevator is either not serving or it is serving and the current floor position ma
//	if (requests[0] != 0 && (!serving || (serving && floor_position == requests[0]))) {
}
 800194c:	e028      	b.n	80019a0 <Choose_Floor_To_Service+0x108>
		  else if (!traveling && floor_position != serving->floor_number) {
 800194e:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <Choose_Floor_To_Service+0x128>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d124      	bne.n	80019a0 <Choose_Floor_To_Service+0x108>
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <Choose_Floor_To_Service+0x114>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	785a      	ldrb	r2, [r3, #1]
 800195c:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <Choose_Floor_To_Service+0x118>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d01d      	beq.n	80019a0 <Choose_Floor_To_Service+0x108>
			  traveling = 1;
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <Choose_Floor_To_Service+0x128>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
			  elevator_direction = floor_position > serving->floor_number ? 'd' : 'u';
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <Choose_Floor_To_Service+0x114>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	785a      	ldrb	r2, [r3, #1]
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <Choose_Floor_To_Service+0x118>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d201      	bcs.n	800197c <Choose_Floor_To_Service+0xe4>
 8001978:	2264      	movs	r2, #100	@ 0x64
 800197a:	e000      	b.n	800197e <Choose_Floor_To_Service+0xe6>
 800197c:	2275      	movs	r2, #117	@ 0x75
 800197e:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <Choose_Floor_To_Service+0x11c>)
 8001980:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <Choose_Floor_To_Service+0x11c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b75      	cmp	r3, #117	@ 0x75
 8001988:	d101      	bne.n	800198e <Choose_Floor_To_Service+0xf6>
 800198a:	2340      	movs	r3, #64	@ 0x40
 800198c:	e000      	b.n	8001990 <Choose_Floor_To_Service+0xf8>
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	2201      	movs	r2, #1
 8001992:	4619      	mov	r1, r3
 8001994:	4808      	ldr	r0, [pc, #32]	@ (80019b8 <Choose_Floor_To_Service+0x120>)
 8001996:	f000 fbaf 	bl	80020f8 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim6);
 800199a:	480a      	ldr	r0, [pc, #40]	@ (80019c4 <Choose_Floor_To_Service+0x12c>)
 800199c:	f002 f83e 	bl	8003a1c <HAL_TIM_Base_Start_IT>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000220 	.word	0x20000220
 80019ac:	20000234 	.word	0x20000234
 80019b0:	20000219 	.word	0x20000219
 80019b4:	20000218 	.word	0x20000218
 80019b8:	48000800 	.word	0x48000800
 80019bc:	20000110 	.word	0x20000110
 80019c0:	20000239 	.word	0x20000239
 80019c4:	200000c4 	.word	0x200000c4

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	@ (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f003 f870 	bl	8004adc <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20004000 	.word	0x20004000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	20000270 	.word	0x20000270
 8001a30:	200003c0 	.word	0x200003c0

08001a34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a90 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a5c:	f7ff ffea 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopForever+0xe>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopForever+0x16>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a86:	f003 f82f 	bl	8004ae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a8a:	f7fe fbf1 	bl	8000270 <main>

08001a8e <LoopForever>:

LoopForever:
    b LoopForever
 8001a8e:	e7fe      	b.n	8001a8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a90:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a9c:	0800550c 	.word	0x0800550c
  ldr r2, =_sbss
 8001aa0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001aa4:	200003c0 	.word	0x200003c0

08001aa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_IRQHandler>
	...

08001aac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_Init+0x28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	@ (8001ad4 <HAL_Init+0x28>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f94f 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7fe ffea 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f967 	bl	8001dca <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f92f 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_IncTick+0x24>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <HAL_IncTick+0x24>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000274 	.word	0x20000274

08001b60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b64:	4b03      	ldr	r3, [pc, #12]	@ (8001b74 <HAL_GetTick+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000274 	.word	0x20000274

08001b78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff ffee 	bl	8001b60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffde 	bl	8001b60 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4907      	ldr	r1, [pc, #28]	@ (8001c5c <__NVIC_EnableIRQ+0x38>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0a      	blt.n	8001c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	490c      	ldr	r1, [pc, #48]	@ (8001cac <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c88:	e00a      	b.n	8001ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4908      	ldr	r1, [pc, #32]	@ (8001cb0 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	@ 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf28      	it	cs
 8001cd2:	2304      	movcs	r3, #4
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_EncodePriority+0x30>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b03      	subs	r3, #3
 8001ce2:	e000      	b.n	8001ce6 <NVIC_EncodePriority+0x32>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	4313      	orrs	r3, r2
         );
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	@ 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff8e 	bl	8001c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff29 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff3e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff8e 	bl	8001cb4 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5d 	bl	8001c60 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff31 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e14e      	b.n	8002092 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8140 	beq.w	800208c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d005      	beq.n	8001e24 <HAL_GPIO_Init+0x40>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d130      	bne.n	8001e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 0201 	and.w	r2, r3, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d017      	beq.n	8001ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d123      	bne.n	8001f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	6939      	ldr	r1, [r7, #16]
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0203 	and.w	r2, r3, #3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 809a 	beq.w	800208c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f58:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a54      	ldr	r2, [pc, #336]	@ (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f70:	4a50      	ldr	r2, [pc, #320]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f9a:	d013      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a46      	ldr	r2, [pc, #280]	@ (80020b8 <HAL_GPIO_Init+0x2d4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_GPIO_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a45      	ldr	r2, [pc, #276]	@ (80020bc <HAL_GPIO_Init+0x2d8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <HAL_GPIO_Init+0x1d8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a44      	ldr	r2, [pc, #272]	@ (80020c0 <HAL_GPIO_Init+0x2dc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_GPIO_Init+0x1d4>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e006      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fb8:	2305      	movs	r3, #5
 8001fba:	e004      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	f002 0203 	and.w	r2, r2, #3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fd6:	4937      	ldr	r1, [pc, #220]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe4:	4b37      	ldr	r3, [pc, #220]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002008:	4a2e      	ldr	r2, [pc, #184]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800200e:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002032:	4a24      	ldr	r2, [pc, #144]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002038:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800205c:	4a19      	ldr	r2, [pc, #100]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002086:	4a0f      	ldr	r2, [pc, #60]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f aea9 	bne.w	8001df4 <HAL_GPIO_Init+0x10>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010000 	.word	0x40010000
 80020b8:	48000400 	.word	0x48000400
 80020bc:	48000800 	.word	0x48000800
 80020c0:	48000c00 	.word	0x48000c00
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e001      	b.n	80020ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002114:	e002      	b.n	800211c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4013      	ands	r3, r2
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43d9      	mvns	r1, r3
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	400b      	ands	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002166:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002172:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fbb2 	bl	80008e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002192:	af00      	add	r7, sp, #0
 8002194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002198:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f001 b823 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 817d 	beq.w	80024c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021c8:	4bbc      	ldr	r3, [pc, #752]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d00c      	beq.n	80021ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d4:	4bb9      	ldr	r3, [pc, #740]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d15c      	bne.n	800229a <HAL_RCC_OscConfig+0x10e>
 80021e0:	4bb6      	ldr	r3, [pc, #728]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ec:	d155      	bne.n	800229a <HAL_RCC_OscConfig+0x10e>
 80021ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021f2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002202:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d102      	bne.n	8002220 <HAL_RCC_OscConfig+0x94>
 800221a:	4ba8      	ldr	r3, [pc, #672]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	e015      	b.n	800224c <HAL_RCC_OscConfig+0xc0>
 8002220:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002224:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002234:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002238:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800223c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002248:	4b9c      	ldr	r3, [pc, #624]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002250:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002254:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002260:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f042 0220 	orr.w	r2, r2, #32
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f002 021f 	and.w	r2, r2, #31
 8002274:	2101      	movs	r1, #1
 8002276:	fa01 f202 	lsl.w	r2, r1, r2
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 811f 	beq.w	80024c0 <HAL_RCC_OscConfig+0x334>
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8116 	bne.w	80024c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f000 bfaf 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x12e>
 80022ac:	4b83      	ldr	r3, [pc, #524]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a82      	ldr	r2, [pc, #520]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e036      	b.n	8002328 <HAL_RCC_OscConfig+0x19c>
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x158>
 80022ca:	4b7c      	ldr	r3, [pc, #496]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7b      	ldr	r2, [pc, #492]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b79      	ldr	r3, [pc, #484]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a78      	ldr	r2, [pc, #480]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e021      	b.n	8002328 <HAL_RCC_OscConfig+0x19c>
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x184>
 80022f6:	4b71      	ldr	r3, [pc, #452]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a70      	ldr	r2, [pc, #448]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b6e      	ldr	r3, [pc, #440]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6d      	ldr	r2, [pc, #436]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0x19c>
 8002310:	4b6a      	ldr	r3, [pc, #424]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a69      	ldr	r2, [pc, #420]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b67      	ldr	r3, [pc, #412]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a66      	ldr	r2, [pc, #408]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002326:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002328:	4b64      	ldr	r3, [pc, #400]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	f023 020f 	bic.w	r2, r3, #15
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	495f      	ldr	r1, [pc, #380]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 800233e:	4313      	orrs	r3, r2
 8002340:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d059      	beq.n	8002406 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7ff fc05 	bl	8001b60 <HAL_GetTick>
 8002356:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fc00 	bl	8001b60 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	@ 0x64
 800236a:	d902      	bls.n	8002372 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	f000 bf43 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002372:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002376:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002386:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_OscConfig+0x218>
 800239e:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e015      	b.n	80023d0 <HAL_RCC_OscConfig+0x244>
 80023a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023a8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80023b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023bc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80023c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80023cc:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023d4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80023d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80023e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f042 0220 	orr.w	r2, r2, #32
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f002 021f 	and.w	r2, r2, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ab      	beq.n	800235c <HAL_RCC_OscConfig+0x1d0>
 8002404:	e05d      	b.n	80024c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff fbab 	bl	8001b60 <HAL_GetTick>
 800240a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff fba6 	bl	8001b60 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	@ 0x64
 800241e:	d902      	bls.n	8002426 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	f000 bee9 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002426:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800242a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800243a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_RCC_OscConfig+0x2cc>
 8002452:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	e015      	b.n	8002484 <HAL_RCC_OscConfig+0x2f8>
 8002458:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800245c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800246c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002470:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002474:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_RCC_OscConfig+0x330>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002488:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800248c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002490:	fa92 f2a2 	rbit	r2, r2
 8002494:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002498:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800249c:	fab2 f282 	clz	r2, r2
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	f042 0220 	orr.w	r2, r2, #32
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f002 021f 	and.w	r2, r2, #31
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f202 	lsl.w	r2, r1, r2
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ab      	bne.n	8002410 <HAL_RCC_OscConfig+0x284>
 80024b8:	e003      	b.n	80024c2 <HAL_RCC_OscConfig+0x336>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 817d 	beq.w	80027d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024d8:	4ba6      	ldr	r3, [pc, #664]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024e4:	4ba3      	ldr	r3, [pc, #652]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d172      	bne.n	80025d6 <HAL_RCC_OscConfig+0x44a>
 80024f0:	4ba0      	ldr	r3, [pc, #640]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d16c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x44a>
 80024fc:	2302      	movs	r3, #2
 80024fe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800250e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d102      	bne.n	800252c <HAL_RCC_OscConfig+0x3a0>
 8002526:	4b93      	ldr	r3, [pc, #588]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	e013      	b.n	8002554 <HAL_RCC_OscConfig+0x3c8>
 800252c:	2302      	movs	r3, #2
 800252e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800253e:	2302      	movs	r3, #2
 8002540:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002544:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002550:	4b88      	ldr	r3, [pc, #544]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	2202      	movs	r2, #2
 8002556:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800255a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800255e:	fa92 f2a2 	rbit	r2, r2
 8002562:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002566:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0220 	orr.w	r2, r2, #32
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCC_OscConfig+0x410>
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d002      	beq.n	800259c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f000 be2e 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b75      	ldr	r3, [pc, #468]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	21f8      	movs	r1, #248	@ 0xf8
 80025b2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80025ba:	fa91 f1a1 	rbit	r1, r1
 80025be:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80025c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80025c6:	fab1 f181 	clz	r1, r1
 80025ca:	b2c9      	uxtb	r1, r1
 80025cc:	408b      	lsls	r3, r1
 80025ce:	4969      	ldr	r1, [pc, #420]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d4:	e0fd      	b.n	80027d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8088 	beq.w	80026f8 <HAL_RCC_OscConfig+0x56c>
 80025e8:	2301      	movs	r3, #1
 80025ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80025fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002608:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	461a      	mov	r2, r3
 8002610:	2301      	movs	r3, #1
 8002612:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff faa4 	bl	8001b60 <HAL_GetTick>
 8002618:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff fa9f 	bl	8001b60 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	f000 bde2 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002634:	2302      	movs	r3, #2
 8002636:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002646:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0x4d8>
 800265e:	4b45      	ldr	r3, [pc, #276]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e013      	b.n	800268c <HAL_RCC_OscConfig+0x500>
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002676:	2302      	movs	r3, #2
 8002678:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800267c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002688:	4b3a      	ldr	r3, [pc, #232]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	2202      	movs	r2, #2
 800268e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002692:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800269e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80026a2:	fab2 f282 	clz	r2, r2
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	f042 0220 	orr.w	r2, r2, #32
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f002 021f 	and.w	r2, r2, #31
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f202 	lsl.w	r2, r1, r2
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0af      	beq.n	800261e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026be:	4b2d      	ldr	r3, [pc, #180]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	21f8      	movs	r1, #248	@ 0xf8
 80026d4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80026dc:	fa91 f1a1 	rbit	r1, r1
 80026e0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80026e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80026e8:	fab1 f181 	clz	r1, r1
 80026ec:	b2c9      	uxtb	r1, r1
 80026ee:	408b      	lsls	r3, r1
 80026f0:	4920      	ldr	r1, [pc, #128]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
 80026f6:	e06c      	b.n	80027d2 <HAL_RCC_OscConfig+0x646>
 80026f8:	2301      	movs	r3, #1
 80026fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800270a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002718:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	461a      	mov	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff fa1c 	bl	8001b60 <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272e:	f7ff fa17 	bl	8001b60 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d902      	bls.n	8002744 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	f000 bd5a 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002756:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d104      	bne.n	8002778 <HAL_RCC_OscConfig+0x5ec>
 800276e:	4b01      	ldr	r3, [pc, #4]	@ (8002774 <HAL_RCC_OscConfig+0x5e8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e015      	b.n	80027a0 <HAL_RCC_OscConfig+0x614>
 8002774:	40021000 	.word	0x40021000
 8002778:	2302      	movs	r3, #2
 800277a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002790:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800279c:	4bc8      	ldr	r3, [pc, #800]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	2202      	movs	r2, #2
 80027a2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80027a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80027aa:	fa92 f2a2 	rbit	r2, r2
 80027ae:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80027b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80027b6:	fab2 f282 	clz	r2, r2
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f042 0220 	orr.w	r2, r2, #32
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f002 021f 	and.w	r2, r2, #31
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ad      	bne.n	800272e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8110 	beq.w	8002a08 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d079      	beq.n	80028ec <HAL_RCC_OscConfig+0x760>
 80027f8:	2301      	movs	r3, #1
 80027fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800280a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4bab      	ldr	r3, [pc, #684]	@ (8002ac4 <HAL_RCC_OscConfig+0x938>)
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	461a      	mov	r2, r3
 800281e:	2301      	movs	r3, #1
 8002820:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7ff f99d 	bl	8001b60 <HAL_GetTick>
 8002826:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7ff f998 	bl	8001b60 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d902      	bls.n	8002842 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	f000 bcdb 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002842:	2302      	movs	r3, #2
 8002844:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800285c:	2202      	movs	r2, #2
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002880:	2202      	movs	r2, #2
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f2a3 	rbit	r2, r3
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800289a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289c:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 800289e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028a8:	2102      	movs	r1, #2
 80028aa:	6019      	str	r1, [r3, #0]
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f1a3 	rbit	r1, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028c2:	6019      	str	r1, [r3, #0]
  return result;
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	2101      	movs	r1, #1
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0a0      	beq.n	800282c <HAL_RCC_OscConfig+0x6a0>
 80028ea:	e08d      	b.n	8002a08 <HAL_RCC_OscConfig+0x87c>
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800290e:	601a      	str	r2, [r3, #0]
  return result;
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002918:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4b68      	ldr	r3, [pc, #416]	@ (8002ac4 <HAL_RCC_OscConfig+0x938>)
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	461a      	mov	r2, r3
 800292a:	2300      	movs	r3, #0
 800292c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7ff f917 	bl	8001b60 <HAL_GetTick>
 8002932:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002938:	f7ff f912 	bl	8001b60 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d902      	bls.n	800294e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	f000 bc55 	b.w	80031f8 <HAL_RCC_OscConfig+0x106c>
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002956:	2202      	movs	r2, #2
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002976:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800297a:	2202      	movs	r2, #2
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fa93 f2a3 	rbit	r2, r3
 800298c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002990:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800299e:	2202      	movs	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 80029bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029c6:	2102      	movs	r1, #2
 80029c8:	6019      	str	r1, [r3, #0]
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f1a3 	rbit	r1, r3
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029e0:	6019      	str	r1, [r3, #0]
  return result;
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d197      	bne.n	8002938 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 81a1 	beq.w	8002d60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d116      	bne.n	8002a5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b23      	ldr	r3, [pc, #140]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4a22      	ldr	r2, [pc, #136]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	61d3      	str	r3, [r2, #28]
 8002a3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <HAL_RCC_OscConfig+0x93c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11a      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <HAL_RCC_OscConfig+0x93c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <HAL_RCC_OscConfig+0x93c>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7ff f873 	bl	8001b60 <HAL_GetTick>
 8002a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	e009      	b.n	8002a94 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a80:	f7ff f86e 	bl	8001b60 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b64      	cmp	r3, #100	@ 0x64
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e3b1      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_RCC_OscConfig+0x93c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10d      	bne.n	8002acc <HAL_RCC_OscConfig+0x940>
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a02      	ldr	r2, [pc, #8]	@ (8002ac0 <HAL_RCC_OscConfig+0x934>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e03c      	b.n	8002b38 <HAL_RCC_OscConfig+0x9ac>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	10908120 	.word	0x10908120
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x96a>
 8002adc:	4bc1      	ldr	r3, [pc, #772]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4ac0      	ldr	r2, [pc, #768]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	4bbe      	ldr	r3, [pc, #760]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4abd      	ldr	r2, [pc, #756]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	e020      	b.n	8002b38 <HAL_RCC_OscConfig+0x9ac>
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x994>
 8002b06:	4bb7      	ldr	r3, [pc, #732]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4ab6      	ldr	r2, [pc, #728]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4bb4      	ldr	r3, [pc, #720]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4ab3      	ldr	r2, [pc, #716]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x9ac>
 8002b20:	4bb0      	ldr	r3, [pc, #704]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4aaf      	ldr	r2, [pc, #700]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	4bad      	ldr	r3, [pc, #692]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4aac      	ldr	r2, [pc, #688]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8081 	beq.w	8002c4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7ff f809 	bl	8001b60 <HAL_GetTick>
 8002b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7ff f804 	bl	8001b60 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e345      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b74:	2202      	movs	r2, #2
 8002b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fa93 f2a3 	rbit	r2, r3
 8002b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bb2:	601a      	str	r2, [r3, #0]
  return result;
 8002bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xa4c>
 8002bd2:	4b84      	ldr	r3, [pc, #528]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	e013      	b.n	8002c00 <HAL_RCC_OscConfig+0xa74>
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	4b79      	ldr	r3, [pc, #484]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c04:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c08:	2102      	movs	r1, #2
 8002c0a:	6011      	str	r1, [r2, #0]
 8002c0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c10:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	fa92 f1a2 	rbit	r1, r2
 8002c1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c1e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c22:	6011      	str	r1, [r2, #0]
  return result;
 8002c24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c28:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	fab2 f282 	clz	r2, r2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f002 021f 	and.w	r2, r2, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d084      	beq.n	8002b54 <HAL_RCC_OscConfig+0x9c8>
 8002c4a:	e07f      	b.n	8002d4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7fe ff88 	bl	8001b60 <HAL_GetTick>
 8002c50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe ff83 	bl	8001b60 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e2c4      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c72:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c76:	2202      	movs	r2, #2
 8002c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cb4:	601a      	str	r2, [r3, #0]
  return result;
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f043 0302 	orr.w	r3, r3, #2
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_OscConfig+0xb4e>
 8002cd4:	4b43      	ldr	r3, [pc, #268]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	e013      	b.n	8002d02 <HAL_RCC_OscConfig+0xb76>
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	4b39      	ldr	r3, [pc, #228]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d06:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	6011      	str	r1, [r2, #0]
 8002d0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d12:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	fa92 f1a2 	rbit	r1, r2
 8002d1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d20:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d24:	6011      	str	r1, [r2, #0]
  return result;
 8002d26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d2a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	fab2 f282 	clz	r2, r2
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f002 021f 	and.w	r2, r2, #31
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d184      	bne.n	8002c56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b23      	ldr	r3, [pc, #140]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	4a22      	ldr	r2, [pc, #136]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8242 	beq.w	80031f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d72:	4b1c      	ldr	r3, [pc, #112]	@ (8002de4 <HAL_RCC_OscConfig+0xc58>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	f000 8213 	beq.w	80031a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	f040 8162 	bne.w	8003056 <HAL_RCC_OscConfig+0xeca>
 8002d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d96:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002db6:	601a      	str	r2, [r3, #0]
  return result;
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002dc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002dcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fec2 	bl	8001b60 <HAL_GetTick>
 8002ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	e00c      	b.n	8002dfc <HAL_RCC_OscConfig+0xc70>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe feba 	bl	8001b60 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1fd      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e00:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fa93 f2a3 	rbit	r2, r3
 8002e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e20:	601a      	str	r2, [r3, #0]
  return result;
 8002e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e26:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_OscConfig+0xcba>
 8002e40:	4bb0      	ldr	r3, [pc, #704]	@ (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	e027      	b.n	8002e96 <HAL_RCC_OscConfig+0xd0a>
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fa93 f2a3 	rbit	r2, r3
 8002e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e66:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	4b9c      	ldr	r3, [pc, #624]	@ (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e9a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e9e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ea2:	6011      	str	r1, [r2, #0]
 8002ea4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ea8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	fa92 f1a2 	rbit	r1, r2
 8002eb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eb6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002eba:	6011      	str	r1, [r2, #0]
  return result;
 8002ebc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ec0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	fab2 f282 	clz	r2, r2
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	f042 0220 	orr.w	r2, r2, #32
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f002 021f 	and.w	r2, r2, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d182      	bne.n	8002de8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee2:	4b88      	ldr	r3, [pc, #544]	@ (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	430b      	orrs	r3, r1
 8002f04:	497f      	ldr	r1, [pc, #508]	@ (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f2e:	601a      	str	r2, [r3, #0]
  return result;
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fe06 	bl	8001b60 <HAL_GetTick>
 8002f54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fe fe01 	bl	8001b60 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e144      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 8002f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f72:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	fa93 f2a3 	rbit	r2, r3
 8002f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f92:	601a      	str	r2, [r3, #0]
  return result;
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xe2c>
 8002fb2:	4b54      	ldr	r3, [pc, #336]	@ (8003104 <HAL_RCC_OscConfig+0xf78>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	e027      	b.n	8003008 <HAL_RCC_OscConfig+0xe7c>
 8002fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002fe6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	4b3f      	ldr	r3, [pc, #252]	@ (8003104 <HAL_RCC_OscConfig+0xf78>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800300c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003010:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	fa92 f1a2 	rbit	r1, r2
 8003024:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003028:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800302c:	6011      	str	r1, [r2, #0]
  return result;
 800302e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003032:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	fab2 f282 	clz	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f042 0220 	orr.w	r2, r2, #32
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f002 021f 	and.w	r2, r2, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f202 	lsl.w	r2, r1, r2
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d082      	beq.n	8002f5a <HAL_RCC_OscConfig+0xdce>
 8003054:	e0cf      	b.n	80031f6 <HAL_RCC_OscConfig+0x106a>
 8003056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800305e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003068:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f2a3 	rbit	r2, r3
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800307a:	601a      	str	r2, [r3, #0]
  return result;
 800307c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003080:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003084:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003090:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fd60 	bl	8001b60 <HAL_GetTick>
 80030a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a4:	e009      	b.n	80030ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a6:	f7fe fd5b 	bl	8001b60 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e09e      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
 80030ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030be:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030cc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030de:	601a      	str	r2, [r3, #0]
  return result;
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d104      	bne.n	8003108 <HAL_RCC_OscConfig+0xf7c>
 80030fe:	4b01      	ldr	r3, [pc, #4]	@ (8003104 <HAL_RCC_OscConfig+0xf78>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	e029      	b.n	8003158 <HAL_RCC_OscConfig+0xfcc>
 8003104:	40021000 	.word	0x40021000
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003110:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003128:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003132:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003136:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003140:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	4b2b      	ldr	r3, [pc, #172]	@ (8003204 <HAL_RCC_OscConfig+0x1078>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800315c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003160:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800316a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	fa92 f1a2 	rbit	r1, r2
 8003174:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003178:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800317c:	6011      	str	r1, [r2, #0]
  return result;
 800317e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003182:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d180      	bne.n	80030a6 <HAL_RCC_OscConfig+0xf1a>
 80031a4:	e027      	b.n	80031f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e01e      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ba:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <HAL_RCC_OscConfig+0x1078>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031c6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d10b      	bne.n	80031f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000

08003208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b09e      	sub	sp, #120	@ 0x78
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e162      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b90      	ldr	r3, [pc, #576]	@ (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d910      	bls.n	8003250 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b8d      	ldr	r3, [pc, #564]	@ (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 0207 	bic.w	r2, r3, #7
 8003236:	498b      	ldr	r1, [pc, #556]	@ (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b89      	ldr	r3, [pc, #548]	@ (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e14a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325c:	4b82      	ldr	r3, [pc, #520]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	497f      	ldr	r1, [pc, #508]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80dc 	beq.w	8003434 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d13c      	bne.n	80032fe <HAL_RCC_ClockConfig+0xf6>
 8003284:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003288:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_ClockConfig+0xa6>
 80032a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	e00f      	b.n	80032ce <HAL_RCC_ClockConfig+0xc6>
 80032ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80032bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80032c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ca:	4b67      	ldr	r3, [pc, #412]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032d6:	fa92 f2a2 	rbit	r2, r2
 80032da:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80032dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032de:	fab2 f282 	clz	r2, r2
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f042 0220 	orr.w	r2, r2, #32
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f002 021f 	and.w	r2, r2, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d17b      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0f3      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d13c      	bne.n	8003380 <HAL_RCC_ClockConfig+0x178>
 8003306:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800330a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_RCC_ClockConfig+0x128>
 800332a:	4b4f      	ldr	r3, [pc, #316]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	e00f      	b.n	8003350 <HAL_RCC_ClockConfig+0x148>
 8003330:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003334:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	647b      	str	r3, [r7, #68]	@ 0x44
 800333e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003342:	643b      	str	r3, [r7, #64]	@ 0x40
 8003344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800334c:	4b46      	ldr	r3, [pc, #280]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003354:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003358:	fa92 f2a2 	rbit	r2, r2
 800335c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800335e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f002 021f 	and.w	r2, r2, #31
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f202 	lsl.w	r2, r1, r2
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d13a      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b2      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
 8003380:	2302      	movs	r3, #2
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800338c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a0>
 80033a2:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	e00d      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1bc>
 80033a8:	2302      	movs	r3, #2
 80033aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	4b29      	ldr	r3, [pc, #164]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	2202      	movs	r2, #2
 80033c6:	61ba      	str	r2, [r7, #24]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	fa92 f2a2 	rbit	r2, r2
 80033ce:	617a      	str	r2, [r7, #20]
  return result;
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	fab2 f282 	clz	r2, r2
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f042 0220 	orr.w	r2, r2, #32
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	f002 021f 	and.w	r2, r2, #31
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f202 	lsl.w	r2, r1, r2
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e079      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	491a      	ldr	r1, [pc, #104]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fbac 	bl	8001b60 <HAL_GetTick>
 8003408:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fba8 	bl	8001b60 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e061      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d214      	bcs.n	800346c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	4906      	ldr	r1, [pc, #24]	@ (8003464 <HAL_RCC_ClockConfig+0x25c>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e040      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2de>
 8003464:	40022000 	.word	0x40022000
 8003468:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	491a      	ldr	r1, [pc, #104]	@ (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b16      	ldr	r3, [pc, #88]	@ (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4912      	ldr	r1, [pc, #72]	@ (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034aa:	f000 f829 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80034ae:	4601      	mov	r1, r0
 80034b0:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <HAL_RCC_ClockConfig+0x2e8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034b8:	22f0      	movs	r2, #240	@ 0xf0
 80034ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	fa92 f2a2 	rbit	r2, r2
 80034c2:	60fa      	str	r2, [r7, #12]
  return result;
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	fab2 f282 	clz	r2, r2
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	40d3      	lsrs	r3, r2
 80034ce:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <HAL_RCC_ClockConfig+0x2ec>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
 80034d2:	fa21 f303 	lsr.w	r3, r1, r3
 80034d6:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <HAL_RCC_ClockConfig+0x2f0>)
 80034d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034da:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <HAL_RCC_ClockConfig+0x2f4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fafa 	bl	8001ad8 <HAL_InitTick>
  
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3778      	adds	r7, #120	@ 0x78
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08005490 	.word	0x08005490
 80034f8:	20000000 	.word	0x20000000
 80034fc:	20000004 	.word	0x20000004

08003500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x94>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b04      	cmp	r3, #4
 8003528:	d002      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x30>
 800352a:	2b08      	cmp	r3, #8
 800352c:	d003      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x36>
 800352e:	e026      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003530:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 8003532:	613b      	str	r3, [r7, #16]
      break;
 8003534:	e026      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0c9b      	lsrs	r3, r3, #18
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	4a17      	ldr	r2, [pc, #92]	@ (800359c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
 8003542:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x94>)
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800355c:	4a0e      	ldr	r2, [pc, #56]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	fbb2 f2f3 	udiv	r2, r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e004      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a0c      	ldr	r2, [pc, #48]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	613b      	str	r3, [r7, #16]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 8003580:	613b      	str	r3, [r7, #16]
      break;
 8003582:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003584:	693b      	ldr	r3, [r7, #16]
}
 8003586:	4618      	mov	r0, r3
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	007a1200 	.word	0x007a1200
 800359c:	080054a8 	.word	0x080054a8
 80035a0:	080054b8 	.word	0x080054b8
 80035a4:	003d0900 	.word	0x003d0900

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000000 	.word	0x20000000

080035c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035c6:	f7ff ffef 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035ca:	4601      	mov	r1, r0
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80035d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	fa92 f2a2 	rbit	r2, r2
 80035e0:	603a      	str	r2, [r7, #0]
  return result;
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	fab2 f282 	clz	r2, r2
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	40d3      	lsrs	r3, r2
 80035ec:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	080054a0 	.word	0x080054a0

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800360a:	f7ff ffcd 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 800360e:	4601      	mov	r1, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003618:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800361c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	fa92 f2a2 	rbit	r2, r2
 8003624:	603a      	str	r2, [r7, #0]
  return result;
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	fab2 f282 	clz	r2, r2
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	40d3      	lsrs	r3, r2
 8003630:	4a04      	ldr	r2, [pc, #16]	@ (8003644 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003632:	5cd3      	ldrb	r3, [r2, r3]
 8003634:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	080054a0 	.word	0x080054a0

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b092      	sub	sp, #72	@ 0x48
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003658:	2300      	movs	r3, #0
 800365a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80d4 	beq.w	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366c:	4b4e      	ldr	r3, [pc, #312]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10e      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003678:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003682:	61d3      	str	r3, [r2, #28]
 8003684:	4b48      	ldr	r3, [pc, #288]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b45      	ldr	r3, [pc, #276]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a2:	4b42      	ldr	r3, [pc, #264]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a41      	ldr	r2, [pc, #260]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fa57 	bl	8001b60 <HAL_GetTick>
 80036b2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	e008      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7fe fa53 	bl	8001b60 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	@ 0x64
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e14b      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	4b38      	ldr	r3, [pc, #224]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036d4:	4b34      	ldr	r3, [pc, #208]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8084 	beq.w	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d07c      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f4:	4b2c      	ldr	r3, [pc, #176]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003702:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800370c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	4b26      	ldr	r3, [pc, #152]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	461a      	mov	r2, r3
 800371e:	2301      	movs	r3, #1
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003726:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	4b1d      	ldr	r3, [pc, #116]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	461a      	mov	r2, r3
 8003742:	2300      	movs	r3, #0
 8003744:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003746:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800374c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d04b      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe fa03 	bl	8001b60 <HAL_GetTick>
 800375a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe f9ff 	bl	8001b60 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0f5      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003774:	2302      	movs	r3, #2
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003780:	2302      	movs	r3, #2
 8003782:	623b      	str	r3, [r7, #32]
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	61fb      	str	r3, [r7, #28]
  return result;
 800378c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d108      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037a2:	4b01      	ldr	r3, [pc, #4]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	e00d      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	10908100 	.word	0x10908100
 80037b4:	2302      	movs	r3, #2
 80037b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	4b69      	ldr	r3, [pc, #420]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	2202      	movs	r2, #2
 80037c6:	613a      	str	r2, [r7, #16]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	fa92 f2a2 	rbit	r2, r2
 80037ce:	60fa      	str	r2, [r7, #12]
  return result;
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	fab2 f282 	clz	r2, r2
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	f002 021f 	and.w	r2, r2, #31
 80037e2:	2101      	movs	r1, #1
 80037e4:	fa01 f202 	lsl.w	r2, r1, r2
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0b7      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	495b      	ldr	r1, [pc, #364]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003800:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b57      	ldr	r3, [pc, #348]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	4a56      	ldr	r2, [pc, #344]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003820:	4b51      	ldr	r3, [pc, #324]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f023 0203 	bic.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494e      	ldr	r1, [pc, #312]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800382e:	4313      	orrs	r3, r2
 8003830:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800383e:	4b4a      	ldr	r3, [pc, #296]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f023 0210 	bic.w	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4947      	ldr	r1, [pc, #284]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800384c:	4313      	orrs	r3, r2
 800384e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800385c:	4b42      	ldr	r3, [pc, #264]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	493f      	ldr	r1, [pc, #252]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800387a:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f023 0220 	bic.w	r2, r3, #32
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	4938      	ldr	r1, [pc, #224]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003888:	4313      	orrs	r3, r2
 800388a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003898:	4b33      	ldr	r3, [pc, #204]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	4930      	ldr	r1, [pc, #192]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	4929      	ldr	r1, [pc, #164]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80038d4:	4b24      	ldr	r3, [pc, #144]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	4921      	ldr	r1, [pc, #132]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	491a      	ldr	r1, [pc, #104]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003900:	4313      	orrs	r3, r2
 8003902:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003910:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	4912      	ldr	r1, [pc, #72]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800391e:	4313      	orrs	r3, r2
 8003920:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800392e:	4b0e      	ldr	r3, [pc, #56]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	490b      	ldr	r1, [pc, #44]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800393c:	4313      	orrs	r3, r2
 800393e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	4903      	ldr	r1, [pc, #12]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800395a:	4313      	orrs	r3, r2
 800395c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3748      	adds	r7, #72	@ 0x48
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000

0800396c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e049      	b.n	8003a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd f8a8 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 faac 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e03b      	b.n	8003aac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a19      	ldr	r2, [pc, #100]	@ (8003ab8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_TIM_Base_Start_IT+0x4e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5e:	d004      	beq.n	8003a6a <HAL_TIM_Base_Start_IT+0x4e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a15      	ldr	r2, [pc, #84]	@ (8003abc <HAL_TIM_Base_Start_IT+0xa0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d115      	bne.n	8003a96 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d015      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x8c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a82:	d011      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	e008      	b.n	8003aa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e000      	b.n	8003aaa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	00010007 	.word	0x00010007

08003ac4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a1a      	ldr	r2, [r3, #32]
 8003ae2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <HAL_TIM_Base_Stop_IT+0x48>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	f240 4344 	movw	r3, #1092	@ 0x444
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_Base_Stop_IT+0x48>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01b      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f06f 0202 	mvn.w	r2, #2
 8003b56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f9ad 	bl	8003ecc <HAL_TIM_IC_CaptureCallback>
 8003b72:	e005      	b.n	8003b80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f99f 	bl	8003eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f9b0 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01b      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f06f 0204 	mvn.w	r2, #4
 8003ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f987 	bl	8003ecc <HAL_TIM_IC_CaptureCallback>
 8003bbe:	e005      	b.n	8003bcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f979 	bl	8003eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f98a 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01b      	beq.n	8003c1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f06f 0208 	mvn.w	r2, #8
 8003bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f961 	bl	8003ecc <HAL_TIM_IC_CaptureCallback>
 8003c0a:	e005      	b.n	8003c18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f953 	bl	8003eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f964 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01b      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0210 	mvn.w	r2, #16
 8003c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2208      	movs	r2, #8
 8003c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f93b 	bl	8003ecc <HAL_TIM_IC_CaptureCallback>
 8003c56:	e005      	b.n	8003c64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f92d 	bl	8003eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f93e 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00c      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f06f 0201 	mvn.w	r2, #1
 8003c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fc fe45 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00c      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 faaf 	bl	8004210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 faa7 	bl	8004224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8fd 	bl	8003ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f06f 0220 	mvn.w	r2, #32
 8003d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fa6f 	bl	80041fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_ConfigClockSource+0x1c>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e0b6      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x18a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d60:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d7e:	d03e      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xd8>
 8003d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d84:	f200 8087 	bhi.w	8003e96 <HAL_TIM_ConfigClockSource+0x170>
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8c:	f000 8086 	beq.w	8003e9c <HAL_TIM_ConfigClockSource+0x176>
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d94:	d87f      	bhi.n	8003e96 <HAL_TIM_ConfigClockSource+0x170>
 8003d96:	2b70      	cmp	r3, #112	@ 0x70
 8003d98:	d01a      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0xaa>
 8003d9a:	2b70      	cmp	r3, #112	@ 0x70
 8003d9c:	d87b      	bhi.n	8003e96 <HAL_TIM_ConfigClockSource+0x170>
 8003d9e:	2b60      	cmp	r3, #96	@ 0x60
 8003da0:	d050      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x11e>
 8003da2:	2b60      	cmp	r3, #96	@ 0x60
 8003da4:	d877      	bhi.n	8003e96 <HAL_TIM_ConfigClockSource+0x170>
 8003da6:	2b50      	cmp	r3, #80	@ 0x50
 8003da8:	d03c      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0xfe>
 8003daa:	2b50      	cmp	r3, #80	@ 0x50
 8003dac:	d873      	bhi.n	8003e96 <HAL_TIM_ConfigClockSource+0x170>
 8003dae:	2b40      	cmp	r3, #64	@ 0x40
 8003db0:	d058      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x13e>
 8003db2:	2b40      	cmp	r3, #64	@ 0x40
 8003db4:	d86f      	bhi.n	8003e96 <HAL_TIM_ConfigClockSource+0x170>
 8003db6:	2b30      	cmp	r3, #48	@ 0x30
 8003db8:	d064      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x15e>
 8003dba:	2b30      	cmp	r3, #48	@ 0x30
 8003dbc:	d86b      	bhi.n	8003e96 <HAL_TIM_ConfigClockSource+0x170>
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d060      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x15e>
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d867      	bhi.n	8003e96 <HAL_TIM_ConfigClockSource+0x170>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d05c      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x15e>
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d05a      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x15e>
 8003dce:	e062      	b.n	8003e96 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	f000 f986 	bl	80040f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003df2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]
      break;
 8003dfc:	e04f      	b.n	8003e9e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e0e:	f000 f96f 	bl	80040f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e20:	609a      	str	r2, [r3, #8]
      break;
 8003e22:	e03c      	b.n	8003e9e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e30:	461a      	mov	r2, r3
 8003e32:	f000 f8e3 	bl	8003ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2150      	movs	r1, #80	@ 0x50
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f93c 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003e42:	e02c      	b.n	8003e9e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 f902 	bl	800405a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2160      	movs	r1, #96	@ 0x60
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f92c 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003e62:	e01c      	b.n	8003e9e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e70:	461a      	mov	r2, r3
 8003e72:	f000 f8c3 	bl	8003ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2140      	movs	r1, #64	@ 0x40
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 f91c 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003e82:	e00c      	b.n	8003e9e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 f913 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003e94:	e003      	b.n	8003e9e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9a:	e000      	b.n	8003e9e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a34      	ldr	r2, [pc, #208]	@ (8003fec <TIM_Base_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_Base_SetConfig+0x20>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f26:	d108      	bne.n	8003f3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <TIM_Base_SetConfig+0xe4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <TIM_Base_SetConfig+0x5a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f48:	d00b      	beq.n	8003f62 <TIM_Base_SetConfig+0x5a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a28      	ldr	r2, [pc, #160]	@ (8003ff0 <TIM_Base_SetConfig+0xe8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_Base_SetConfig+0x5a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a27      	ldr	r2, [pc, #156]	@ (8003ff4 <TIM_Base_SetConfig+0xec>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_Base_SetConfig+0x5a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ff8 <TIM_Base_SetConfig+0xf0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d108      	bne.n	8003f74 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a14      	ldr	r2, [pc, #80]	@ (8003fec <TIM_Base_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00b      	beq.n	8003fb8 <TIM_Base_SetConfig+0xb0>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a13      	ldr	r2, [pc, #76]	@ (8003ff0 <TIM_Base_SetConfig+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d007      	beq.n	8003fb8 <TIM_Base_SetConfig+0xb0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a12      	ldr	r2, [pc, #72]	@ (8003ff4 <TIM_Base_SetConfig+0xec>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_Base_SetConfig+0xb0>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a11      	ldr	r2, [pc, #68]	@ (8003ff8 <TIM_Base_SetConfig+0xf0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d103      	bne.n	8003fc0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800

08003ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f023 0201 	bic.w	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f023 030a 	bic.w	r3, r3, #10
 8004038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800405a:	b480      	push	{r7}
 800405c:	b087      	sub	sp, #28
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f023 0210 	bic.w	r2, r3, #16
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	031b      	lsls	r3, r3, #12
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004096:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f043 0307 	orr.w	r3, r3, #7
 80040dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800410a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	021a      	lsls	r2, r3, #8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	431a      	orrs	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4313      	orrs	r3, r2
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e04f      	b.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a21      	ldr	r2, [pc, #132]	@ (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d108      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004178:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a14      	ldr	r2, [pc, #80]	@ (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b0:	d004      	beq.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a10      	ldr	r2, [pc, #64]	@ (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10c      	bne.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014000 	.word	0x40014000

080041fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e040      	b.n	80042cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc fca0 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	@ 0x24
 8004264:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9e8 	bl	8004654 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f8af 	bl	80043e8 <UART_SetConfig>
 800428a:	4603      	mov	r3, r0
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e01b      	b.n	80042cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fa67 	bl	8004798 <UART_CheckIdleState>
 80042ca:	4603      	mov	r3, r0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d177      	bne.n	80043dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_UART_Transmit+0x24>
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e070      	b.n	80043de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2221      	movs	r2, #33	@ 0x21
 8004308:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800430a:	f7fd fc29 	bl	8001b60 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004328:	d108      	bne.n	800433c <HAL_UART_Transmit+0x68>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e003      	b.n	8004344 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004344:	e02f      	b.n	80043a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	@ 0x80
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fac9 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e03b      	b.n	80043de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	881a      	ldrh	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004378:	b292      	uxth	r2, r2
 800437a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	3302      	adds	r3, #2
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e007      	b.n	8004394 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3301      	adds	r3, #1
 8004392:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1c9      	bne.n	8004346 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2140      	movs	r1, #64	@ 0x40
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fa93 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e005      	b.n	80043de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b8a      	ldr	r3, [pc, #552]	@ (800463c <UART_SetConfig+0x254>)
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	430b      	orrs	r3, r1
 800441e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	430a      	orrs	r2, r1
 8004458:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a78      	ldr	r2, [pc, #480]	@ (8004640 <UART_SetConfig+0x258>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d120      	bne.n	80044a6 <UART_SetConfig+0xbe>
 8004464:	4b77      	ldr	r3, [pc, #476]	@ (8004644 <UART_SetConfig+0x25c>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b03      	cmp	r3, #3
 800446e:	d817      	bhi.n	80044a0 <UART_SetConfig+0xb8>
 8004470:	a201      	add	r2, pc, #4	@ (adr r2, 8004478 <UART_SetConfig+0x90>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	08004489 	.word	0x08004489
 800447c:	08004495 	.word	0x08004495
 8004480:	0800449b 	.word	0x0800449b
 8004484:	0800448f 	.word	0x0800448f
 8004488:	2300      	movs	r3, #0
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e01d      	b.n	80044ca <UART_SetConfig+0xe2>
 800448e:	2302      	movs	r3, #2
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e01a      	b.n	80044ca <UART_SetConfig+0xe2>
 8004494:	2304      	movs	r3, #4
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e017      	b.n	80044ca <UART_SetConfig+0xe2>
 800449a:	2308      	movs	r3, #8
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e014      	b.n	80044ca <UART_SetConfig+0xe2>
 80044a0:	2310      	movs	r3, #16
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e011      	b.n	80044ca <UART_SetConfig+0xe2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a67      	ldr	r2, [pc, #412]	@ (8004648 <UART_SetConfig+0x260>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d102      	bne.n	80044b6 <UART_SetConfig+0xce>
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e009      	b.n	80044ca <UART_SetConfig+0xe2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a64      	ldr	r2, [pc, #400]	@ (800464c <UART_SetConfig+0x264>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d102      	bne.n	80044c6 <UART_SetConfig+0xde>
 80044c0:	2300      	movs	r3, #0
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e001      	b.n	80044ca <UART_SetConfig+0xe2>
 80044c6:	2310      	movs	r3, #16
 80044c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044d2:	d15a      	bne.n	800458a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80044d4:	7ffb      	ldrb	r3, [r7, #31]
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d827      	bhi.n	800452a <UART_SetConfig+0x142>
 80044da:	a201      	add	r2, pc, #4	@ (adr r2, 80044e0 <UART_SetConfig+0xf8>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7ff f85c 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8004508:	61b8      	str	r0, [r7, #24]
        break;
 800450a:	e013      	b.n	8004534 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7ff f87a 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8004510:	61b8      	str	r0, [r7, #24]
        break;
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b4e      	ldr	r3, [pc, #312]	@ (8004650 <UART_SetConfig+0x268>)
 8004516:	61bb      	str	r3, [r7, #24]
        break;
 8004518:	e00c      	b.n	8004534 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe fff1 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 800451e:	61b8      	str	r0, [r7, #24]
        break;
 8004520:	e008      	b.n	8004534 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004526:	61bb      	str	r3, [r7, #24]
        break;
 8004528:	e004      	b.n	8004534 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	77bb      	strb	r3, [r7, #30]
        break;
 8004532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d074      	beq.n	8004624 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	005a      	lsls	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d916      	bls.n	8004584 <UART_SetConfig+0x19c>
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455c:	d212      	bcs.n	8004584 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f023 030f 	bic.w	r3, r3, #15
 8004566:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	b29b      	uxth	r3, r3
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	b29a      	uxth	r2, r3
 8004574:	89fb      	ldrh	r3, [r7, #14]
 8004576:	4313      	orrs	r3, r2
 8004578:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	89fa      	ldrh	r2, [r7, #14]
 8004580:	60da      	str	r2, [r3, #12]
 8004582:	e04f      	b.n	8004624 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77bb      	strb	r3, [r7, #30]
 8004588:	e04c      	b.n	8004624 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458a:	7ffb      	ldrb	r3, [r7, #31]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d828      	bhi.n	80045e2 <UART_SetConfig+0x1fa>
 8004590:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <UART_SetConfig+0x1b0>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045e3 	.word	0x080045e3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	080045e3 	.word	0x080045e3
 80045b8:	080045db 	.word	0x080045db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7ff f800 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 80045c0:	61b8      	str	r0, [r7, #24]
        break;
 80045c2:	e013      	b.n	80045ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7ff f81e 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 80045c8:	61b8      	str	r0, [r7, #24]
        break;
 80045ca:	e00f      	b.n	80045ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <UART_SetConfig+0x268>)
 80045ce:	61bb      	str	r3, [r7, #24]
        break;
 80045d0:	e00c      	b.n	80045ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe ff95 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80045d6:	61b8      	str	r0, [r7, #24]
        break;
 80045d8:	e008      	b.n	80045ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045de:	61bb      	str	r3, [r7, #24]
        break;
 80045e0:	e004      	b.n	80045ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	77bb      	strb	r3, [r7, #30]
        break;
 80045ea:	bf00      	nop
    }

    if (pclk != 0U)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d018      	beq.n	8004624 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	085a      	lsrs	r2, r3, #1
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	441a      	add	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b0f      	cmp	r3, #15
 800460a:	d909      	bls.n	8004620 <UART_SetConfig+0x238>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004612:	d205      	bcs.n	8004620 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	e001      	b.n	8004624 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004630:	7fbb      	ldrb	r3, [r7, #30]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	efff69f3 	.word	0xefff69f3
 8004640:	40013800 	.word	0x40013800
 8004644:	40021000 	.word	0x40021000
 8004648:	40004400 	.word	0x40004400
 800464c:	40004800 	.word	0x40004800
 8004650:	007a1200 	.word	0x007a1200

08004654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01a      	beq.n	800476a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004752:	d10a      	bne.n	800476a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b098      	sub	sp, #96	@ 0x60
 800479c:	af02      	add	r7, sp, #8
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a8:	f7fd f9da 	bl	8001b60 <HAL_GetTick>
 80047ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d12e      	bne.n	800481a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c4:	2200      	movs	r2, #0
 80047c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f88c 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d021      	beq.n	800481a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e6      	bne.n	80047d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e062      	b.n	80048e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b04      	cmp	r3, #4
 8004826:	d149      	bne.n	80048bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004828:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004830:	2200      	movs	r2, #0
 8004832:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f856 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03c      	beq.n	80048bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	623b      	str	r3, [r7, #32]
   return(result);
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004860:	633b      	str	r3, [r7, #48]	@ 0x30
 8004862:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e6      	bne.n	8004842 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3308      	adds	r3, #8
 800487a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	60fb      	str	r3, [r7, #12]
   return(result);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004894:	61fa      	str	r2, [r7, #28]
 8004896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	69b9      	ldr	r1, [r7, #24]
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	617b      	str	r3, [r7, #20]
   return(result);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e5      	bne.n	8004874 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e011      	b.n	80048e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3758      	adds	r7, #88	@ 0x58
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f8:	e04f      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d04b      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fd f92d 	bl	8001b60 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e04e      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d037      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xb2>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b80      	cmp	r3, #128	@ 0x80
 800492e:	d034      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b40      	cmp	r3, #64	@ 0x40
 8004934:	d031      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d110      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2208      	movs	r2, #8
 800494a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f838 	bl	80049c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2208      	movs	r2, #8
 8004956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e029      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004974:	d111      	bne.n	800499a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800497e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f81e 	bl	80049c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e00f      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d0a0      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b095      	sub	sp, #84	@ 0x54
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e6      	bne.n	80049ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e5      	bne.n	80049fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d118      	bne.n	8004a6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f023 0310 	bic.w	r3, r3, #16
 8004a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6979      	ldr	r1, [r7, #20]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	613b      	str	r3, [r7, #16]
   return(result);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e6      	bne.n	8004a38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a7e:	bf00      	nop
 8004a80:	3754      	adds	r7, #84	@ 0x54
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <siprintf>:
 8004a8c:	b40e      	push	{r1, r2, r3}
 8004a8e:	b500      	push	{lr}
 8004a90:	b09c      	sub	sp, #112	@ 0x70
 8004a92:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a94:	9002      	str	r0, [sp, #8]
 8004a96:	9006      	str	r0, [sp, #24]
 8004a98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a9c:	4809      	ldr	r0, [pc, #36]	@ (8004ac4 <siprintf+0x38>)
 8004a9e:	9107      	str	r1, [sp, #28]
 8004aa0:	9104      	str	r1, [sp, #16]
 8004aa2:	4909      	ldr	r1, [pc, #36]	@ (8004ac8 <siprintf+0x3c>)
 8004aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa8:	9105      	str	r1, [sp, #20]
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	a902      	add	r1, sp, #8
 8004ab0:	f000 f994 	bl	8004ddc <_svfiprintf_r>
 8004ab4:	9b02      	ldr	r3, [sp, #8]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	b01c      	add	sp, #112	@ 0x70
 8004abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ac0:	b003      	add	sp, #12
 8004ac2:	4770      	bx	lr
 8004ac4:	2000000c 	.word	0x2000000c
 8004ac8:	ffff0208 	.word	0xffff0208

08004acc <memset>:
 8004acc:	4402      	add	r2, r0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <memset+0xa>
 8004ad4:	4770      	bx	lr
 8004ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ada:	e7f9      	b.n	8004ad0 <memset+0x4>

08004adc <__errno>:
 8004adc:	4b01      	ldr	r3, [pc, #4]	@ (8004ae4 <__errno+0x8>)
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2000000c 	.word	0x2000000c

08004ae8 <__libc_init_array>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	4d0d      	ldr	r5, [pc, #52]	@ (8004b20 <__libc_init_array+0x38>)
 8004aec:	4c0d      	ldr	r4, [pc, #52]	@ (8004b24 <__libc_init_array+0x3c>)
 8004aee:	1b64      	subs	r4, r4, r5
 8004af0:	10a4      	asrs	r4, r4, #2
 8004af2:	2600      	movs	r6, #0
 8004af4:	42a6      	cmp	r6, r4
 8004af6:	d109      	bne.n	8004b0c <__libc_init_array+0x24>
 8004af8:	4d0b      	ldr	r5, [pc, #44]	@ (8004b28 <__libc_init_array+0x40>)
 8004afa:	4c0c      	ldr	r4, [pc, #48]	@ (8004b2c <__libc_init_array+0x44>)
 8004afc:	f000 fc66 	bl	80053cc <_init>
 8004b00:	1b64      	subs	r4, r4, r5
 8004b02:	10a4      	asrs	r4, r4, #2
 8004b04:	2600      	movs	r6, #0
 8004b06:	42a6      	cmp	r6, r4
 8004b08:	d105      	bne.n	8004b16 <__libc_init_array+0x2e>
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b10:	4798      	blx	r3
 8004b12:	3601      	adds	r6, #1
 8004b14:	e7ee      	b.n	8004af4 <__libc_init_array+0xc>
 8004b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1a:	4798      	blx	r3
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	e7f2      	b.n	8004b06 <__libc_init_array+0x1e>
 8004b20:	08005504 	.word	0x08005504
 8004b24:	08005504 	.word	0x08005504
 8004b28:	08005504 	.word	0x08005504
 8004b2c:	08005508 	.word	0x08005508

08004b30 <__retarget_lock_acquire_recursive>:
 8004b30:	4770      	bx	lr

08004b32 <__retarget_lock_release_recursive>:
 8004b32:	4770      	bx	lr

08004b34 <_free_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4605      	mov	r5, r0
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	d041      	beq.n	8004bc0 <_free_r+0x8c>
 8004b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b40:	1f0c      	subs	r4, r1, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bfb8      	it	lt
 8004b46:	18e4      	addlt	r4, r4, r3
 8004b48:	f000 f8e0 	bl	8004d0c <__malloc_lock>
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc4 <_free_r+0x90>)
 8004b4e:	6813      	ldr	r3, [r2, #0]
 8004b50:	b933      	cbnz	r3, 8004b60 <_free_r+0x2c>
 8004b52:	6063      	str	r3, [r4, #4]
 8004b54:	6014      	str	r4, [r2, #0]
 8004b56:	4628      	mov	r0, r5
 8004b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b5c:	f000 b8dc 	b.w	8004d18 <__malloc_unlock>
 8004b60:	42a3      	cmp	r3, r4
 8004b62:	d908      	bls.n	8004b76 <_free_r+0x42>
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	1821      	adds	r1, r4, r0
 8004b68:	428b      	cmp	r3, r1
 8004b6a:	bf01      	itttt	eq
 8004b6c:	6819      	ldreq	r1, [r3, #0]
 8004b6e:	685b      	ldreq	r3, [r3, #4]
 8004b70:	1809      	addeq	r1, r1, r0
 8004b72:	6021      	streq	r1, [r4, #0]
 8004b74:	e7ed      	b.n	8004b52 <_free_r+0x1e>
 8004b76:	461a      	mov	r2, r3
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	b10b      	cbz	r3, 8004b80 <_free_r+0x4c>
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	d9fa      	bls.n	8004b76 <_free_r+0x42>
 8004b80:	6811      	ldr	r1, [r2, #0]
 8004b82:	1850      	adds	r0, r2, r1
 8004b84:	42a0      	cmp	r0, r4
 8004b86:	d10b      	bne.n	8004ba0 <_free_r+0x6c>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	4401      	add	r1, r0
 8004b8c:	1850      	adds	r0, r2, r1
 8004b8e:	4283      	cmp	r3, r0
 8004b90:	6011      	str	r1, [r2, #0]
 8004b92:	d1e0      	bne.n	8004b56 <_free_r+0x22>
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	6053      	str	r3, [r2, #4]
 8004b9a:	4408      	add	r0, r1
 8004b9c:	6010      	str	r0, [r2, #0]
 8004b9e:	e7da      	b.n	8004b56 <_free_r+0x22>
 8004ba0:	d902      	bls.n	8004ba8 <_free_r+0x74>
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	602b      	str	r3, [r5, #0]
 8004ba6:	e7d6      	b.n	8004b56 <_free_r+0x22>
 8004ba8:	6820      	ldr	r0, [r4, #0]
 8004baa:	1821      	adds	r1, r4, r0
 8004bac:	428b      	cmp	r3, r1
 8004bae:	bf04      	itt	eq
 8004bb0:	6819      	ldreq	r1, [r3, #0]
 8004bb2:	685b      	ldreq	r3, [r3, #4]
 8004bb4:	6063      	str	r3, [r4, #4]
 8004bb6:	bf04      	itt	eq
 8004bb8:	1809      	addeq	r1, r1, r0
 8004bba:	6021      	streq	r1, [r4, #0]
 8004bbc:	6054      	str	r4, [r2, #4]
 8004bbe:	e7ca      	b.n	8004b56 <_free_r+0x22>
 8004bc0:	bd38      	pop	{r3, r4, r5, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200003bc 	.word	0x200003bc

08004bc8 <sbrk_aligned>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	4e0f      	ldr	r6, [pc, #60]	@ (8004c08 <sbrk_aligned+0x40>)
 8004bcc:	460c      	mov	r4, r1
 8004bce:	6831      	ldr	r1, [r6, #0]
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	b911      	cbnz	r1, 8004bda <sbrk_aligned+0x12>
 8004bd4:	f000 fba6 	bl	8005324 <_sbrk_r>
 8004bd8:	6030      	str	r0, [r6, #0]
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 fba1 	bl	8005324 <_sbrk_r>
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	d103      	bne.n	8004bee <sbrk_aligned+0x26>
 8004be6:	f04f 34ff 	mov.w	r4, #4294967295
 8004bea:	4620      	mov	r0, r4
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	1cc4      	adds	r4, r0, #3
 8004bf0:	f024 0403 	bic.w	r4, r4, #3
 8004bf4:	42a0      	cmp	r0, r4
 8004bf6:	d0f8      	beq.n	8004bea <sbrk_aligned+0x22>
 8004bf8:	1a21      	subs	r1, r4, r0
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 fb92 	bl	8005324 <_sbrk_r>
 8004c00:	3001      	adds	r0, #1
 8004c02:	d1f2      	bne.n	8004bea <sbrk_aligned+0x22>
 8004c04:	e7ef      	b.n	8004be6 <sbrk_aligned+0x1e>
 8004c06:	bf00      	nop
 8004c08:	200003b8 	.word	0x200003b8

08004c0c <_malloc_r>:
 8004c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c10:	1ccd      	adds	r5, r1, #3
 8004c12:	f025 0503 	bic.w	r5, r5, #3
 8004c16:	3508      	adds	r5, #8
 8004c18:	2d0c      	cmp	r5, #12
 8004c1a:	bf38      	it	cc
 8004c1c:	250c      	movcc	r5, #12
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	4606      	mov	r6, r0
 8004c22:	db01      	blt.n	8004c28 <_malloc_r+0x1c>
 8004c24:	42a9      	cmp	r1, r5
 8004c26:	d904      	bls.n	8004c32 <_malloc_r+0x26>
 8004c28:	230c      	movs	r3, #12
 8004c2a:	6033      	str	r3, [r6, #0]
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d08 <_malloc_r+0xfc>
 8004c36:	f000 f869 	bl	8004d0c <__malloc_lock>
 8004c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c3e:	461c      	mov	r4, r3
 8004c40:	bb44      	cbnz	r4, 8004c94 <_malloc_r+0x88>
 8004c42:	4629      	mov	r1, r5
 8004c44:	4630      	mov	r0, r6
 8004c46:	f7ff ffbf 	bl	8004bc8 <sbrk_aligned>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	d158      	bne.n	8004d02 <_malloc_r+0xf6>
 8004c50:	f8d8 4000 	ldr.w	r4, [r8]
 8004c54:	4627      	mov	r7, r4
 8004c56:	2f00      	cmp	r7, #0
 8004c58:	d143      	bne.n	8004ce2 <_malloc_r+0xd6>
 8004c5a:	2c00      	cmp	r4, #0
 8004c5c:	d04b      	beq.n	8004cf6 <_malloc_r+0xea>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	4639      	mov	r1, r7
 8004c62:	4630      	mov	r0, r6
 8004c64:	eb04 0903 	add.w	r9, r4, r3
 8004c68:	f000 fb5c 	bl	8005324 <_sbrk_r>
 8004c6c:	4581      	cmp	r9, r0
 8004c6e:	d142      	bne.n	8004cf6 <_malloc_r+0xea>
 8004c70:	6821      	ldr	r1, [r4, #0]
 8004c72:	1a6d      	subs	r5, r5, r1
 8004c74:	4629      	mov	r1, r5
 8004c76:	4630      	mov	r0, r6
 8004c78:	f7ff ffa6 	bl	8004bc8 <sbrk_aligned>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d03a      	beq.n	8004cf6 <_malloc_r+0xea>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	442b      	add	r3, r5
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	f8d8 3000 	ldr.w	r3, [r8]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	bb62      	cbnz	r2, 8004ce8 <_malloc_r+0xdc>
 8004c8e:	f8c8 7000 	str.w	r7, [r8]
 8004c92:	e00f      	b.n	8004cb4 <_malloc_r+0xa8>
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	1b52      	subs	r2, r2, r5
 8004c98:	d420      	bmi.n	8004cdc <_malloc_r+0xd0>
 8004c9a:	2a0b      	cmp	r2, #11
 8004c9c:	d917      	bls.n	8004cce <_malloc_r+0xc2>
 8004c9e:	1961      	adds	r1, r4, r5
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	6025      	str	r5, [r4, #0]
 8004ca4:	bf18      	it	ne
 8004ca6:	6059      	strne	r1, [r3, #4]
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	bf08      	it	eq
 8004cac:	f8c8 1000 	streq.w	r1, [r8]
 8004cb0:	5162      	str	r2, [r4, r5]
 8004cb2:	604b      	str	r3, [r1, #4]
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f000 f82f 	bl	8004d18 <__malloc_unlock>
 8004cba:	f104 000b 	add.w	r0, r4, #11
 8004cbe:	1d23      	adds	r3, r4, #4
 8004cc0:	f020 0007 	bic.w	r0, r0, #7
 8004cc4:	1ac2      	subs	r2, r0, r3
 8004cc6:	bf1c      	itt	ne
 8004cc8:	1a1b      	subne	r3, r3, r0
 8004cca:	50a3      	strne	r3, [r4, r2]
 8004ccc:	e7af      	b.n	8004c2e <_malloc_r+0x22>
 8004cce:	6862      	ldr	r2, [r4, #4]
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	bf0c      	ite	eq
 8004cd4:	f8c8 2000 	streq.w	r2, [r8]
 8004cd8:	605a      	strne	r2, [r3, #4]
 8004cda:	e7eb      	b.n	8004cb4 <_malloc_r+0xa8>
 8004cdc:	4623      	mov	r3, r4
 8004cde:	6864      	ldr	r4, [r4, #4]
 8004ce0:	e7ae      	b.n	8004c40 <_malloc_r+0x34>
 8004ce2:	463c      	mov	r4, r7
 8004ce4:	687f      	ldr	r7, [r7, #4]
 8004ce6:	e7b6      	b.n	8004c56 <_malloc_r+0x4a>
 8004ce8:	461a      	mov	r2, r3
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	d1fb      	bne.n	8004ce8 <_malloc_r+0xdc>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6053      	str	r3, [r2, #4]
 8004cf4:	e7de      	b.n	8004cb4 <_malloc_r+0xa8>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	6033      	str	r3, [r6, #0]
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 f80c 	bl	8004d18 <__malloc_unlock>
 8004d00:	e794      	b.n	8004c2c <_malloc_r+0x20>
 8004d02:	6005      	str	r5, [r0, #0]
 8004d04:	e7d6      	b.n	8004cb4 <_malloc_r+0xa8>
 8004d06:	bf00      	nop
 8004d08:	200003bc 	.word	0x200003bc

08004d0c <__malloc_lock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	@ (8004d14 <__malloc_lock+0x8>)
 8004d0e:	f7ff bf0f 	b.w	8004b30 <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	200003b4 	.word	0x200003b4

08004d18 <__malloc_unlock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	@ (8004d20 <__malloc_unlock+0x8>)
 8004d1a:	f7ff bf0a 	b.w	8004b32 <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	200003b4 	.word	0x200003b4

08004d24 <__ssputs_r>:
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	688e      	ldr	r6, [r1, #8]
 8004d2a:	461f      	mov	r7, r3
 8004d2c:	42be      	cmp	r6, r7
 8004d2e:	680b      	ldr	r3, [r1, #0]
 8004d30:	4682      	mov	sl, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	4690      	mov	r8, r2
 8004d36:	d82d      	bhi.n	8004d94 <__ssputs_r+0x70>
 8004d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d40:	d026      	beq.n	8004d90 <__ssputs_r+0x6c>
 8004d42:	6965      	ldr	r5, [r4, #20]
 8004d44:	6909      	ldr	r1, [r1, #16]
 8004d46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d4a:	eba3 0901 	sub.w	r9, r3, r1
 8004d4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d52:	1c7b      	adds	r3, r7, #1
 8004d54:	444b      	add	r3, r9
 8004d56:	106d      	asrs	r5, r5, #1
 8004d58:	429d      	cmp	r5, r3
 8004d5a:	bf38      	it	cc
 8004d5c:	461d      	movcc	r5, r3
 8004d5e:	0553      	lsls	r3, r2, #21
 8004d60:	d527      	bpl.n	8004db2 <__ssputs_r+0x8e>
 8004d62:	4629      	mov	r1, r5
 8004d64:	f7ff ff52 	bl	8004c0c <_malloc_r>
 8004d68:	4606      	mov	r6, r0
 8004d6a:	b360      	cbz	r0, 8004dc6 <__ssputs_r+0xa2>
 8004d6c:	6921      	ldr	r1, [r4, #16]
 8004d6e:	464a      	mov	r2, r9
 8004d70:	f000 fae8 	bl	8005344 <memcpy>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	6126      	str	r6, [r4, #16]
 8004d82:	6165      	str	r5, [r4, #20]
 8004d84:	444e      	add	r6, r9
 8004d86:	eba5 0509 	sub.w	r5, r5, r9
 8004d8a:	6026      	str	r6, [r4, #0]
 8004d8c:	60a5      	str	r5, [r4, #8]
 8004d8e:	463e      	mov	r6, r7
 8004d90:	42be      	cmp	r6, r7
 8004d92:	d900      	bls.n	8004d96 <__ssputs_r+0x72>
 8004d94:	463e      	mov	r6, r7
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	4632      	mov	r2, r6
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	f000 faa8 	bl	80052f0 <memmove>
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	1b9b      	subs	r3, r3, r6
 8004da4:	60a3      	str	r3, [r4, #8]
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	4433      	add	r3, r6
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	2000      	movs	r0, #0
 8004dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db2:	462a      	mov	r2, r5
 8004db4:	f000 fad4 	bl	8005360 <_realloc_r>
 8004db8:	4606      	mov	r6, r0
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d1e0      	bne.n	8004d80 <__ssputs_r+0x5c>
 8004dbe:	6921      	ldr	r1, [r4, #16]
 8004dc0:	4650      	mov	r0, sl
 8004dc2:	f7ff feb7 	bl	8004b34 <_free_r>
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	f8ca 3000 	str.w	r3, [sl]
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	e7e9      	b.n	8004dae <__ssputs_r+0x8a>
	...

08004ddc <_svfiprintf_r>:
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	4698      	mov	r8, r3
 8004de2:	898b      	ldrh	r3, [r1, #12]
 8004de4:	061b      	lsls	r3, r3, #24
 8004de6:	b09d      	sub	sp, #116	@ 0x74
 8004de8:	4607      	mov	r7, r0
 8004dea:	460d      	mov	r5, r1
 8004dec:	4614      	mov	r4, r2
 8004dee:	d510      	bpl.n	8004e12 <_svfiprintf_r+0x36>
 8004df0:	690b      	ldr	r3, [r1, #16]
 8004df2:	b973      	cbnz	r3, 8004e12 <_svfiprintf_r+0x36>
 8004df4:	2140      	movs	r1, #64	@ 0x40
 8004df6:	f7ff ff09 	bl	8004c0c <_malloc_r>
 8004dfa:	6028      	str	r0, [r5, #0]
 8004dfc:	6128      	str	r0, [r5, #16]
 8004dfe:	b930      	cbnz	r0, 8004e0e <_svfiprintf_r+0x32>
 8004e00:	230c      	movs	r3, #12
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	b01d      	add	sp, #116	@ 0x74
 8004e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e0e:	2340      	movs	r3, #64	@ 0x40
 8004e10:	616b      	str	r3, [r5, #20]
 8004e12:	2300      	movs	r3, #0
 8004e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e16:	2320      	movs	r3, #32
 8004e18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e20:	2330      	movs	r3, #48	@ 0x30
 8004e22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004fc0 <_svfiprintf_r+0x1e4>
 8004e26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e2a:	f04f 0901 	mov.w	r9, #1
 8004e2e:	4623      	mov	r3, r4
 8004e30:	469a      	mov	sl, r3
 8004e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e36:	b10a      	cbz	r2, 8004e3c <_svfiprintf_r+0x60>
 8004e38:	2a25      	cmp	r2, #37	@ 0x25
 8004e3a:	d1f9      	bne.n	8004e30 <_svfiprintf_r+0x54>
 8004e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8004e40:	d00b      	beq.n	8004e5a <_svfiprintf_r+0x7e>
 8004e42:	465b      	mov	r3, fp
 8004e44:	4622      	mov	r2, r4
 8004e46:	4629      	mov	r1, r5
 8004e48:	4638      	mov	r0, r7
 8004e4a:	f7ff ff6b 	bl	8004d24 <__ssputs_r>
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f000 80a7 	beq.w	8004fa2 <_svfiprintf_r+0x1c6>
 8004e54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e56:	445a      	add	r2, fp
 8004e58:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 809f 	beq.w	8004fa2 <_svfiprintf_r+0x1c6>
 8004e64:	2300      	movs	r3, #0
 8004e66:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e6e:	f10a 0a01 	add.w	sl, sl, #1
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	9307      	str	r3, [sp, #28]
 8004e76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e7c:	4654      	mov	r4, sl
 8004e7e:	2205      	movs	r2, #5
 8004e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e84:	484e      	ldr	r0, [pc, #312]	@ (8004fc0 <_svfiprintf_r+0x1e4>)
 8004e86:	f7fb f9a3 	bl	80001d0 <memchr>
 8004e8a:	9a04      	ldr	r2, [sp, #16]
 8004e8c:	b9d8      	cbnz	r0, 8004ec6 <_svfiprintf_r+0xea>
 8004e8e:	06d0      	lsls	r0, r2, #27
 8004e90:	bf44      	itt	mi
 8004e92:	2320      	movmi	r3, #32
 8004e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e98:	0711      	lsls	r1, r2, #28
 8004e9a:	bf44      	itt	mi
 8004e9c:	232b      	movmi	r3, #43	@ 0x2b
 8004e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ea8:	d015      	beq.n	8004ed6 <_svfiprintf_r+0xfa>
 8004eaa:	9a07      	ldr	r2, [sp, #28]
 8004eac:	4654      	mov	r4, sl
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f04f 0c0a 	mov.w	ip, #10
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eba:	3b30      	subs	r3, #48	@ 0x30
 8004ebc:	2b09      	cmp	r3, #9
 8004ebe:	d94b      	bls.n	8004f58 <_svfiprintf_r+0x17c>
 8004ec0:	b1b0      	cbz	r0, 8004ef0 <_svfiprintf_r+0x114>
 8004ec2:	9207      	str	r2, [sp, #28]
 8004ec4:	e014      	b.n	8004ef0 <_svfiprintf_r+0x114>
 8004ec6:	eba0 0308 	sub.w	r3, r0, r8
 8004eca:	fa09 f303 	lsl.w	r3, r9, r3
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	46a2      	mov	sl, r4
 8004ed4:	e7d2      	b.n	8004e7c <_svfiprintf_r+0xa0>
 8004ed6:	9b03      	ldr	r3, [sp, #12]
 8004ed8:	1d19      	adds	r1, r3, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	9103      	str	r1, [sp, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bfbb      	ittet	lt
 8004ee2:	425b      	neglt	r3, r3
 8004ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ee8:	9307      	strge	r3, [sp, #28]
 8004eea:	9307      	strlt	r3, [sp, #28]
 8004eec:	bfb8      	it	lt
 8004eee:	9204      	strlt	r2, [sp, #16]
 8004ef0:	7823      	ldrb	r3, [r4, #0]
 8004ef2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ef4:	d10a      	bne.n	8004f0c <_svfiprintf_r+0x130>
 8004ef6:	7863      	ldrb	r3, [r4, #1]
 8004ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004efa:	d132      	bne.n	8004f62 <_svfiprintf_r+0x186>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	1d1a      	adds	r2, r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	9203      	str	r2, [sp, #12]
 8004f04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f08:	3402      	adds	r4, #2
 8004f0a:	9305      	str	r3, [sp, #20]
 8004f0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004fd0 <_svfiprintf_r+0x1f4>
 8004f10:	7821      	ldrb	r1, [r4, #0]
 8004f12:	2203      	movs	r2, #3
 8004f14:	4650      	mov	r0, sl
 8004f16:	f7fb f95b 	bl	80001d0 <memchr>
 8004f1a:	b138      	cbz	r0, 8004f2c <_svfiprintf_r+0x150>
 8004f1c:	9b04      	ldr	r3, [sp, #16]
 8004f1e:	eba0 000a 	sub.w	r0, r0, sl
 8004f22:	2240      	movs	r2, #64	@ 0x40
 8004f24:	4082      	lsls	r2, r0
 8004f26:	4313      	orrs	r3, r2
 8004f28:	3401      	adds	r4, #1
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f30:	4824      	ldr	r0, [pc, #144]	@ (8004fc4 <_svfiprintf_r+0x1e8>)
 8004f32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f36:	2206      	movs	r2, #6
 8004f38:	f7fb f94a 	bl	80001d0 <memchr>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d036      	beq.n	8004fae <_svfiprintf_r+0x1d2>
 8004f40:	4b21      	ldr	r3, [pc, #132]	@ (8004fc8 <_svfiprintf_r+0x1ec>)
 8004f42:	bb1b      	cbnz	r3, 8004f8c <_svfiprintf_r+0x1b0>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	3307      	adds	r3, #7
 8004f48:	f023 0307 	bic.w	r3, r3, #7
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	9303      	str	r3, [sp, #12]
 8004f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f52:	4433      	add	r3, r6
 8004f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f56:	e76a      	b.n	8004e2e <_svfiprintf_r+0x52>
 8004f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	2001      	movs	r0, #1
 8004f60:	e7a8      	b.n	8004eb4 <_svfiprintf_r+0xd8>
 8004f62:	2300      	movs	r3, #0
 8004f64:	3401      	adds	r4, #1
 8004f66:	9305      	str	r3, [sp, #20]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f04f 0c0a 	mov.w	ip, #10
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f74:	3a30      	subs	r2, #48	@ 0x30
 8004f76:	2a09      	cmp	r2, #9
 8004f78:	d903      	bls.n	8004f82 <_svfiprintf_r+0x1a6>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0c6      	beq.n	8004f0c <_svfiprintf_r+0x130>
 8004f7e:	9105      	str	r1, [sp, #20]
 8004f80:	e7c4      	b.n	8004f0c <_svfiprintf_r+0x130>
 8004f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f86:	4604      	mov	r4, r0
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e7f0      	b.n	8004f6e <_svfiprintf_r+0x192>
 8004f8c:	ab03      	add	r3, sp, #12
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	462a      	mov	r2, r5
 8004f92:	4b0e      	ldr	r3, [pc, #56]	@ (8004fcc <_svfiprintf_r+0x1f0>)
 8004f94:	a904      	add	r1, sp, #16
 8004f96:	4638      	mov	r0, r7
 8004f98:	f3af 8000 	nop.w
 8004f9c:	1c42      	adds	r2, r0, #1
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	d1d6      	bne.n	8004f50 <_svfiprintf_r+0x174>
 8004fa2:	89ab      	ldrh	r3, [r5, #12]
 8004fa4:	065b      	lsls	r3, r3, #25
 8004fa6:	f53f af2d 	bmi.w	8004e04 <_svfiprintf_r+0x28>
 8004faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fac:	e72c      	b.n	8004e08 <_svfiprintf_r+0x2c>
 8004fae:	ab03      	add	r3, sp, #12
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <_svfiprintf_r+0x1f0>)
 8004fb6:	a904      	add	r1, sp, #16
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f000 f879 	bl	80050b0 <_printf_i>
 8004fbe:	e7ed      	b.n	8004f9c <_svfiprintf_r+0x1c0>
 8004fc0:	080054c8 	.word	0x080054c8
 8004fc4:	080054d2 	.word	0x080054d2
 8004fc8:	00000000 	.word	0x00000000
 8004fcc:	08004d25 	.word	0x08004d25
 8004fd0:	080054ce 	.word	0x080054ce

08004fd4 <_printf_common>:
 8004fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd8:	4616      	mov	r6, r2
 8004fda:	4698      	mov	r8, r3
 8004fdc:	688a      	ldr	r2, [r1, #8]
 8004fde:	690b      	ldr	r3, [r1, #16]
 8004fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	bfb8      	it	lt
 8004fe8:	4613      	movlt	r3, r2
 8004fea:	6033      	str	r3, [r6, #0]
 8004fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	b10a      	cbz	r2, 8004ffa <_printf_common+0x26>
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	6033      	str	r3, [r6, #0]
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	0699      	lsls	r1, r3, #26
 8004ffe:	bf42      	ittt	mi
 8005000:	6833      	ldrmi	r3, [r6, #0]
 8005002:	3302      	addmi	r3, #2
 8005004:	6033      	strmi	r3, [r6, #0]
 8005006:	6825      	ldr	r5, [r4, #0]
 8005008:	f015 0506 	ands.w	r5, r5, #6
 800500c:	d106      	bne.n	800501c <_printf_common+0x48>
 800500e:	f104 0a19 	add.w	sl, r4, #25
 8005012:	68e3      	ldr	r3, [r4, #12]
 8005014:	6832      	ldr	r2, [r6, #0]
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	42ab      	cmp	r3, r5
 800501a:	dc26      	bgt.n	800506a <_printf_common+0x96>
 800501c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	3b00      	subs	r3, #0
 8005024:	bf18      	it	ne
 8005026:	2301      	movne	r3, #1
 8005028:	0692      	lsls	r2, r2, #26
 800502a:	d42b      	bmi.n	8005084 <_printf_common+0xb0>
 800502c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005030:	4641      	mov	r1, r8
 8005032:	4638      	mov	r0, r7
 8005034:	47c8      	blx	r9
 8005036:	3001      	adds	r0, #1
 8005038:	d01e      	beq.n	8005078 <_printf_common+0xa4>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	6922      	ldr	r2, [r4, #16]
 800503e:	f003 0306 	and.w	r3, r3, #6
 8005042:	2b04      	cmp	r3, #4
 8005044:	bf02      	ittt	eq
 8005046:	68e5      	ldreq	r5, [r4, #12]
 8005048:	6833      	ldreq	r3, [r6, #0]
 800504a:	1aed      	subeq	r5, r5, r3
 800504c:	68a3      	ldr	r3, [r4, #8]
 800504e:	bf0c      	ite	eq
 8005050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005054:	2500      	movne	r5, #0
 8005056:	4293      	cmp	r3, r2
 8005058:	bfc4      	itt	gt
 800505a:	1a9b      	subgt	r3, r3, r2
 800505c:	18ed      	addgt	r5, r5, r3
 800505e:	2600      	movs	r6, #0
 8005060:	341a      	adds	r4, #26
 8005062:	42b5      	cmp	r5, r6
 8005064:	d11a      	bne.n	800509c <_printf_common+0xc8>
 8005066:	2000      	movs	r0, #0
 8005068:	e008      	b.n	800507c <_printf_common+0xa8>
 800506a:	2301      	movs	r3, #1
 800506c:	4652      	mov	r2, sl
 800506e:	4641      	mov	r1, r8
 8005070:	4638      	mov	r0, r7
 8005072:	47c8      	blx	r9
 8005074:	3001      	adds	r0, #1
 8005076:	d103      	bne.n	8005080 <_printf_common+0xac>
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005080:	3501      	adds	r5, #1
 8005082:	e7c6      	b.n	8005012 <_printf_common+0x3e>
 8005084:	18e1      	adds	r1, r4, r3
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	2030      	movs	r0, #48	@ 0x30
 800508a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800508e:	4422      	add	r2, r4
 8005090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005098:	3302      	adds	r3, #2
 800509a:	e7c7      	b.n	800502c <_printf_common+0x58>
 800509c:	2301      	movs	r3, #1
 800509e:	4622      	mov	r2, r4
 80050a0:	4641      	mov	r1, r8
 80050a2:	4638      	mov	r0, r7
 80050a4:	47c8      	blx	r9
 80050a6:	3001      	adds	r0, #1
 80050a8:	d0e6      	beq.n	8005078 <_printf_common+0xa4>
 80050aa:	3601      	adds	r6, #1
 80050ac:	e7d9      	b.n	8005062 <_printf_common+0x8e>
	...

080050b0 <_printf_i>:
 80050b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b4:	7e0f      	ldrb	r7, [r1, #24]
 80050b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050b8:	2f78      	cmp	r7, #120	@ 0x78
 80050ba:	4691      	mov	r9, r2
 80050bc:	4680      	mov	r8, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	469a      	mov	sl, r3
 80050c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050c6:	d807      	bhi.n	80050d8 <_printf_i+0x28>
 80050c8:	2f62      	cmp	r7, #98	@ 0x62
 80050ca:	d80a      	bhi.n	80050e2 <_printf_i+0x32>
 80050cc:	2f00      	cmp	r7, #0
 80050ce:	f000 80d2 	beq.w	8005276 <_printf_i+0x1c6>
 80050d2:	2f58      	cmp	r7, #88	@ 0x58
 80050d4:	f000 80b9 	beq.w	800524a <_printf_i+0x19a>
 80050d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050e0:	e03a      	b.n	8005158 <_printf_i+0xa8>
 80050e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050e6:	2b15      	cmp	r3, #21
 80050e8:	d8f6      	bhi.n	80050d8 <_printf_i+0x28>
 80050ea:	a101      	add	r1, pc, #4	@ (adr r1, 80050f0 <_printf_i+0x40>)
 80050ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050f0:	08005149 	.word	0x08005149
 80050f4:	0800515d 	.word	0x0800515d
 80050f8:	080050d9 	.word	0x080050d9
 80050fc:	080050d9 	.word	0x080050d9
 8005100:	080050d9 	.word	0x080050d9
 8005104:	080050d9 	.word	0x080050d9
 8005108:	0800515d 	.word	0x0800515d
 800510c:	080050d9 	.word	0x080050d9
 8005110:	080050d9 	.word	0x080050d9
 8005114:	080050d9 	.word	0x080050d9
 8005118:	080050d9 	.word	0x080050d9
 800511c:	0800525d 	.word	0x0800525d
 8005120:	08005187 	.word	0x08005187
 8005124:	08005217 	.word	0x08005217
 8005128:	080050d9 	.word	0x080050d9
 800512c:	080050d9 	.word	0x080050d9
 8005130:	0800527f 	.word	0x0800527f
 8005134:	080050d9 	.word	0x080050d9
 8005138:	08005187 	.word	0x08005187
 800513c:	080050d9 	.word	0x080050d9
 8005140:	080050d9 	.word	0x080050d9
 8005144:	0800521f 	.word	0x0800521f
 8005148:	6833      	ldr	r3, [r6, #0]
 800514a:	1d1a      	adds	r2, r3, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6032      	str	r2, [r6, #0]
 8005150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005158:	2301      	movs	r3, #1
 800515a:	e09d      	b.n	8005298 <_printf_i+0x1e8>
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	6820      	ldr	r0, [r4, #0]
 8005160:	1d19      	adds	r1, r3, #4
 8005162:	6031      	str	r1, [r6, #0]
 8005164:	0606      	lsls	r6, r0, #24
 8005166:	d501      	bpl.n	800516c <_printf_i+0xbc>
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	e003      	b.n	8005174 <_printf_i+0xc4>
 800516c:	0645      	lsls	r5, r0, #25
 800516e:	d5fb      	bpl.n	8005168 <_printf_i+0xb8>
 8005170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005174:	2d00      	cmp	r5, #0
 8005176:	da03      	bge.n	8005180 <_printf_i+0xd0>
 8005178:	232d      	movs	r3, #45	@ 0x2d
 800517a:	426d      	negs	r5, r5
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005180:	4859      	ldr	r0, [pc, #356]	@ (80052e8 <_printf_i+0x238>)
 8005182:	230a      	movs	r3, #10
 8005184:	e011      	b.n	80051aa <_printf_i+0xfa>
 8005186:	6821      	ldr	r1, [r4, #0]
 8005188:	6833      	ldr	r3, [r6, #0]
 800518a:	0608      	lsls	r0, r1, #24
 800518c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005190:	d402      	bmi.n	8005198 <_printf_i+0xe8>
 8005192:	0649      	lsls	r1, r1, #25
 8005194:	bf48      	it	mi
 8005196:	b2ad      	uxthmi	r5, r5
 8005198:	2f6f      	cmp	r7, #111	@ 0x6f
 800519a:	4853      	ldr	r0, [pc, #332]	@ (80052e8 <_printf_i+0x238>)
 800519c:	6033      	str	r3, [r6, #0]
 800519e:	bf14      	ite	ne
 80051a0:	230a      	movne	r3, #10
 80051a2:	2308      	moveq	r3, #8
 80051a4:	2100      	movs	r1, #0
 80051a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051aa:	6866      	ldr	r6, [r4, #4]
 80051ac:	60a6      	str	r6, [r4, #8]
 80051ae:	2e00      	cmp	r6, #0
 80051b0:	bfa2      	ittt	ge
 80051b2:	6821      	ldrge	r1, [r4, #0]
 80051b4:	f021 0104 	bicge.w	r1, r1, #4
 80051b8:	6021      	strge	r1, [r4, #0]
 80051ba:	b90d      	cbnz	r5, 80051c0 <_printf_i+0x110>
 80051bc:	2e00      	cmp	r6, #0
 80051be:	d04b      	beq.n	8005258 <_printf_i+0x1a8>
 80051c0:	4616      	mov	r6, r2
 80051c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80051c6:	fb03 5711 	mls	r7, r3, r1, r5
 80051ca:	5dc7      	ldrb	r7, [r0, r7]
 80051cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051d0:	462f      	mov	r7, r5
 80051d2:	42bb      	cmp	r3, r7
 80051d4:	460d      	mov	r5, r1
 80051d6:	d9f4      	bls.n	80051c2 <_printf_i+0x112>
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d10b      	bne.n	80051f4 <_printf_i+0x144>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	07df      	lsls	r7, r3, #31
 80051e0:	d508      	bpl.n	80051f4 <_printf_i+0x144>
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	6861      	ldr	r1, [r4, #4]
 80051e6:	4299      	cmp	r1, r3
 80051e8:	bfde      	ittt	le
 80051ea:	2330      	movle	r3, #48	@ 0x30
 80051ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051f4:	1b92      	subs	r2, r2, r6
 80051f6:	6122      	str	r2, [r4, #16]
 80051f8:	f8cd a000 	str.w	sl, [sp]
 80051fc:	464b      	mov	r3, r9
 80051fe:	aa03      	add	r2, sp, #12
 8005200:	4621      	mov	r1, r4
 8005202:	4640      	mov	r0, r8
 8005204:	f7ff fee6 	bl	8004fd4 <_printf_common>
 8005208:	3001      	adds	r0, #1
 800520a:	d14a      	bne.n	80052a2 <_printf_i+0x1f2>
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	b004      	add	sp, #16
 8005212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f043 0320 	orr.w	r3, r3, #32
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	4833      	ldr	r0, [pc, #204]	@ (80052ec <_printf_i+0x23c>)
 8005220:	2778      	movs	r7, #120	@ 0x78
 8005222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	6831      	ldr	r1, [r6, #0]
 800522a:	061f      	lsls	r7, r3, #24
 800522c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005230:	d402      	bmi.n	8005238 <_printf_i+0x188>
 8005232:	065f      	lsls	r7, r3, #25
 8005234:	bf48      	it	mi
 8005236:	b2ad      	uxthmi	r5, r5
 8005238:	6031      	str	r1, [r6, #0]
 800523a:	07d9      	lsls	r1, r3, #31
 800523c:	bf44      	itt	mi
 800523e:	f043 0320 	orrmi.w	r3, r3, #32
 8005242:	6023      	strmi	r3, [r4, #0]
 8005244:	b11d      	cbz	r5, 800524e <_printf_i+0x19e>
 8005246:	2310      	movs	r3, #16
 8005248:	e7ac      	b.n	80051a4 <_printf_i+0xf4>
 800524a:	4827      	ldr	r0, [pc, #156]	@ (80052e8 <_printf_i+0x238>)
 800524c:	e7e9      	b.n	8005222 <_printf_i+0x172>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	f023 0320 	bic.w	r3, r3, #32
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	e7f6      	b.n	8005246 <_printf_i+0x196>
 8005258:	4616      	mov	r6, r2
 800525a:	e7bd      	b.n	80051d8 <_printf_i+0x128>
 800525c:	6833      	ldr	r3, [r6, #0]
 800525e:	6825      	ldr	r5, [r4, #0]
 8005260:	6961      	ldr	r1, [r4, #20]
 8005262:	1d18      	adds	r0, r3, #4
 8005264:	6030      	str	r0, [r6, #0]
 8005266:	062e      	lsls	r6, r5, #24
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	d501      	bpl.n	8005270 <_printf_i+0x1c0>
 800526c:	6019      	str	r1, [r3, #0]
 800526e:	e002      	b.n	8005276 <_printf_i+0x1c6>
 8005270:	0668      	lsls	r0, r5, #25
 8005272:	d5fb      	bpl.n	800526c <_printf_i+0x1bc>
 8005274:	8019      	strh	r1, [r3, #0]
 8005276:	2300      	movs	r3, #0
 8005278:	6123      	str	r3, [r4, #16]
 800527a:	4616      	mov	r6, r2
 800527c:	e7bc      	b.n	80051f8 <_printf_i+0x148>
 800527e:	6833      	ldr	r3, [r6, #0]
 8005280:	1d1a      	adds	r2, r3, #4
 8005282:	6032      	str	r2, [r6, #0]
 8005284:	681e      	ldr	r6, [r3, #0]
 8005286:	6862      	ldr	r2, [r4, #4]
 8005288:	2100      	movs	r1, #0
 800528a:	4630      	mov	r0, r6
 800528c:	f7fa ffa0 	bl	80001d0 <memchr>
 8005290:	b108      	cbz	r0, 8005296 <_printf_i+0x1e6>
 8005292:	1b80      	subs	r0, r0, r6
 8005294:	6060      	str	r0, [r4, #4]
 8005296:	6863      	ldr	r3, [r4, #4]
 8005298:	6123      	str	r3, [r4, #16]
 800529a:	2300      	movs	r3, #0
 800529c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a0:	e7aa      	b.n	80051f8 <_printf_i+0x148>
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	4632      	mov	r2, r6
 80052a6:	4649      	mov	r1, r9
 80052a8:	4640      	mov	r0, r8
 80052aa:	47d0      	blx	sl
 80052ac:	3001      	adds	r0, #1
 80052ae:	d0ad      	beq.n	800520c <_printf_i+0x15c>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	079b      	lsls	r3, r3, #30
 80052b4:	d413      	bmi.n	80052de <_printf_i+0x22e>
 80052b6:	68e0      	ldr	r0, [r4, #12]
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	4298      	cmp	r0, r3
 80052bc:	bfb8      	it	lt
 80052be:	4618      	movlt	r0, r3
 80052c0:	e7a6      	b.n	8005210 <_printf_i+0x160>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4632      	mov	r2, r6
 80052c6:	4649      	mov	r1, r9
 80052c8:	4640      	mov	r0, r8
 80052ca:	47d0      	blx	sl
 80052cc:	3001      	adds	r0, #1
 80052ce:	d09d      	beq.n	800520c <_printf_i+0x15c>
 80052d0:	3501      	adds	r5, #1
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	9903      	ldr	r1, [sp, #12]
 80052d6:	1a5b      	subs	r3, r3, r1
 80052d8:	42ab      	cmp	r3, r5
 80052da:	dcf2      	bgt.n	80052c2 <_printf_i+0x212>
 80052dc:	e7eb      	b.n	80052b6 <_printf_i+0x206>
 80052de:	2500      	movs	r5, #0
 80052e0:	f104 0619 	add.w	r6, r4, #25
 80052e4:	e7f5      	b.n	80052d2 <_printf_i+0x222>
 80052e6:	bf00      	nop
 80052e8:	080054d9 	.word	0x080054d9
 80052ec:	080054ea 	.word	0x080054ea

080052f0 <memmove>:
 80052f0:	4288      	cmp	r0, r1
 80052f2:	b510      	push	{r4, lr}
 80052f4:	eb01 0402 	add.w	r4, r1, r2
 80052f8:	d902      	bls.n	8005300 <memmove+0x10>
 80052fa:	4284      	cmp	r4, r0
 80052fc:	4623      	mov	r3, r4
 80052fe:	d807      	bhi.n	8005310 <memmove+0x20>
 8005300:	1e43      	subs	r3, r0, #1
 8005302:	42a1      	cmp	r1, r4
 8005304:	d008      	beq.n	8005318 <memmove+0x28>
 8005306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800530a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800530e:	e7f8      	b.n	8005302 <memmove+0x12>
 8005310:	4402      	add	r2, r0
 8005312:	4601      	mov	r1, r0
 8005314:	428a      	cmp	r2, r1
 8005316:	d100      	bne.n	800531a <memmove+0x2a>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800531e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005322:	e7f7      	b.n	8005314 <memmove+0x24>

08005324 <_sbrk_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4d06      	ldr	r5, [pc, #24]	@ (8005340 <_sbrk_r+0x1c>)
 8005328:	2300      	movs	r3, #0
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	f7fc fb4a 	bl	80019c8 <_sbrk>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_sbrk_r+0x1a>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_sbrk_r+0x1a>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	200003b0 	.word	0x200003b0

08005344 <memcpy>:
 8005344:	440a      	add	r2, r1
 8005346:	4291      	cmp	r1, r2
 8005348:	f100 33ff 	add.w	r3, r0, #4294967295
 800534c:	d100      	bne.n	8005350 <memcpy+0xc>
 800534e:	4770      	bx	lr
 8005350:	b510      	push	{r4, lr}
 8005352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800535a:	4291      	cmp	r1, r2
 800535c:	d1f9      	bne.n	8005352 <memcpy+0xe>
 800535e:	bd10      	pop	{r4, pc}

08005360 <_realloc_r>:
 8005360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005364:	4680      	mov	r8, r0
 8005366:	4615      	mov	r5, r2
 8005368:	460c      	mov	r4, r1
 800536a:	b921      	cbnz	r1, 8005376 <_realloc_r+0x16>
 800536c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005370:	4611      	mov	r1, r2
 8005372:	f7ff bc4b 	b.w	8004c0c <_malloc_r>
 8005376:	b92a      	cbnz	r2, 8005384 <_realloc_r+0x24>
 8005378:	f7ff fbdc 	bl	8004b34 <_free_r>
 800537c:	2400      	movs	r4, #0
 800537e:	4620      	mov	r0, r4
 8005380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005384:	f000 f81a 	bl	80053bc <_malloc_usable_size_r>
 8005388:	4285      	cmp	r5, r0
 800538a:	4606      	mov	r6, r0
 800538c:	d802      	bhi.n	8005394 <_realloc_r+0x34>
 800538e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005392:	d8f4      	bhi.n	800537e <_realloc_r+0x1e>
 8005394:	4629      	mov	r1, r5
 8005396:	4640      	mov	r0, r8
 8005398:	f7ff fc38 	bl	8004c0c <_malloc_r>
 800539c:	4607      	mov	r7, r0
 800539e:	2800      	cmp	r0, #0
 80053a0:	d0ec      	beq.n	800537c <_realloc_r+0x1c>
 80053a2:	42b5      	cmp	r5, r6
 80053a4:	462a      	mov	r2, r5
 80053a6:	4621      	mov	r1, r4
 80053a8:	bf28      	it	cs
 80053aa:	4632      	movcs	r2, r6
 80053ac:	f7ff ffca 	bl	8005344 <memcpy>
 80053b0:	4621      	mov	r1, r4
 80053b2:	4640      	mov	r0, r8
 80053b4:	f7ff fbbe 	bl	8004b34 <_free_r>
 80053b8:	463c      	mov	r4, r7
 80053ba:	e7e0      	b.n	800537e <_realloc_r+0x1e>

080053bc <_malloc_usable_size_r>:
 80053bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c0:	1f18      	subs	r0, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bfbc      	itt	lt
 80053c6:	580b      	ldrlt	r3, [r1, r0]
 80053c8:	18c0      	addlt	r0, r0, r3
 80053ca:	4770      	bx	lr

080053cc <_init>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr

080053d8 <_fini>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	bf00      	nop
 80053dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053de:	bc08      	pop	{r3}
 80053e0:	469e      	mov	lr, r3
 80053e2:	4770      	bx	lr
