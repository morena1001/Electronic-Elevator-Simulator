
Elevator Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005084  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005214  08005214  00006214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005344  08005344  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005344  08005344  00006344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800534c  0800534c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800534c  0800534c  0000634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005354  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  080053b0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  080053b0  000073a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5e7  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d53  00000000  00000000  00015673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000173c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c2  00000000  00000000  00018028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdfb  00000000  00000000  000189ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fed4  00000000  00000000  000347e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6467  00000000  00000000  000446b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eab20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003928  00000000  00000000  000eab64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ee48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051fc 	.word	0x080051fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080051fc 	.word	0x080051fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f001 fb31 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f8bb 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fa13 	bl	80006a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000282:	f000 f909 	bl	8000498 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000286:	f000 f9df 	bl	8000648 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 800028a:	f000 f98b 	bl	80005a4 <MX_TIM15_Init>
  MX_TIM6_Init();
 800028e:	f000 f951 	bl	8000534 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Program_Start_Light_Up();
 8000292:	f000 fb39 	bl	8000908 <Program_Start_Light_Up>
  Elevator_Simulator_Init();
 8000296:	f000 fabd 	bl	8000814 <Elevator_Simulator_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (requests[0] != 0 && (!serving || (serving && floor_position == requests[0]))) {
 800029a:	4b4a      	ldr	r3, [pc, #296]	@ (80003c4 <main+0x154>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0fb      	beq.n	800029a <main+0x2a>
 80002a2:	4b49      	ldr	r3, [pc, #292]	@ (80003c8 <main+0x158>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d009      	beq.n	80002be <main+0x4e>
 80002aa:	4b47      	ldr	r3, [pc, #284]	@ (80003c8 <main+0x158>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f3      	beq.n	800029a <main+0x2a>
 80002b2:	4b44      	ldr	r3, [pc, #272]	@ (80003c4 <main+0x154>)
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	4b45      	ldr	r3, [pc, #276]	@ (80003cc <main+0x15c>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d1ed      	bne.n	800029a <main+0x2a>
		  serving = requests[0];
 80002be:	4b41      	ldr	r3, [pc, #260]	@ (80003c4 <main+0x154>)
 80002c0:	781a      	ldrb	r2, [r3, #0]
 80002c2:	4b41      	ldr	r3, [pc, #260]	@ (80003c8 <main+0x158>)
 80002c4:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 2; i++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e00b      	b.n	80002e4 <main+0x74>
			  requests[i] = requests[i + 1];
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	4a3c      	ldr	r2, [pc, #240]	@ (80003c4 <main+0x154>)
 80002d2:	5cd1      	ldrb	r1, [r2, r3]
 80002d4:	4a3b      	ldr	r2, [pc, #236]	@ (80003c4 <main+0x154>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4413      	add	r3, r2
 80002da:	460a      	mov	r2, r1
 80002dc:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 2; i++) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	ddf0      	ble.n	80002cc <main+0x5c>
		  }
		  requests[2] = 0;
 80002ea:	4b36      	ldr	r3, [pc, #216]	@ (80003c4 <main+0x154>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	709a      	strb	r2, [r3, #2]
//		  elevator_direction = floor_position < 1 ? 'u' : 'd';


		  // CASE 1
		  if (floor_position == serving/*requests[0]*/ /*&& requests[1] == 0*/) {
 80002f0:	4b36      	ldr	r3, [pc, #216]	@ (80003cc <main+0x15c>)
 80002f2:	781a      	ldrb	r2, [r3, #0]
 80002f4:	4b34      	ldr	r3, [pc, #208]	@ (80003c8 <main+0x158>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d13a      	bne.n	8000372 <main+0x102>
			  switch(serving) {
 80002fc:	4b32      	ldr	r3, [pc, #200]	@ (80003c8 <main+0x158>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b03      	cmp	r3, #3
 8000302:	d01b      	beq.n	800033c <main+0xcc>
 8000304:	2b03      	cmp	r3, #3
 8000306:	dc23      	bgt.n	8000350 <main+0xe0>
 8000308:	2b01      	cmp	r3, #1
 800030a:	d002      	beq.n	8000312 <main+0xa2>
 800030c:	2b02      	cmp	r3, #2
 800030e:	d00a      	beq.n	8000326 <main+0xb6>
 8000310:	e01e      	b.n	8000350 <main+0xe0>
			  case 1:
				  elevator_direction = 'u';
 8000312:	4b2f      	ldr	r3, [pc, #188]	@ (80003d0 <main+0x160>)
 8000314:	2275      	movs	r2, #117	@ 0x75
 8000316:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET); // Assign a value to elevator_direction based on the .direction value
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800031e:	482d      	ldr	r0, [pc, #180]	@ (80003d4 <main+0x164>)
 8000320:	f001 fe02 	bl	8001f28 <HAL_GPIO_WritePin>
				  break;
 8000324:	e014      	b.n	8000350 <main+0xe0>
			  case 2:
				  elevator_direction = floor_requests[1].direction;
 8000326:	4b2c      	ldr	r3, [pc, #176]	@ (80003d8 <main+0x168>)
 8000328:	78da      	ldrb	r2, [r3, #3]
 800032a:	4b29      	ldr	r3, [pc, #164]	@ (80003d0 <main+0x160>)
 800032c:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000334:	4827      	ldr	r0, [pc, #156]	@ (80003d4 <main+0x164>)
 8000336:	f001 fdf7 	bl	8001f28 <HAL_GPIO_WritePin>
				  break;
 800033a:	e009      	b.n	8000350 <main+0xe0>
			  case 3:
				  elevator_direction = 'd';
 800033c:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <main+0x160>)
 800033e:	2264      	movs	r2, #100	@ 0x64
 8000340:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000348:	4822      	ldr	r0, [pc, #136]	@ (80003d4 <main+0x164>)
 800034a:	f001 fded 	bl	8001f28 <HAL_GPIO_WritePin>
				  break;
 800034e:	bf00      	nop
			  }
			  HAL_TIM_Base_Start_IT(&htim15);
 8000350:	4822      	ldr	r0, [pc, #136]	@ (80003dc <main+0x16c>)
 8000352:	f003 fa7b 	bl	800384c <HAL_TIM_Base_Start_IT>
			  sprintf(msg, "%c\r\n", elevator_direction);
 8000356:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <main+0x160>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	4920      	ldr	r1, [pc, #128]	@ (80003e0 <main+0x170>)
 800035e:	4821      	ldr	r0, [pc, #132]	@ (80003e4 <main+0x174>)
 8000360:	f004 faac 	bl	80048bc <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) msg, 3, 100);
 8000364:	2364      	movs	r3, #100	@ 0x64
 8000366:	2203      	movs	r2, #3
 8000368:	491e      	ldr	r1, [pc, #120]	@ (80003e4 <main+0x174>)
 800036a:	481f      	ldr	r0, [pc, #124]	@ (80003e8 <main+0x178>)
 800036c:	f003 feca 	bl	8004104 <HAL_UART_Transmit>
 8000370:	e793      	b.n	800029a <main+0x2a>
		  }

		  // CASE 2
		  else if (!traveling && floor_position != serving) {
 8000372:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <main+0x17c>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d18f      	bne.n	800029a <main+0x2a>
 800037a:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <main+0x15c>)
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <main+0x158>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	429a      	cmp	r2, r3
 8000384:	d089      	beq.n	800029a <main+0x2a>
			  traveling = 1;
 8000386:	4b19      	ldr	r3, [pc, #100]	@ (80003ec <main+0x17c>)
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
			  elevator_direction = floor_position > serving ? 'd' : 'u';
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <main+0x15c>)
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4b0d      	ldr	r3, [pc, #52]	@ (80003c8 <main+0x158>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	429a      	cmp	r2, r3
 8000396:	d901      	bls.n	800039c <main+0x12c>
 8000398:	2264      	movs	r2, #100	@ 0x64
 800039a:	e000      	b.n	800039e <main+0x12e>
 800039c:	2275      	movs	r2, #117	@ 0x75
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <main+0x160>)
 80003a0:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <main+0x160>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b75      	cmp	r3, #117	@ 0x75
 80003a8:	d101      	bne.n	80003ae <main+0x13e>
 80003aa:	2340      	movs	r3, #64	@ 0x40
 80003ac:	e000      	b.n	80003b0 <main+0x140>
 80003ae:	2380      	movs	r3, #128	@ 0x80
 80003b0:	2201      	movs	r2, #1
 80003b2:	4619      	mov	r1, r3
 80003b4:	4807      	ldr	r0, [pc, #28]	@ (80003d4 <main+0x164>)
 80003b6:	f001 fdb7 	bl	8001f28 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim6);
 80003ba:	480d      	ldr	r0, [pc, #52]	@ (80003f0 <main+0x180>)
 80003bc:	f003 fa46 	bl	800384c <HAL_TIM_Base_Start_IT>
	  if (requests[0] != 0 && (!serving || (serving && floor_position == requests[0]))) {
 80003c0:	e76b      	b.n	800029a <main+0x2a>
 80003c2:	bf00      	nop
 80003c4:	20000218 	.word	0x20000218
 80003c8:	2000021c 	.word	0x2000021c
 80003cc:	20000213 	.word	0x20000213
 80003d0:	20000212 	.word	0x20000212
 80003d4:	48000800 	.word	0x48000800
 80003d8:	2000020c 	.word	0x2000020c
 80003dc:	20000110 	.word	0x20000110
 80003e0:	08005214 	.word	0x08005214
 80003e4:	200001e4 	.word	0x200001e4
 80003e8:	2000015c 	.word	0x2000015c
 80003ec:	2000021e 	.word	0x2000021e
 80003f0:	200000c4 	.word	0x200000c4

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b09c      	sub	sp, #112	@ 0x70
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80003fe:	2228      	movs	r2, #40	@ 0x28
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f004 fa7a 	bl	80048fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000418:	463b      	mov	r3, r7
 800041a:	2234      	movs	r2, #52	@ 0x34
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f004 fa6c 	bl	80048fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	2302      	movs	r3, #2
 8000426:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042c:	2310      	movs	r3, #16
 800042e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000430:	2300      	movs	r3, #0
 8000432:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000438:	4618      	mov	r0, r3
 800043a:	f001 fdbf 	bl	8001fbc <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000444:	f000 fb82 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	230f      	movs	r3, #15
 800044a:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800044c:	2300      	movs	r3, #0
 800044e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800045c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fde8 	bl	8003038 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800046e:	f000 fb6d 	bl	8000b4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000472:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000476:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047c:	463b      	mov	r3, r7
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fffa 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800048a:	f000 fb5f 	bl	8000b4c <Error_Handler>
  }
}
 800048e:	bf00      	nop
 8000490:	3770      	adds	r7, #112	@ 0x70
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <MX_TIM2_Init+0x98>)
 80004b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80004be:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <MX_TIM2_Init+0x98>)
 80004c0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80004c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <MX_TIM2_Init+0x98>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9995;
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <MX_TIM2_Init+0x98>)
 80004ce:	f242 720b 	movw	r2, #9995	@ 0x270b
 80004d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d4:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <MX_TIM2_Init+0x98>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <MX_TIM2_Init+0x98>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004e0:	4813      	ldr	r0, [pc, #76]	@ (8000530 <MX_TIM2_Init+0x98>)
 80004e2:	f003 f95b 	bl	800379c <HAL_TIM_Base_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004ec:	f000 fb2e 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	480c      	ldr	r0, [pc, #48]	@ (8000530 <MX_TIM2_Init+0x98>)
 80004fe:	f003 fb2a 	bl	8003b56 <HAL_TIM_ConfigClockSource>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000508:	f000 fb20 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4619      	mov	r1, r3
 8000518:	4805      	ldr	r0, [pc, #20]	@ (8000530 <MX_TIM2_Init+0x98>)
 800051a:	f003 fd21 	bl	8003f60 <HAL_TIMEx_MasterConfigSynchronization>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000524:	f000 fb12 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000078 	.word	0x20000078

08000534 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000544:	4b15      	ldr	r3, [pc, #84]	@ (800059c <MX_TIM6_Init+0x68>)
 8000546:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <MX_TIM6_Init+0x6c>)
 8000548:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 800054a:	4b14      	ldr	r3, [pc, #80]	@ (800059c <MX_TIM6_Init+0x68>)
 800054c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000550:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <MX_TIM6_Init+0x68>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8000558:	4b10      	ldr	r3, [pc, #64]	@ (800059c <MX_TIM6_Init+0x68>)
 800055a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800055e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000560:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <MX_TIM6_Init+0x68>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000566:	480d      	ldr	r0, [pc, #52]	@ (800059c <MX_TIM6_Init+0x68>)
 8000568:	f003 f918 	bl	800379c <HAL_TIM_Base_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000572:	f000 faeb 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4806      	ldr	r0, [pc, #24]	@ (800059c <MX_TIM6_Init+0x68>)
 8000584:	f003 fcec 	bl	8003f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800058e:	f000 fadd 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000c4 	.word	0x200000c4
 80005a0:	40001000 	.word	0x40001000

080005a4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <MX_TIM15_Init+0x9c>)
 80005c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000644 <MX_TIM15_Init+0xa0>)
 80005c6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <MX_TIM15_Init+0x9c>)
 80005ca:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80005ce:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <MX_TIM15_Init+0x9c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 111;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <MX_TIM15_Init+0x9c>)
 80005d8:	226f      	movs	r2, #111	@ 0x6f
 80005da:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_TIM15_Init+0x9c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <MX_TIM15_Init+0x9c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_TIM15_Init+0x9c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80005ee:	4814      	ldr	r0, [pc, #80]	@ (8000640 <MX_TIM15_Init+0x9c>)
 80005f0:	f003 f8d4 	bl	800379c <HAL_TIM_Base_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80005fa:	f000 faa7 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000602:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	480d      	ldr	r0, [pc, #52]	@ (8000640 <MX_TIM15_Init+0x9c>)
 800060c:	f003 faa3 	bl	8003b56 <HAL_TIM_ConfigClockSource>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000616:	f000 fa99 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	@ (8000640 <MX_TIM15_Init+0x9c>)
 8000628:	f003 fc9a 	bl	8003f60 <HAL_TIMEx_MasterConfigSynchronization>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000632:	f000 fa8b 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000110 	.word	0x20000110
 8000644:	40014000 	.word	0x40014000

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <MX_USART2_UART_Init+0x5c>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000654:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800068c:	f003 fcec 	bl	8004068 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 fa59 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000015c 	.word	0x2000015c
 80006a4:	40004400 	.word	0x40004400

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b52      	ldr	r3, [pc, #328]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a51      	ldr	r2, [pc, #324]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b4f      	ldr	r3, [pc, #316]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b4c      	ldr	r3, [pc, #304]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a4b      	ldr	r2, [pc, #300]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b46      	ldr	r3, [pc, #280]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a45      	ldr	r2, [pc, #276]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b43      	ldr	r3, [pc, #268]	@ (8000808 <MX_GPIO_Init+0x160>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PF1_Pin|PF2_Pin|PF3_Pin|DF1_Pin
 8000706:	2200      	movs	r2, #0
 8000708:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800070c:	483f      	ldr	r0, [pc, #252]	@ (800080c <MX_GPIO_Init+0x164>)
 800070e:	f001 fc0b 	bl	8001f28 <HAL_GPIO_WritePin>
                          |DF2_Pin|DF3_Pin|DU_Pin|DD_Pin
                          |FR1_Pin|FR2_Pin|FR3_Pin|BCDI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000718:	483d      	ldr	r0, [pc, #244]	@ (8000810 <MX_GPIO_Init+0x168>)
 800071a:	f001 fc05 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000724:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4619      	mov	r1, r3
 8000734:	4835      	ldr	r0, [pc, #212]	@ (800080c <MX_GPIO_Init+0x164>)
 8000736:	f001 fa6d 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1_Pin PF2_Pin PF3_Pin DF1_Pin
                           DF2_Pin DF3_Pin DU_Pin DD_Pin
                           FR1_Pin FR2_Pin FR3_Pin BCDI_Pin */
  GPIO_InitStruct.Pin = PF1_Pin|PF2_Pin|PF3_Pin|DF1_Pin
 800073a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800073e:	60fb      	str	r3, [r7, #12]
                          |DF2_Pin|DF3_Pin|DU_Pin|DD_Pin
                          |FR1_Pin|FR2_Pin|FR3_Pin|BCDI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	482e      	ldr	r0, [pc, #184]	@ (800080c <MX_GPIO_Init+0x164>)
 8000754:	f001 fa5e 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : II1_Pin II2_Pin II3_Pin OI1U_Pin
                           OI2D_Pin OI2U_Pin OI3D_Pin */
  GPIO_InitStruct.Pin = II1_Pin|II2_Pin|II3_Pin|OI1U_Pin
 8000758:	237f      	movs	r3, #127	@ 0x7f
 800075a:	60fb      	str	r3, [r7, #12]
                          |OI2D_Pin|OI2U_Pin|OI3D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4828      	ldr	r0, [pc, #160]	@ (8000810 <MX_GPIO_Init+0x168>)
 800076e:	f001 fa51 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4821      	ldr	r0, [pc, #132]	@ (8000810 <MX_GPIO_Init+0x168>)
 800078c:	f001 fa42 	bl	8001c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2006      	movs	r0, #6
 8000796:	f001 fa06 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079a:	2006      	movs	r0, #6
 800079c:	f001 fa1f 	bl	8001bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2007      	movs	r0, #7
 80007a6:	f001 f9fe 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007aa:	2007      	movs	r0, #7
 80007ac:	f001 fa17 	bl	8001bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2008      	movs	r0, #8
 80007b6:	f001 f9f6 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80007ba:	2008      	movs	r0, #8
 80007bc:	f001 fa0f 	bl	8001bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2009      	movs	r0, #9
 80007c6:	f001 f9ee 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007ca:	2009      	movs	r0, #9
 80007cc:	f001 fa07 	bl	8001bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	200a      	movs	r0, #10
 80007d6:	f001 f9e6 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007da:	200a      	movs	r0, #10
 80007dc:	f001 f9ff 	bl	8001bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2017      	movs	r0, #23
 80007e6:	f001 f9de 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ea:	2017      	movs	r0, #23
 80007ec:	f001 f9f7 	bl	8001bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2028      	movs	r0, #40	@ 0x28
 80007f6:	f001 f9d6 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fa:	2028      	movs	r0, #40	@ 0x28
 80007fc:	f001 f9ef 	bl	8001bde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48000800 	.word	0x48000800
 8000810:	48000400 	.word	0x48000400

08000814 <Elevator_Simulator_Init>:
//		sprintf(msg, "YIPPEE\r\n");
//		HAL_UART_Transmit(&huart2, (uint8_t*) msg, 10, 100);
//	}
//}

void Elevator_Simulator_Init(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 800081a:	2201      	movs	r2, #1
 800081c:	2101      	movs	r1, #1
 800081e:	201c      	movs	r0, #28
 8000820:	f001 f9c1 	bl	8001ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000824:	201c      	movs	r0, #28
 8000826:	f001 f9da 	bl	8001bde <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	2101      	movs	r1, #1
 800082e:	2036      	movs	r0, #54	@ 0x36
 8000830:	f001 f9b9 	bl	8001ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000834:	2036      	movs	r0, #54	@ 0x36
 8000836:	f001 f9d2 	bl	8001bde <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	2101      	movs	r1, #1
 800083e:	2018      	movs	r0, #24
 8000840:	f001 f9b1 	bl	8001ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000844:	2018      	movs	r0, #24
 8000846:	f001 f9ca 	bl	8001bde <HAL_NVIC_EnableIRQ>

	for (int i = 0; i < 3; i++) {
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e00d      	b.n	800086c <Elevator_Simulator_Init+0x58>
		floor_requests[i].requested = 0;
 8000850:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <Elevator_Simulator_Init+0xcc>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2100      	movs	r1, #0
 8000856:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		floor_requests[i].direction = 'n';
 800085a:	4a21      	ldr	r2, [pc, #132]	@ (80008e0 <Elevator_Simulator_Init+0xcc>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	226e      	movs	r2, #110	@ 0x6e
 8000864:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 3; i++) {
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3301      	adds	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b02      	cmp	r3, #2
 8000870:	ddee      	ble.n	8000850 <Elevator_Simulator_Init+0x3c>
	}

	elevator_direction = 'n';
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <Elevator_Simulator_Init+0xd0>)
 8000874:	226e      	movs	r2, #110	@ 0x6e
 8000876:	701a      	strb	r2, [r3, #0]
	floor_position = 1; // The elevator always begins in the first floor
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <Elevator_Simulator_Init+0xd4>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 2; i++) {
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	e007      	b.n	8000894 <Elevator_Simulator_Init+0x80>
		floor_destinations[i] = 0;
 8000884:	4a19      	ldr	r2, [pc, #100]	@ (80008ec <Elevator_Simulator_Init+0xd8>)
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	4413      	add	r3, r2
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b01      	cmp	r3, #1
 8000898:	ddf4      	ble.n	8000884 <Elevator_Simulator_Init+0x70>
	}

	for (int i =  0; i < 3; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	e007      	b.n	80008b0 <Elevator_Simulator_Init+0x9c>
			requests[i] = 0;
 80008a0:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <Elevator_Simulator_Init+0xdc>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
	for (int i =  0; i < 3; i++) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	ddf4      	ble.n	80008a0 <Elevator_Simulator_Init+0x8c>
		}

	pin_num = 0;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <Elevator_Simulator_Init+0xe0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
	serving = 0;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <Elevator_Simulator_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	start_timer = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <Elevator_Simulator_Init+0xe8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	traveling = 0;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <Elevator_Simulator_Init+0xec>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2101      	movs	r1, #1
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <Elevator_Simulator_Init+0xf0>)
 80008d4:	f001 fb28 	bl	8001f28 <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000020c 	.word	0x2000020c
 80008e4:	20000212 	.word	0x20000212
 80008e8:	20000213 	.word	0x20000213
 80008ec:	20000214 	.word	0x20000214
 80008f0:	20000218 	.word	0x20000218
 80008f4:	2000021b 	.word	0x2000021b
 80008f8:	2000021c 	.word	0x2000021c
 80008fc:	2000021d 	.word	0x2000021d
 8000900:	2000021e 	.word	0x2000021e
 8000904:	48000800 	.word	0x48000800

08000908 <Program_Start_Light_Up>:

void Program_Start_Light_Up(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
 800090c:	2101      	movs	r1, #1
 800090e:	4842      	ldr	r0, [pc, #264]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000910:	f001 fb22 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000914:	20fa      	movs	r0, #250	@ 0xfa
 8000916:	f001 f847 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(PF2_GPIO_Port, PF2_Pin);
 800091a:	2102      	movs	r1, #2
 800091c:	483e      	ldr	r0, [pc, #248]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 800091e:	f001 fb1b 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
 8000922:	2101      	movs	r1, #1
 8000924:	483c      	ldr	r0, [pc, #240]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000926:	f001 fb17 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800092a:	20fa      	movs	r0, #250	@ 0xfa
 800092c:	f001 f83c 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(PF3_GPIO_Port, PF3_Pin);
 8000930:	2104      	movs	r1, #4
 8000932:	4839      	ldr	r0, [pc, #228]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000934:	f001 fb10 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF2_GPIO_Port, PF2_Pin);
 8000938:	2102      	movs	r1, #2
 800093a:	4837      	ldr	r0, [pc, #220]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 800093c:	f001 fb0c 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000940:	20fa      	movs	r0, #250	@ 0xfa
 8000942:	f001 f831 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(DF1_GPIO_Port, DF1_Pin);
 8000946:	2108      	movs	r1, #8
 8000948:	4833      	ldr	r0, [pc, #204]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 800094a:	f001 fb05 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF3_GPIO_Port, PF3_Pin);
 800094e:	2104      	movs	r1, #4
 8000950:	4831      	ldr	r0, [pc, #196]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000952:	f001 fb01 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000956:	20fa      	movs	r0, #250	@ 0xfa
 8000958:	f001 f826 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(DF2_GPIO_Port, DF2_Pin);
 800095c:	2110      	movs	r1, #16
 800095e:	482e      	ldr	r0, [pc, #184]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000960:	f001 fafa 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF1_GPIO_Port, DF1_Pin);
 8000964:	2108      	movs	r1, #8
 8000966:	482c      	ldr	r0, [pc, #176]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000968:	f001 faf6 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800096c:	20fa      	movs	r0, #250	@ 0xfa
 800096e:	f001 f81b 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(DF3_GPIO_Port, DF3_Pin);
 8000972:	2120      	movs	r1, #32
 8000974:	4828      	ldr	r0, [pc, #160]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000976:	f001 faef 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF2_GPIO_Port, DF2_Pin);
 800097a:	2110      	movs	r1, #16
 800097c:	4826      	ldr	r0, [pc, #152]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 800097e:	f001 faeb 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000982:	20fa      	movs	r0, #250	@ 0xfa
 8000984:	f001 f810 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(DU_GPIO_Port, DU_Pin);
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	4823      	ldr	r0, [pc, #140]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 800098c:	f001 fae4 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF3_GPIO_Port, DF3_Pin);
 8000990:	2120      	movs	r1, #32
 8000992:	4821      	ldr	r0, [pc, #132]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000994:	f001 fae0 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000998:	20fa      	movs	r0, #250	@ 0xfa
 800099a:	f001 f805 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(DD_GPIO_Port, DD_Pin);
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	481d      	ldr	r0, [pc, #116]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 80009a2:	f001 fad9 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DU_GPIO_Port, DU_Pin);
 80009a6:	2140      	movs	r1, #64	@ 0x40
 80009a8:	481b      	ldr	r0, [pc, #108]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 80009aa:	f001 fad5 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80009ae:	20fa      	movs	r0, #250	@ 0xfa
 80009b0:	f000 fffa 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(FR1_GPIO_Port, FR1_Pin);
 80009b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009b8:	4817      	ldr	r0, [pc, #92]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 80009ba:	f001 facd 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DD_GPIO_Port, DD_Pin);
 80009be:	2180      	movs	r1, #128	@ 0x80
 80009c0:	4815      	ldr	r0, [pc, #84]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 80009c2:	f001 fac9 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80009c6:	20fa      	movs	r0, #250	@ 0xfa
 80009c8:	f000 ffee 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(FR2_GPIO_Port, FR2_Pin);
 80009cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009d0:	4811      	ldr	r0, [pc, #68]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 80009d2:	f001 fac1 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR1_GPIO_Port, FR1_Pin);
 80009d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009da:	480f      	ldr	r0, [pc, #60]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 80009dc:	f001 fabc 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80009e0:	20fa      	movs	r0, #250	@ 0xfa
 80009e2:	f000 ffe1 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(FR3_GPIO_Port, FR3_Pin);
 80009e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ea:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 80009ec:	f001 fab4 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR2_GPIO_Port, FR2_Pin);
 80009f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009f4:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 80009f6:	f001 faaf 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80009fa:	20fa      	movs	r0, #250	@ 0xfa
 80009fc:	f000 ffd4 	bl	80019a8 <HAL_Delay>

	HAL_GPIO_TogglePin(FR3_GPIO_Port, FR3_Pin);
 8000a00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <Program_Start_Light_Up+0x110>)
 8000a06:	f001 faa7 	bl	8001f58 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000a0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0e:	f000 ffcb 	bl	80019a8 <HAL_Delay>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	48000800 	.word	0x48000800

08000a1c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OI2U_Pin) {
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d103      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0x18>
		pin_num = 2;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <HAL_GPIO_EXTI_Callback+0x30>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == OI3D_Pin) {
		pin_num = 3;
	}
}
 8000a32:	e005      	b.n	8000a40 <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == OI3D_Pin) {
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	2b40      	cmp	r3, #64	@ 0x40
 8000a38:	d102      	bne.n	8000a40 <HAL_GPIO_EXTI_Callback+0x24>
		pin_num = 3;
 8000a3a:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <HAL_GPIO_EXTI_Callback+0x30>)
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	701a      	strb	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	2000021b 	.word	0x2000021b

08000a50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	// IF htim2 has fully run once, it will check if there are any destination
	if (htim->Instance == TIM2 && start_timer == 1) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a60:	d15c      	bne.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0xcc>
 8000a62:	4b30      	ldr	r3, [pc, #192]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d158      	bne.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0xcc>
		// IF no destinations, the elevator has finished serving the floor in the serving variable
		if (!floor_destinations[0]) {
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d121      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x66>
			// IF there are no other requests, stop moving the elevator
			if (!requests[0] && !serving) {
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10d      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x46>
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d109      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x46>
				sprintf(msg, "NOTHING TO DO\r\n");
 8000a82:	492c      	ldr	r1, [pc, #176]	@ (8000b34 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a84:	482c      	ldr	r0, [pc, #176]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a86:	f003 ff19 	bl	80048bc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, 15, 100);
 8000a8a:	2364      	movs	r3, #100	@ 0x64
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	492a      	ldr	r1, [pc, #168]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a90:	482a      	ldr	r0, [pc, #168]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a92:	f003 fb37 	bl	8004104 <HAL_UART_Transmit>
			}

			// reset the serving variable and the LED corresponding to the elevator_direction variable
			serving = 0;
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 8000a9c:	4b28      	ldr	r3, [pc, #160]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b75      	cmp	r3, #117	@ 0x75
 8000aa2:	d101      	bne.n	8000aa8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000aa4:	2340      	movs	r3, #64	@ 0x40
 8000aa6:	e000      	b.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4825      	ldr	r0, [pc, #148]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ab0:	f001 fa3a 	bl	8001f28 <HAL_GPIO_WritePin>
				floor_destinations[1] = temp;
			}
			HAL_TIM_Base_Start_IT(&htim6);
		}
	}
}
 8000ab4:	e032      	b.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0xcc>
		  else if (floor_destinations[1] == 0) {
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ab8:	785b      	ldrb	r3, [r3, #1]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10f      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 8000abe:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b75      	cmp	r3, #117	@ 0x75
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000ac6:	2340      	movs	r3, #64	@ 0x40
 8000ac8:	e000      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000aca:	2380      	movs	r3, #128	@ 0x80
 8000acc:	2201      	movs	r2, #1
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481c      	ldr	r0, [pc, #112]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ad2:	f001 fa29 	bl	8001f28 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Start_IT(&htim6);
 8000ad6:	481c      	ldr	r0, [pc, #112]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000ad8:	f002 feb8 	bl	800384c <HAL_TIM_Base_Start_IT>
}
 8000adc:	e01e      	b.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0xcc>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b75      	cmp	r3, #117	@ 0x75
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000ae6:	2340      	movs	r3, #64	@ 0x40
 8000ae8:	e000      	b.n	8000aec <HAL_TIM_PeriodElapsedCallback+0x9c>
 8000aea:	2380      	movs	r3, #128	@ 0x80
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000af2:	f001 fa19 	bl	8001f28 <HAL_GPIO_WritePin>
			if (floor_destinations[0] - floor_position > floor_destinations[1] - floor_position) {
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000afc:	785b      	ldrb	r3, [r3, #1]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d909      	bls.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0xc6>
				uint8_t temp = floor_destinations[0];
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	73fb      	strb	r3, [r7, #15]
				floor_destinations[0] = floor_destinations[1];
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b0a:	785a      	ldrb	r2, [r3, #1]
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b0e:	701a      	strb	r2, [r3, #0]
				floor_destinations[1] = temp;
 8000b10:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	7053      	strb	r3, [r2, #1]
			HAL_TIM_Base_Start_IT(&htim6);
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b18:	f002 fe98 	bl	800384c <HAL_TIM_Base_Start_IT>
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000021d 	.word	0x2000021d
 8000b28:	20000214 	.word	0x20000214
 8000b2c:	20000218 	.word	0x20000218
 8000b30:	2000021c 	.word	0x2000021c
 8000b34:	0800521c 	.word	0x0800521c
 8000b38:	200001e4 	.word	0x200001e4
 8000b3c:	2000015c 	.word	0x2000015c
 8000b40:	20000212 	.word	0x20000212
 8000b44:	48000800 	.word	0x48000800
 8000b48:	200000c4 	.word	0x200000c4

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a08      	ldr	r2, [pc, #32]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb0:	d114      	bne.n	8000bdc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb2:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a25      	ldr	r2, [pc, #148]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	201c      	movs	r0, #28
 8000bd0:	f000 ffe9 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bd4:	201c      	movs	r0, #28
 8000bd6:	f001 f802 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000bda:	e032      	b.n	8000c42 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <HAL_TIM_Base_MspInit+0xb0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d114      	bne.n	8000c10 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000be6:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a18      	ldr	r2, [pc, #96]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2036      	movs	r0, #54	@ 0x36
 8000c04:	f000 ffcf 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c08:	2036      	movs	r0, #54	@ 0x36
 8000c0a:	f000 ffe8 	bl	8001bde <HAL_NVIC_EnableIRQ>
}
 8000c0e:	e018      	b.n	8000c42 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM15)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <HAL_TIM_Base_MspInit+0xb4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d113      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <HAL_TIM_Base_MspInit+0xac>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2018      	movs	r0, #24
 8000c38:	f000 ffb5 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c3c:	2018      	movs	r0, #24
 8000c3e:	f000 ffce 	bl	8001bde <HAL_NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40001000 	.word	0x40001000
 8000c54:	40014000 	.word	0x40014000

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a17      	ldr	r2, [pc, #92]	@ (8000cd4 <HAL_UART_MspInit+0x7c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d128      	bne.n	8000ccc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a16      	ldr	r2, [pc, #88]	@ (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_UART_MspInit+0x80>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000caa:	230c      	movs	r3, #12
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc8:	f000 ffa4 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	@ 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40021000 	.word	0x40021000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d32:	f000 fe19 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	// FUNCTION SETS FLOOR 1 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	e002      	b.n	8000d4e <EXTI0_IRQHandler+0x12>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000d54:	4293      	cmp	r3, r2
 8000d56:	ddf7      	ble.n	8000d48 <EXTI0_IRQHandler+0xc>
	// IF button for choosing floor 1 as a destination is pressed
	if(HAL_GPIO_ReadPin(II1_GPIO_Port, II1_Pin)) {
 8000d58:	2101      	movs	r1, #1
 8000d5a:	481d      	ldr	r0, [pc, #116]	@ (8000dd0 <EXTI0_IRQHandler+0x94>)
 8000d5c:	f001 f8cc 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d02c      	beq.n	8000dc0 <EXTI0_IRQHandler+0x84>
		// IF the current floor_position is not 1 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 1 && serving && !traveling) {
 8000d66:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <EXTI0_IRQHandler+0x98>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d028      	beq.n	8000dc0 <EXTI0_IRQHandler+0x84>
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <EXTI0_IRQHandler+0x9c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d024      	beq.n	8000dc0 <EXTI0_IRQHandler+0x84>
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <EXTI0_IRQHandler+0xa0>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d120      	bne.n	8000dc0 <EXTI0_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <EXTI0_IRQHandler+0xa4>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d110      	bne.n	8000da8 <EXTI0_IRQHandler+0x6c>
				floor_destinations[0] = 1;
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <EXTI0_IRQHandler+0xa4>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2108      	movs	r1, #8
 8000d90:	4814      	ldr	r0, [pc, #80]	@ (8000de4 <EXTI0_IRQHandler+0xa8>)
 8000d92:	f001 f8c9 	bl	8001f28 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <EXTI0_IRQHandler+0xac>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d110      	bne.n	8000dc0 <EXTI0_IRQHandler+0x84>
 8000d9e:	4913      	ldr	r1, [pc, #76]	@ (8000dec <EXTI0_IRQHandler+0xb0>)
 8000da0:	2001      	movs	r0, #1
 8000da2:	f000 fce3 	bl	800176c <Reset_Timer>
 8000da6:	e00b      	b.n	8000dc0 <EXTI0_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  // (There are only at most 2 possible floors to set as a destination, overwriting can never occur)
			  else if (floor_destinations[0] != 1 /* !floor_destinations[1] */) {
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <EXTI0_IRQHandler+0xa4>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d007      	beq.n	8000dc0 <EXTI0_IRQHandler+0x84>
				floor_destinations[1] = 1;
 8000db0:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <EXTI0_IRQHandler+0xa4>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2108      	movs	r1, #8
 8000dba:	480a      	ldr	r0, [pc, #40]	@ (8000de4 <EXTI0_IRQHandler+0xa8>)
 8000dbc:	f001 f8b4 	bl	8001f28 <HAL_GPIO_WritePin>
//				return;
//			}
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II1_Pin);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f001 f8e3 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	20000213 	.word	0x20000213
 8000dd8:	2000021c 	.word	0x2000021c
 8000ddc:	2000021e 	.word	0x2000021e
 8000de0:	20000214 	.word	0x20000214
 8000de4:	48000800 	.word	0x48000800
 8000de8:	20000218 	.word	0x20000218
 8000dec:	20000078 	.word	0x20000078

08000df0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// FUNCTION SETS FLOOR 2 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	e002      	b.n	8000e02 <EXTI1_IRQHandler+0x12>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	ddf7      	ble.n	8000dfc <EXTI1_IRQHandler+0xc>
	// IF button for choosing floor 2 as a destination is pressed
	if(HAL_GPIO_ReadPin(II2_GPIO_Port, II2_Pin)) {
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	481d      	ldr	r0, [pc, #116]	@ (8000e84 <EXTI1_IRQHandler+0x94>)
 8000e10:	f001 f872 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d02c      	beq.n	8000e74 <EXTI1_IRQHandler+0x84>
		// IF the current floor_position is not 2 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 2 && serving && !traveling) {
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <EXTI1_IRQHandler+0x98>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d028      	beq.n	8000e74 <EXTI1_IRQHandler+0x84>
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <EXTI1_IRQHandler+0x9c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d024      	beq.n	8000e74 <EXTI1_IRQHandler+0x84>
 8000e2a:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <EXTI1_IRQHandler+0xa0>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d120      	bne.n	8000e74 <EXTI1_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <EXTI1_IRQHandler+0xa4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d110      	bne.n	8000e5c <EXTI1_IRQHandler+0x6c>
				floor_destinations[0] = 2;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <EXTI1_IRQHandler+0xa4>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2110      	movs	r1, #16
 8000e44:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <EXTI1_IRQHandler+0xa8>)
 8000e46:	f001 f86f 	bl	8001f28 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <EXTI1_IRQHandler+0xac>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d110      	bne.n	8000e74 <EXTI1_IRQHandler+0x84>
 8000e52:	4913      	ldr	r1, [pc, #76]	@ (8000ea0 <EXTI1_IRQHandler+0xb0>)
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 fc89 	bl	800176c <Reset_Timer>
 8000e5a:	e00b      	b.n	8000e74 <EXTI1_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  else if (floor_destinations[0] != 2){
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <EXTI1_IRQHandler+0xa4>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d007      	beq.n	8000e74 <EXTI1_IRQHandler+0x84>
				floor_destinations[1] = 2;
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <EXTI1_IRQHandler+0xa4>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	480a      	ldr	r0, [pc, #40]	@ (8000e98 <EXTI1_IRQHandler+0xa8>)
 8000e70:	f001 f85a 	bl	8001f28 <HAL_GPIO_WritePin>
//				  return;
//			  }
		}
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II2_Pin);
 8000e74:	2002      	movs	r0, #2
 8000e76:	f001 f889 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	48000400 	.word	0x48000400
 8000e88:	20000213 	.word	0x20000213
 8000e8c:	2000021c 	.word	0x2000021c
 8000e90:	2000021e 	.word	0x2000021e
 8000e94:	20000214 	.word	0x20000214
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	20000218 	.word	0x20000218
 8000ea0:	20000078 	.word	0x20000078

08000ea4 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
	// FUNCTION SET FLOOR 3 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e002      	b.n	8000eb6 <EXTI2_TSC_IRQHandler+0x12>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	ddf7      	ble.n	8000eb0 <EXTI2_TSC_IRQHandler+0xc>
	// IF button for choosing floor 3 as a destination is pressed
	if(HAL_GPIO_ReadPin(II3_GPIO_Port, II3_Pin)) {
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	481d      	ldr	r0, [pc, #116]	@ (8000f38 <EXTI2_TSC_IRQHandler+0x94>)
 8000ec4:	f001 f818 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d02c      	beq.n	8000f28 <EXTI2_TSC_IRQHandler+0x84>
		// IF the current floor_position is not 2 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 3 && serving && !traveling) {
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <EXTI2_TSC_IRQHandler+0x98>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d028      	beq.n	8000f28 <EXTI2_TSC_IRQHandler+0x84>
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <EXTI2_TSC_IRQHandler+0x9c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d024      	beq.n	8000f28 <EXTI2_TSC_IRQHandler+0x84>
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <EXTI2_TSC_IRQHandler+0xa0>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d120      	bne.n	8000f28 <EXTI2_TSC_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <EXTI2_TSC_IRQHandler+0xa4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d110      	bne.n	8000f10 <EXTI2_TSC_IRQHandler+0x6c>
				floor_destinations[0] = 3;
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <EXTI2_TSC_IRQHandler+0xa4>)
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <EXTI2_TSC_IRQHandler+0xa8>)
 8000efa:	f001 f815 	bl	8001f28 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000efe:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <EXTI2_TSC_IRQHandler+0xac>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d110      	bne.n	8000f28 <EXTI2_TSC_IRQHandler+0x84>
 8000f06:	4913      	ldr	r1, [pc, #76]	@ (8000f54 <EXTI2_TSC_IRQHandler+0xb0>)
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f000 fc2f 	bl	800176c <Reset_Timer>
 8000f0e:	e00b      	b.n	8000f28 <EXTI2_TSC_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  else if (floor_destinations[0] != 3) {
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <EXTI2_TSC_IRQHandler+0xa4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d007      	beq.n	8000f28 <EXTI2_TSC_IRQHandler+0x84>
				floor_destinations[1] = 3;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <EXTI2_TSC_IRQHandler+0xa4>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2120      	movs	r1, #32
 8000f22:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <EXTI2_TSC_IRQHandler+0xa8>)
 8000f24:	f001 f800 	bl	8001f28 <HAL_GPIO_WritePin>
//				  return;
//			  }
		}
	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II3_Pin);
 8000f28:	2004      	movs	r0, #4
 8000f2a:	f001 f82f 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	20000213 	.word	0x20000213
 8000f40:	2000021c 	.word	0x2000021c
 8000f44:	2000021e 	.word	0x2000021e
 8000f48:	20000214 	.word	0x20000214
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	20000218 	.word	0x20000218
 8000f54:	20000078 	.word	0x20000078

08000f58 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	// FUNCTION REQUESTS FLOOR 1

	for (int i = 0; i < 65535; i++);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e002      	b.n	8000f6a <EXTI3_IRQHandler+0x12>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f70:	4293      	cmp	r3, r2
 8000f72:	ddf7      	ble.n	8000f64 <EXTI3_IRQHandler+0xc>
	// IF button for choosing floor 1 as a request is pressed
	if(HAL_GPIO_ReadPin(OI1U_GPIO_Port, OI1U_Pin)) {
 8000f74:	2108      	movs	r1, #8
 8000f76:	4826      	ldr	r0, [pc, #152]	@ (8001010 <EXTI3_IRQHandler+0xb8>)
 8000f78:	f000 ffbe 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d03e      	beq.n	8001000 <EXTI3_IRQHandler+0xa8>
		uint8_t i = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	70fb      	strb	r3, [r7, #3]
		while (requests[i]) i++;
 8000f86:	e002      	b.n	8000f8e <EXTI3_IRQHandler+0x36>
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	70fb      	strb	r3, [r7, #3]
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	4a20      	ldr	r2, [pc, #128]	@ (8001014 <EXTI3_IRQHandler+0xbc>)
 8000f92:	5cd3      	ldrb	r3, [r2, r3]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f7      	bne.n	8000f88 <EXTI3_IRQHandler+0x30>

		// IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		if ((!floor_requests[0].requested || serving == 1) && (!(i == 0 && serving == 1) && !(i > 0 && requests[i - 1] == 1))) {
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <EXTI3_IRQHandler+0xc0>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <EXTI3_IRQHandler+0x50>
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <EXTI3_IRQHandler+0xc4>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d12b      	bne.n	8001000 <EXTI3_IRQHandler+0xa8>
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <EXTI3_IRQHandler+0x5e>
 8000fae:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <EXTI3_IRQHandler+0xc4>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d024      	beq.n	8001000 <EXTI3_IRQHandler+0xa8>
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <EXTI3_IRQHandler+0x70>
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <EXTI3_IRQHandler+0xbc>)
 8000fc2:	5cd3      	ldrb	r3, [r2, r3]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d01b      	beq.n	8001000 <EXTI3_IRQHandler+0xa8>
			floor_requests[0].requested = 1;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <EXTI3_IRQHandler+0xc0>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
			floor_requests[0].direction = 'u';
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <EXTI3_IRQHandler+0xc0>)
 8000fd0:	2275      	movs	r2, #117	@ 0x75
 8000fd2:	705a      	strb	r2, [r3, #1]
			requests[i] = 1;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <EXTI3_IRQHandler+0xbc>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	54d1      	strb	r1, [r2, r3]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <EXTI3_IRQHandler+0xc4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <EXTI3_IRQHandler+0x9c>
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <EXTI3_IRQHandler+0xc8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <EXTI3_IRQHandler+0x9c>
				Reset_Timer(1, &htim2);
 8000fec:	490d      	ldr	r1, [pc, #52]	@ (8001024 <EXTI3_IRQHandler+0xcc>)
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 fbbc 	bl	800176c <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ffa:	480b      	ldr	r0, [pc, #44]	@ (8001028 <EXTI3_IRQHandler+0xd0>)
 8000ffc:	f000 ff94 	bl	8001f28 <HAL_GPIO_WritePin>
		}
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI1U_Pin);
 8001000:	2008      	movs	r0, #8
 8001002:	f000 ffc3 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	48000400 	.word	0x48000400
 8001014:	20000218 	.word	0x20000218
 8001018:	2000020c 	.word	0x2000020c
 800101c:	2000021c 	.word	0x2000021c
 8001020:	20000214 	.word	0x20000214
 8001024:	20000078 	.word	0x20000078
 8001028:	48000800 	.word	0x48000800

0800102c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// FUNCTION REQUESTS FLOOR 2

	for (int i = 0; i < 65535; i++);
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e002      	b.n	800103e <EXTI4_IRQHandler+0x12>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001044:	4293      	cmp	r3, r2
 8001046:	ddf7      	ble.n	8001038 <EXTI4_IRQHandler+0xc>
	// IF button for choosing floor 2 as a request is pressed
	if(HAL_GPIO_ReadPin(OI2D_GPIO_Port, OI2D_Pin)) {
 8001048:	2110      	movs	r1, #16
 800104a:	4826      	ldr	r0, [pc, #152]	@ (80010e4 <EXTI4_IRQHandler+0xb8>)
 800104c:	f000 ff54 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d03e      	beq.n	80010d4 <EXTI4_IRQHandler+0xa8>
		uint8_t i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	70fb      	strb	r3, [r7, #3]
		while (requests[i]) i++;
 800105a:	e002      	b.n	8001062 <EXTI4_IRQHandler+0x36>
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	3301      	adds	r3, #1
 8001060:	70fb      	strb	r3, [r7, #3]
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	4a20      	ldr	r2, [pc, #128]	@ (80010e8 <EXTI4_IRQHandler+0xbc>)
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f7      	bne.n	800105c <EXTI4_IRQHandler+0x30>

		// IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		if ((!floor_requests[1].requested || serving == 2) && (!(i == 0 && serving == 2) && !(i > 0 && requests[i - 1] == 2))) {
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <EXTI4_IRQHandler+0xc0>)
 800106e:	789b      	ldrb	r3, [r3, #2]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <EXTI4_IRQHandler+0x50>
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <EXTI4_IRQHandler+0xc4>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d12b      	bne.n	80010d4 <EXTI4_IRQHandler+0xa8>
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d103      	bne.n	800108a <EXTI4_IRQHandler+0x5e>
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <EXTI4_IRQHandler+0xc4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d024      	beq.n	80010d4 <EXTI4_IRQHandler+0xa8>
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <EXTI4_IRQHandler+0x70>
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	3b01      	subs	r3, #1
 8001094:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <EXTI4_IRQHandler+0xbc>)
 8001096:	5cd3      	ldrb	r3, [r2, r3]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d01b      	beq.n	80010d4 <EXTI4_IRQHandler+0xa8>
			floor_requests[1].requested = 1;
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <EXTI4_IRQHandler+0xc0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	709a      	strb	r2, [r3, #2]
			floor_requests[1].direction = 'd';
 80010a2:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <EXTI4_IRQHandler+0xc0>)
 80010a4:	2264      	movs	r2, #100	@ 0x64
 80010a6:	70da      	strb	r2, [r3, #3]
			requests[i] = 2;
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <EXTI4_IRQHandler+0xbc>)
 80010ac:	2102      	movs	r1, #2
 80010ae:	54d1      	strb	r1, [r2, r3]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <EXTI4_IRQHandler+0xc4>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <EXTI4_IRQHandler+0x9c>
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <EXTI4_IRQHandler+0xc8>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d103      	bne.n	80010c8 <EXTI4_IRQHandler+0x9c>
				Reset_Timer(1, &htim2);
 80010c0:	490d      	ldr	r1, [pc, #52]	@ (80010f8 <EXTI4_IRQHandler+0xcc>)
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fb52 	bl	800176c <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ce:	480b      	ldr	r0, [pc, #44]	@ (80010fc <EXTI4_IRQHandler+0xd0>)
 80010d0:	f000 ff2a 	bl	8001f28 <HAL_GPIO_WritePin>
		}
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI2D_Pin);
 80010d4:	2010      	movs	r0, #16
 80010d6:	f000 ff59 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	48000400 	.word	0x48000400
 80010e8:	20000218 	.word	0x20000218
 80010ec:	2000020c 	.word	0x2000020c
 80010f0:	2000021c 	.word	0x2000021c
 80010f4:	20000214 	.word	0x20000214
 80010f8:	20000078 	.word	0x20000078
 80010fc:	48000800 	.word	0x48000800

08001100 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI2U_Pin);
 8001106:	2020      	movs	r0, #32
 8001108:	f000 ff40 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OI3D_Pin);
 800110c:	2040      	movs	r0, #64	@ 0x40
 800110e:	f000 ff3d 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  // FUNCTION REQUESTS FLOOR 2 AND FLOOR 3

  // IF button for choosing floor 2 is pressed
    if(pin_num == 2) {
 8001112:	4b45      	ldr	r3, [pc, #276]	@ (8001228 <EXTI9_5_IRQHandler+0x128>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d13f      	bne.n	800119a <EXTI9_5_IRQHandler+0x9a>
	    uint8_t i = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]
		while (requests[i]) i++;
 800111e:	e002      	b.n	8001126 <EXTI9_5_IRQHandler+0x26>
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	3301      	adds	r3, #1
 8001124:	71fb      	strb	r3, [r7, #7]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4a40      	ldr	r2, [pc, #256]	@ (800122c <EXTI9_5_IRQHandler+0x12c>)
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f7      	bne.n	8001120 <EXTI9_5_IRQHandler+0x20>

		// IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		if ((!floor_requests[1].requested || serving == 2) && (!(i == 0 && serving == 2) && !(i > 0 && requests[i - 1] == 2))) {
 8001130:	4b3f      	ldr	r3, [pc, #252]	@ (8001230 <EXTI9_5_IRQHandler+0x130>)
 8001132:	789b      	ldrb	r3, [r3, #2]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <EXTI9_5_IRQHandler+0x40>
 8001138:	4b3e      	ldr	r3, [pc, #248]	@ (8001234 <EXTI9_5_IRQHandler+0x134>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d16f      	bne.n	8001220 <EXTI9_5_IRQHandler+0x120>
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <EXTI9_5_IRQHandler+0x4e>
 8001146:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <EXTI9_5_IRQHandler+0x134>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d068      	beq.n	8001220 <EXTI9_5_IRQHandler+0x120>
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <EXTI9_5_IRQHandler+0x60>
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a34      	ldr	r2, [pc, #208]	@ (800122c <EXTI9_5_IRQHandler+0x12c>)
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d05f      	beq.n	8001220 <EXTI9_5_IRQHandler+0x120>
			floor_requests[1].requested = 1;
 8001160:	4b33      	ldr	r3, [pc, #204]	@ (8001230 <EXTI9_5_IRQHandler+0x130>)
 8001162:	2201      	movs	r2, #1
 8001164:	709a      	strb	r2, [r3, #2]
			floor_requests[1].direction = 'u';
 8001166:	4b32      	ldr	r3, [pc, #200]	@ (8001230 <EXTI9_5_IRQHandler+0x130>)
 8001168:	2275      	movs	r2, #117	@ 0x75
 800116a:	70da      	strb	r2, [r3, #3]
			requests[i] = 2;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4a2f      	ldr	r2, [pc, #188]	@ (800122c <EXTI9_5_IRQHandler+0x12c>)
 8001170:	2102      	movs	r1, #2
 8001172:	54d1      	strb	r1, [r2, r3]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 8001174:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <EXTI9_5_IRQHandler+0x134>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <EXTI9_5_IRQHandler+0x8c>
 800117c:	4b2e      	ldr	r3, [pc, #184]	@ (8001238 <EXTI9_5_IRQHandler+0x138>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <EXTI9_5_IRQHandler+0x8c>
				Reset_Timer(1, &htim2);
 8001184:	492d      	ldr	r1, [pc, #180]	@ (800123c <EXTI9_5_IRQHandler+0x13c>)
 8001186:	2001      	movs	r0, #1
 8001188:	f000 faf0 	bl	800176c <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001192:	482b      	ldr	r0, [pc, #172]	@ (8001240 <EXTI9_5_IRQHandler+0x140>)
 8001194:	f000 fec8 	bl	8001f28 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
		}
	}
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001198:	e042      	b.n	8001220 <EXTI9_5_IRQHandler+0x120>
      else if (pin_num == 3) {
 800119a:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <EXTI9_5_IRQHandler+0x128>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d13e      	bne.n	8001220 <EXTI9_5_IRQHandler+0x120>
		uint8_t i = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71bb      	strb	r3, [r7, #6]
		while (requests[i]) i++;
 80011a6:	e002      	b.n	80011ae <EXTI9_5_IRQHandler+0xae>
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	3301      	adds	r3, #1
 80011ac:	71bb      	strb	r3, [r7, #6]
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <EXTI9_5_IRQHandler+0x12c>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f7      	bne.n	80011a8 <EXTI9_5_IRQHandler+0xa8>
		if ((!floor_requests[2].requested || serving == 3) && (!(i == 0 && serving == 3) && !(i > 0 && requests[i - 1] == 3))) {
 80011b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <EXTI9_5_IRQHandler+0x130>)
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <EXTI9_5_IRQHandler+0xc8>
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <EXTI9_5_IRQHandler+0x134>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d12b      	bne.n	8001220 <EXTI9_5_IRQHandler+0x120>
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d103      	bne.n	80011d6 <EXTI9_5_IRQHandler+0xd6>
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <EXTI9_5_IRQHandler+0x134>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d024      	beq.n	8001220 <EXTI9_5_IRQHandler+0x120>
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <EXTI9_5_IRQHandler+0xe8>
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	3b01      	subs	r3, #1
 80011e0:	4a12      	ldr	r2, [pc, #72]	@ (800122c <EXTI9_5_IRQHandler+0x12c>)
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d01b      	beq.n	8001220 <EXTI9_5_IRQHandler+0x120>
			floor_requests[2].requested = 1;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <EXTI9_5_IRQHandler+0x130>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	711a      	strb	r2, [r3, #4]
			floor_requests[2].direction = 'u';
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <EXTI9_5_IRQHandler+0x130>)
 80011f0:	2275      	movs	r2, #117	@ 0x75
 80011f2:	715a      	strb	r2, [r3, #5]
			requests[i] = 3;
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <EXTI9_5_IRQHandler+0x12c>)
 80011f8:	2103      	movs	r1, #3
 80011fa:	54d1      	strb	r1, [r2, r3]
			if (serving && !floor_destinations[0]) {
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <EXTI9_5_IRQHandler+0x134>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <EXTI9_5_IRQHandler+0x114>
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <EXTI9_5_IRQHandler+0x138>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d103      	bne.n	8001214 <EXTI9_5_IRQHandler+0x114>
				Reset_Timer(1, &htim2);
 800120c:	490b      	ldr	r1, [pc, #44]	@ (800123c <EXTI9_5_IRQHandler+0x13c>)
 800120e:	2001      	movs	r0, #1
 8001210:	f000 faac 	bl	800176c <Reset_Timer>
			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121a:	4809      	ldr	r0, [pc, #36]	@ (8001240 <EXTI9_5_IRQHandler+0x140>)
 800121c:	f000 fe84 	bl	8001f28 <HAL_GPIO_WritePin>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000021b 	.word	0x2000021b
 800122c:	20000218 	.word	0x20000218
 8001230:	2000020c 	.word	0x2000020c
 8001234:	2000021c 	.word	0x2000021c
 8001238:	20000214 	.word	0x20000214
 800123c:	20000078 	.word	0x20000078
 8001240:	48000800 	.word	0x48000800

08001244 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	count++;
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001252:	701a      	strb	r2, [r3, #0]
	if (count == 15 || (count < 10 && count % 2 == 1)) {
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d00a      	beq.n	8001272 <TIM1_BRK_TIM15_IRQHandler+0x2e>
 800125c:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b09      	cmp	r3, #9
 8001262:	d80b      	bhi.n	800127c <TIM1_BRK_TIM15_IRQHandler+0x38>
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <TIM1_BRK_TIM15_IRQHandler+0x38>
		HAL_GPIO_TogglePin(BCDI_GPIO_Port, BCDI_Pin);
 8001272:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001276:	4808      	ldr	r0, [pc, #32]	@ (8001298 <TIM1_BRK_TIM15_IRQHandler+0x54>)
 8001278:	f000 fe6e 	bl	8001f58 <HAL_GPIO_TogglePin>
	}

	if (count == 18) 	count = 0;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d102      	bne.n	800128a <TIM1_BRK_TIM15_IRQHandler+0x46>
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800128a:	4804      	ldr	r0, [pc, #16]	@ (800129c <TIM1_BRK_TIM15_IRQHandler+0x58>)
 800128c:	f002 fb61 	bl	8003952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000021f 	.word	0x2000021f
 8001298:	48000800 	.word	0x48000800
 800129c:	20000110 	.word	0x20000110

080012a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a4:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <TIM2_IRQHandler+0x50>)
 80012a6:	f002 fb54 	bl	8003952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (start_timer) {
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <TIM2_IRQHandler+0x54>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00f      	beq.n	80012d2 <TIM2_IRQHandler+0x32>
  		start_timer = 0;
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <TIM2_IRQHandler+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
  		HAL_TIM_Base_Stop_IT(&htim2);
 80012b8:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <TIM2_IRQHandler+0x50>)
 80012ba:	f002 fb1b 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
  		HAL_TIM_Base_Stop_IT(&htim15);
 80012be:	480e      	ldr	r0, [pc, #56]	@ (80012f8 <TIM2_IRQHandler+0x58>)
 80012c0:	f002 fb18 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
  		HAL_GPIO_WritePin(BCDI_GPIO_Port, BCDI_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ca:	480c      	ldr	r0, [pc, #48]	@ (80012fc <TIM2_IRQHandler+0x5c>)
 80012cc:	f000 fe2c 	bl	8001f28 <HAL_GPIO_WritePin>
  		start_timer = 1;
  		sprintf(msgs, "HURRY UP TIMER STARTING\r\n");
  		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 25, 100);
  	}
  /* USER CODE END TIM2_IRQn 1 */
}
 80012d0:	e00c      	b.n	80012ec <TIM2_IRQHandler+0x4c>
  		start_timer = 1;
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <TIM2_IRQHandler+0x54>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
  		sprintf(msgs, "HURRY UP TIMER STARTING\r\n");
 80012d8:	4909      	ldr	r1, [pc, #36]	@ (8001300 <TIM2_IRQHandler+0x60>)
 80012da:	480a      	ldr	r0, [pc, #40]	@ (8001304 <TIM2_IRQHandler+0x64>)
 80012dc:	f003 faee 	bl	80048bc <siprintf>
  		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 25, 100);
 80012e0:	2364      	movs	r3, #100	@ 0x64
 80012e2:	2219      	movs	r2, #25
 80012e4:	4907      	ldr	r1, [pc, #28]	@ (8001304 <TIM2_IRQHandler+0x64>)
 80012e6:	4808      	ldr	r0, [pc, #32]	@ (8001308 <TIM2_IRQHandler+0x68>)
 80012e8:	f002 ff0c 	bl	8004104 <HAL_UART_Transmit>
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000078 	.word	0x20000078
 80012f4:	2000021d 	.word	0x2000021d
 80012f8:	20000110 	.word	0x20000110
 80012fc:	48000800 	.word	0x48000800
 8001300:	0800522c 	.word	0x0800522c
 8001304:	20000224 	.word	0x20000224
 8001308:	2000015c 	.word	0x2000015c

0800130c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
//	for (int i = 0; i < 65535; i++);
//	if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
//		on = 1;
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001310:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001314:	f000 fe3a 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (elevator_moving_counter < 3) {
 8001322:	4b95      	ldr	r3, [pc, #596]	@ (8001578 <TIM6_DAC_IRQHandler+0x25c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d81d      	bhi.n	8001366 <TIM6_DAC_IRQHandler+0x4a>
//			case 2:
//				HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
//				break;
//			}
//		}
		sprintf(msgs, "MOVING TO FLOOR %d FROM FLOOR %d\r\n", elevator_direction == 'u' ? floor_position + 1 : floor_position - 1, floor_position);
 800132a:	4b94      	ldr	r3, [pc, #592]	@ (800157c <TIM6_DAC_IRQHandler+0x260>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b75      	cmp	r3, #117	@ 0x75
 8001330:	d103      	bne.n	800133a <TIM6_DAC_IRQHandler+0x1e>
 8001332:	4b93      	ldr	r3, [pc, #588]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	e002      	b.n	8001340 <TIM6_DAC_IRQHandler+0x24>
 800133a:	4b91      	ldr	r3, [pc, #580]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	1e5a      	subs	r2, r3, #1
 8001340:	4b8f      	ldr	r3, [pc, #572]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	498f      	ldr	r1, [pc, #572]	@ (8001584 <TIM6_DAC_IRQHandler+0x268>)
 8001346:	4890      	ldr	r0, [pc, #576]	@ (8001588 <TIM6_DAC_IRQHandler+0x26c>)
 8001348:	f003 fab8 	bl	80048bc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 32, 100);
 800134c:	2364      	movs	r3, #100	@ 0x64
 800134e:	2220      	movs	r2, #32
 8001350:	498d      	ldr	r1, [pc, #564]	@ (8001588 <TIM6_DAC_IRQHandler+0x26c>)
 8001352:	488e      	ldr	r0, [pc, #568]	@ (800158c <TIM6_DAC_IRQHandler+0x270>)
 8001354:	f002 fed6 	bl	8004104 <HAL_UART_Transmit>
		elevator_moving_counter++;
 8001358:	4b87      	ldr	r3, [pc, #540]	@ (8001578 <TIM6_DAC_IRQHandler+0x25c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b85      	ldr	r3, [pc, #532]	@ (8001578 <TIM6_DAC_IRQHandler+0x25c>)
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	e1de      	b.n	8001724 <TIM6_DAC_IRQHandler+0x408>
	} else {
		switch (floor_position) {
 8001366:	4b86      	ldr	r3, [pc, #536]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d012      	beq.n	8001394 <TIM6_DAC_IRQHandler+0x78>
 800136e:	2b03      	cmp	r3, #3
 8001370:	dc16      	bgt.n	80013a0 <TIM6_DAC_IRQHandler+0x84>
 8001372:	2b01      	cmp	r3, #1
 8001374:	d002      	beq.n	800137c <TIM6_DAC_IRQHandler+0x60>
 8001376:	2b02      	cmp	r3, #2
 8001378:	d006      	beq.n	8001388 <TIM6_DAC_IRQHandler+0x6c>
 800137a:	e011      	b.n	80013a0 <TIM6_DAC_IRQHandler+0x84>
		case 1:
			HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	4883      	ldr	r0, [pc, #524]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 8001382:	f000 fdd1 	bl	8001f28 <HAL_GPIO_WritePin>
			break;
 8001386:	e00b      	b.n	80013a0 <TIM6_DAC_IRQHandler+0x84>
		case 2:
			HAL_GPIO_WritePin(PF2_GPIO_Port, PF2_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2102      	movs	r1, #2
 800138c:	4880      	ldr	r0, [pc, #512]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 800138e:	f000 fdcb 	bl	8001f28 <HAL_GPIO_WritePin>
			break;
 8001392:	e005      	b.n	80013a0 <TIM6_DAC_IRQHandler+0x84>
		case 3:
			HAL_GPIO_WritePin(PF3_GPIO_Port, PF3_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2104      	movs	r1, #4
 8001398:	487d      	ldr	r0, [pc, #500]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 800139a:	f000 fdc5 	bl	8001f28 <HAL_GPIO_WritePin>
			break;
 800139e:	bf00      	nop
		}
		if (elevator_direction == 'd') {
 80013a0:	4b76      	ldr	r3, [pc, #472]	@ (800157c <TIM6_DAC_IRQHandler+0x260>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b64      	cmp	r3, #100	@ 0x64
 80013a6:	d106      	bne.n	80013b6 <TIM6_DAC_IRQHandler+0x9a>
			floor_position--;
 80013a8:	4b75      	ldr	r3, [pc, #468]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	e005      	b.n	80013c2 <TIM6_DAC_IRQHandler+0xa6>
		} else {
			floor_position++;
 80013b6:	4b72      	ldr	r3, [pc, #456]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b70      	ldr	r3, [pc, #448]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 80013c0:	701a      	strb	r2, [r3, #0]
		}
		switch (floor_position) {
 80013c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d012      	beq.n	80013f0 <TIM6_DAC_IRQHandler+0xd4>
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	dc16      	bgt.n	80013fc <TIM6_DAC_IRQHandler+0xe0>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d002      	beq.n	80013d8 <TIM6_DAC_IRQHandler+0xbc>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d006      	beq.n	80013e4 <TIM6_DAC_IRQHandler+0xc8>
 80013d6:	e011      	b.n	80013fc <TIM6_DAC_IRQHandler+0xe0>
		case 1:
			HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2101      	movs	r1, #1
 80013dc:	486c      	ldr	r0, [pc, #432]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 80013de:	f000 fda3 	bl	8001f28 <HAL_GPIO_WritePin>
			break;
 80013e2:	e00b      	b.n	80013fc <TIM6_DAC_IRQHandler+0xe0>
		case 2:
			HAL_GPIO_WritePin(PF2_GPIO_Port, PF2_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2102      	movs	r1, #2
 80013e8:	4869      	ldr	r0, [pc, #420]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 80013ea:	f000 fd9d 	bl	8001f28 <HAL_GPIO_WritePin>
			break;
 80013ee:	e005      	b.n	80013fc <TIM6_DAC_IRQHandler+0xe0>
		case 3:
			HAL_GPIO_WritePin(PF3_GPIO_Port, PF3_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2104      	movs	r1, #4
 80013f4:	4866      	ldr	r0, [pc, #408]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 80013f6:	f000 fd97 	bl	8001f28 <HAL_GPIO_WritePin>
			break;
 80013fa:	bf00      	nop
		}


		elevator_moving_counter = 0;
 80013fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001578 <TIM6_DAC_IRQHandler+0x25c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
		sprintf(msgs, "ELEVATOR AT FLOOR %d\r\n", floor_position);
 8001402:	4b5f      	ldr	r3, [pc, #380]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4962      	ldr	r1, [pc, #392]	@ (8001594 <TIM6_DAC_IRQHandler+0x278>)
 800140a:	485f      	ldr	r0, [pc, #380]	@ (8001588 <TIM6_DAC_IRQHandler+0x26c>)
 800140c:	f003 fa56 	bl	80048bc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 21, 100);
 8001410:	2364      	movs	r3, #100	@ 0x64
 8001412:	2215      	movs	r2, #21
 8001414:	495c      	ldr	r1, [pc, #368]	@ (8001588 <TIM6_DAC_IRQHandler+0x26c>)
 8001416:	485d      	ldr	r0, [pc, #372]	@ (800158c <TIM6_DAC_IRQHandler+0x270>)
 8001418:	f002 fe74 	bl	8004104 <HAL_UART_Transmit>

		if (floor_position == floor_destinations[0]) { // IF ELEVATOR HAS REACHED FIRST DESTINATION
 800141c:	4b5e      	ldr	r3, [pc, #376]	@ (8001598 <TIM6_DAC_IRQHandler+0x27c>)
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	4b57      	ldr	r3, [pc, #348]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d15f      	bne.n	80014e8 <TIM6_DAC_IRQHandler+0x1cc>
			sprintf(msgs, "DESTINATION AT FLOOR %d REACHED\r\n", floor_position);
 8001428:	4b55      	ldr	r3, [pc, #340]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	495b      	ldr	r1, [pc, #364]	@ (800159c <TIM6_DAC_IRQHandler+0x280>)
 8001430:	4855      	ldr	r0, [pc, #340]	@ (8001588 <TIM6_DAC_IRQHandler+0x26c>)
 8001432:	f003 fa43 	bl	80048bc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 32, 100);
 8001436:	2364      	movs	r3, #100	@ 0x64
 8001438:	2220      	movs	r2, #32
 800143a:	4953      	ldr	r1, [pc, #332]	@ (8001588 <TIM6_DAC_IRQHandler+0x26c>)
 800143c:	4853      	ldr	r0, [pc, #332]	@ (800158c <TIM6_DAC_IRQHandler+0x270>)
 800143e:	f002 fe61 	bl	8004104 <HAL_UART_Transmit>

			switch(floor_position) {
 8001442:	4b4f      	ldr	r3, [pc, #316]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d012      	beq.n	8001470 <TIM6_DAC_IRQHandler+0x154>
 800144a:	2b03      	cmp	r3, #3
 800144c:	dc16      	bgt.n	800147c <TIM6_DAC_IRQHandler+0x160>
 800144e:	2b01      	cmp	r3, #1
 8001450:	d002      	beq.n	8001458 <TIM6_DAC_IRQHandler+0x13c>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d006      	beq.n	8001464 <TIM6_DAC_IRQHandler+0x148>
 8001456:	e011      	b.n	800147c <TIM6_DAC_IRQHandler+0x160>
			case 1:
				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2108      	movs	r1, #8
 800145c:	484c      	ldr	r0, [pc, #304]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 800145e:	f000 fd63 	bl	8001f28 <HAL_GPIO_WritePin>
				break;
 8001462:	e00b      	b.n	800147c <TIM6_DAC_IRQHandler+0x160>
			case 2:
				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	4849      	ldr	r0, [pc, #292]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 800146a:	f000 fd5d 	bl	8001f28 <HAL_GPIO_WritePin>
				break;
 800146e:	e005      	b.n	800147c <TIM6_DAC_IRQHandler+0x160>
			case 3:
				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2120      	movs	r1, #32
 8001474:	4846      	ldr	r0, [pc, #280]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 8001476:	f000 fd57 	bl	8001f28 <HAL_GPIO_WritePin>
				break;
 800147a:	bf00      	nop
			}

			HAL_GPIO_WritePin(elevator_direction == 'u' ? DU_GPIO_Port : DD_GPIO_Port, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 800147c:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <TIM6_DAC_IRQHandler+0x260>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b75      	cmp	r3, #117	@ 0x75
 8001482:	d101      	bne.n	8001488 <TIM6_DAC_IRQHandler+0x16c>
 8001484:	2340      	movs	r3, #64	@ 0x40
 8001486:	e000      	b.n	800148a <TIM6_DAC_IRQHandler+0x16e>
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	4840      	ldr	r0, [pc, #256]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 8001490:	f000 fd4a 	bl	8001f28 <HAL_GPIO_WritePin>
			if (floor_destinations[1] == 0) { // IF THERE ARE NO OTHER FLOOR DESTINATION REQUESTS
 8001494:	4b40      	ldr	r3, [pc, #256]	@ (8001598 <TIM6_DAC_IRQHandler+0x27c>)
 8001496:	785b      	ldrb	r3, [r3, #1]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <TIM6_DAC_IRQHandler+0x188>
				floor_destinations[0] = 0;
 800149c:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <TIM6_DAC_IRQHandler+0x27c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e006      	b.n	80014b2 <TIM6_DAC_IRQHandler+0x196>

			} else { // IF THERE IS ANOTHER FLOOR DESTINATION REQUEST
				floor_destinations[0] = floor_destinations[1];
 80014a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001598 <TIM6_DAC_IRQHandler+0x27c>)
 80014a6:	785a      	ldrb	r2, [r3, #1]
 80014a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <TIM6_DAC_IRQHandler+0x27c>)
 80014aa:	701a      	strb	r2, [r3, #0]
				floor_destinations[1] = 0;
 80014ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001598 <TIM6_DAC_IRQHandler+0x27c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	705a      	strb	r2, [r3, #1]

				// CHECK FOR ANY INPUTS INSIDE ELEVATOR, ONLY ALLOW TO GO IN THE CURRENT DIRECTION
			}
			HAL_TIM_Base_Stop_IT(&htim2);
 80014b2:	483b      	ldr	r0, [pc, #236]	@ (80015a0 <TIM6_DAC_IRQHandler+0x284>)
 80014b4:	f002 fa1e 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
			start_timer = 0;
 80014b8:	4b3a      	ldr	r3, [pc, #232]	@ (80015a4 <TIM6_DAC_IRQHandler+0x288>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
			if (requests[0] || floor_destinations[0])		HAL_TIM_Base_Start_IT(&htim2);
 80014be:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <TIM6_DAC_IRQHandler+0x28c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d103      	bne.n	80014ce <TIM6_DAC_IRQHandler+0x1b2>
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <TIM6_DAC_IRQHandler+0x27c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <TIM6_DAC_IRQHandler+0x1b8>
 80014ce:	4834      	ldr	r0, [pc, #208]	@ (80015a0 <TIM6_DAC_IRQHandler+0x284>)
 80014d0:	f002 f9bc 	bl	800384c <HAL_TIM_Base_Start_IT>
			count = 0;
 80014d4:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <TIM6_DAC_IRQHandler+0x290>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 80014da:	4835      	ldr	r0, [pc, #212]	@ (80015b0 <TIM6_DAC_IRQHandler+0x294>)
 80014dc:	f002 f9b6 	bl	800384c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Stop_IT(&htim6);
 80014e0:	4834      	ldr	r0, [pc, #208]	@ (80015b4 <TIM6_DAC_IRQHandler+0x298>)
 80014e2:	f002 fa07 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
 80014e6:	e11d      	b.n	8001724 <TIM6_DAC_IRQHandler+0x408>

		} else if (floor_position == serving && traveling) {
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	4b32      	ldr	r3, [pc, #200]	@ (80015b8 <TIM6_DAC_IRQHandler+0x29c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	f040 808a 	bne.w	800160a <TIM6_DAC_IRQHandler+0x2ee>
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <TIM6_DAC_IRQHandler+0x2a0>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8085 	beq.w	800160a <TIM6_DAC_IRQHandler+0x2ee>
			sprintf(msgs, "REQUEST AT FLOOR %d REACHED\r\n", floor_position);
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <TIM6_DAC_IRQHandler+0x264>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	492e      	ldr	r1, [pc, #184]	@ (80015c0 <TIM6_DAC_IRQHandler+0x2a4>)
 8001508:	481f      	ldr	r0, [pc, #124]	@ (8001588 <TIM6_DAC_IRQHandler+0x26c>)
 800150a:	f003 f9d7 	bl	80048bc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 28, 100);
 800150e:	2364      	movs	r3, #100	@ 0x64
 8001510:	221c      	movs	r2, #28
 8001512:	491d      	ldr	r1, [pc, #116]	@ (8001588 <TIM6_DAC_IRQHandler+0x26c>)
 8001514:	481d      	ldr	r0, [pc, #116]	@ (800158c <TIM6_DAC_IRQHandler+0x270>)
 8001516:	f002 fdf5 	bl	8004104 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(elevator_direction == 'u' ? DU_GPIO_Port : DD_GPIO_Port, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <TIM6_DAC_IRQHandler+0x260>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b75      	cmp	r3, #117	@ 0x75
 8001520:	d101      	bne.n	8001526 <TIM6_DAC_IRQHandler+0x20a>
 8001522:	2340      	movs	r3, #64	@ 0x40
 8001524:	e000      	b.n	8001528 <TIM6_DAC_IRQHandler+0x20c>
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	4818      	ldr	r0, [pc, #96]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 800152e:	f000 fcfb 	bl	8001f28 <HAL_GPIO_WritePin>
			traveling = 0;
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <TIM6_DAC_IRQHandler+0x2a0>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
			switch(serving) {
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <TIM6_DAC_IRQHandler+0x29c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d043      	beq.n	80015c8 <TIM6_DAC_IRQHandler+0x2ac>
 8001540:	2b03      	cmp	r3, #3
 8001542:	dc4b      	bgt.n	80015dc <TIM6_DAC_IRQHandler+0x2c0>
 8001544:	2b01      	cmp	r3, #1
 8001546:	d002      	beq.n	800154e <TIM6_DAC_IRQHandler+0x232>
 8001548:	2b02      	cmp	r3, #2
 800154a:	d00a      	beq.n	8001562 <TIM6_DAC_IRQHandler+0x246>
 800154c:	e046      	b.n	80015dc <TIM6_DAC_IRQHandler+0x2c0>
			  case 1:
				  elevator_direction = 'u';
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <TIM6_DAC_IRQHandler+0x260>)
 8001550:	2275      	movs	r2, #117	@ 0x75
 8001552:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800155a:	480d      	ldr	r0, [pc, #52]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 800155c:	f000 fce4 	bl	8001f28 <HAL_GPIO_WritePin>
				  break;
 8001560:	e03c      	b.n	80015dc <TIM6_DAC_IRQHandler+0x2c0>
			  case 2:
				  elevator_direction = floor_requests[1].direction;
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <TIM6_DAC_IRQHandler+0x2a8>)
 8001564:	78da      	ldrb	r2, [r3, #3]
 8001566:	4b05      	ldr	r3, [pc, #20]	@ (800157c <TIM6_DAC_IRQHandler+0x260>)
 8001568:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001570:	4807      	ldr	r0, [pc, #28]	@ (8001590 <TIM6_DAC_IRQHandler+0x274>)
 8001572:	f000 fcd9 	bl	8001f28 <HAL_GPIO_WritePin>
				  break;
 8001576:	e031      	b.n	80015dc <TIM6_DAC_IRQHandler+0x2c0>
 8001578:	20000220 	.word	0x20000220
 800157c:	20000212 	.word	0x20000212
 8001580:	20000213 	.word	0x20000213
 8001584:	08005248 	.word	0x08005248
 8001588:	20000224 	.word	0x20000224
 800158c:	2000015c 	.word	0x2000015c
 8001590:	48000800 	.word	0x48000800
 8001594:	0800526c 	.word	0x0800526c
 8001598:	20000214 	.word	0x20000214
 800159c:	08005284 	.word	0x08005284
 80015a0:	20000078 	.word	0x20000078
 80015a4:	2000021d 	.word	0x2000021d
 80015a8:	20000218 	.word	0x20000218
 80015ac:	2000021f 	.word	0x2000021f
 80015b0:	20000110 	.word	0x20000110
 80015b4:	200000c4 	.word	0x200000c4
 80015b8:	2000021c 	.word	0x2000021c
 80015bc:	2000021e 	.word	0x2000021e
 80015c0:	080052a8 	.word	0x080052a8
 80015c4:	2000020c 	.word	0x2000020c
			  case 3:
				  elevator_direction = 'd';
 80015c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001734 <TIM6_DAC_IRQHandler+0x418>)
 80015ca:	2264      	movs	r2, #100	@ 0x64
 80015cc:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d4:	4858      	ldr	r0, [pc, #352]	@ (8001738 <TIM6_DAC_IRQHandler+0x41c>)
 80015d6:	f000 fca7 	bl	8001f28 <HAL_GPIO_WritePin>
				  break;
 80015da:	bf00      	nop
			  }
			HAL_TIM_Base_Stop_IT(&htim2);
 80015dc:	4857      	ldr	r0, [pc, #348]	@ (800173c <TIM6_DAC_IRQHandler+0x420>)
 80015de:	f002 f989 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
			start_timer = 0;
 80015e2:	4b57      	ldr	r3, [pc, #348]	@ (8001740 <TIM6_DAC_IRQHandler+0x424>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
			if (requests[0])		HAL_TIM_Base_Start_IT(&htim2);
 80015e8:	4b56      	ldr	r3, [pc, #344]	@ (8001744 <TIM6_DAC_IRQHandler+0x428>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <TIM6_DAC_IRQHandler+0x2da>
 80015f0:	4852      	ldr	r0, [pc, #328]	@ (800173c <TIM6_DAC_IRQHandler+0x420>)
 80015f2:	f002 f92b 	bl	800384c <HAL_TIM_Base_Start_IT>
			count = 0;
 80015f6:	4b54      	ldr	r3, [pc, #336]	@ (8001748 <TIM6_DAC_IRQHandler+0x42c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 80015fc:	4853      	ldr	r0, [pc, #332]	@ (800174c <TIM6_DAC_IRQHandler+0x430>)
 80015fe:	f002 f925 	bl	800384c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Stop_IT(&htim6);
 8001602:	4853      	ldr	r0, [pc, #332]	@ (8001750 <TIM6_DAC_IRQHandler+0x434>)
 8001604:	f002 f976 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
 8001608:	e08c      	b.n	8001724 <TIM6_DAC_IRQHandler+0x408>
		} else {
			// CHECK IF THERE ARE ANY REQUESTS AT THAT FLOOR GOING IN THE SAME DIRECTION AS THE ELEVATOR, AND SERVICE THEM IF SO
			uint8_t floor_requested = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
			switch(floor_position) {
 800160e:	4b51      	ldr	r3, [pc, #324]	@ (8001754 <TIM6_DAC_IRQHandler+0x438>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d035      	beq.n	8001682 <TIM6_DAC_IRQHandler+0x366>
 8001616:	2b03      	cmp	r3, #3
 8001618:	dc45      	bgt.n	80016a6 <TIM6_DAC_IRQHandler+0x38a>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d002      	beq.n	8001624 <TIM6_DAC_IRQHandler+0x308>
 800161e:	2b02      	cmp	r3, #2
 8001620:	d00d      	beq.n	800163e <TIM6_DAC_IRQHandler+0x322>
 8001622:	e040      	b.n	80016a6 <TIM6_DAC_IRQHandler+0x38a>
			case 1:
				if (floor_requests[0].requested) {
 8001624:	4b4c      	ldr	r3, [pc, #304]	@ (8001758 <TIM6_DAC_IRQHandler+0x43c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d037      	beq.n	800169c <TIM6_DAC_IRQHandler+0x380>
					HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001632:	4841      	ldr	r0, [pc, #260]	@ (8001738 <TIM6_DAC_IRQHandler+0x41c>)
 8001634:	f000 fc78 	bl	8001f28 <HAL_GPIO_WritePin>
					floor_requested = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800163c:	e02e      	b.n	800169c <TIM6_DAC_IRQHandler+0x380>
			case 2:
				if (floor_requests[1].requested && floor_requests[1].direction == elevator_direction) {
 800163e:	4b46      	ldr	r3, [pc, #280]	@ (8001758 <TIM6_DAC_IRQHandler+0x43c>)
 8001640:	789b      	ldrb	r3, [r3, #2]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d02c      	beq.n	80016a0 <TIM6_DAC_IRQHandler+0x384>
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <TIM6_DAC_IRQHandler+0x43c>)
 8001648:	78da      	ldrb	r2, [r3, #3]
 800164a:	4b3a      	ldr	r3, [pc, #232]	@ (8001734 <TIM6_DAC_IRQHandler+0x418>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d126      	bne.n	80016a0 <TIM6_DAC_IRQHandler+0x384>
					sprintf(msgs, "%c %c\r\n", elevator_direction, floor_requests[1].direction);
 8001652:	4b38      	ldr	r3, [pc, #224]	@ (8001734 <TIM6_DAC_IRQHandler+0x418>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	4b3f      	ldr	r3, [pc, #252]	@ (8001758 <TIM6_DAC_IRQHandler+0x43c>)
 800165a:	78db      	ldrb	r3, [r3, #3]
 800165c:	493f      	ldr	r1, [pc, #252]	@ (800175c <TIM6_DAC_IRQHandler+0x440>)
 800165e:	4840      	ldr	r0, [pc, #256]	@ (8001760 <TIM6_DAC_IRQHandler+0x444>)
 8001660:	f003 f92c 	bl	80048bc <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 5, 100);
 8001664:	2364      	movs	r3, #100	@ 0x64
 8001666:	2205      	movs	r2, #5
 8001668:	493d      	ldr	r1, [pc, #244]	@ (8001760 <TIM6_DAC_IRQHandler+0x444>)
 800166a:	483e      	ldr	r0, [pc, #248]	@ (8001764 <TIM6_DAC_IRQHandler+0x448>)
 800166c:	f002 fd4a 	bl	8004104 <HAL_UART_Transmit>
					HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001676:	4830      	ldr	r0, [pc, #192]	@ (8001738 <TIM6_DAC_IRQHandler+0x41c>)
 8001678:	f000 fc56 	bl	8001f28 <HAL_GPIO_WritePin>
					floor_requested = 2;
 800167c:	2302      	movs	r3, #2
 800167e:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001680:	e00e      	b.n	80016a0 <TIM6_DAC_IRQHandler+0x384>
			case 3:
				if (floor_requests[2].requested) {
 8001682:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <TIM6_DAC_IRQHandler+0x43c>)
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00c      	beq.n	80016a4 <TIM6_DAC_IRQHandler+0x388>
					HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001690:	4829      	ldr	r0, [pc, #164]	@ (8001738 <TIM6_DAC_IRQHandler+0x41c>)
 8001692:	f000 fc49 	bl	8001f28 <HAL_GPIO_WritePin>
					floor_requested = 3;
 8001696:	2303      	movs	r3, #3
 8001698:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800169a:	e003      	b.n	80016a4 <TIM6_DAC_IRQHandler+0x388>
				break;
 800169c:	bf00      	nop
 800169e:	e002      	b.n	80016a6 <TIM6_DAC_IRQHandler+0x38a>
				break;
 80016a0:	bf00      	nop
 80016a2:	e000      	b.n	80016a6 <TIM6_DAC_IRQHandler+0x38a>
				break;
 80016a4:	bf00      	nop
			}

			if (floor_requested) {
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d025      	beq.n	80016f8 <TIM6_DAC_IRQHandler+0x3dc>
				for (int i = 0; i < 3; i++) {
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	e01f      	b.n	80016f2 <TIM6_DAC_IRQHandler+0x3d6>
					if (requests[i] == floor_requested) {
 80016b2:	4a24      	ldr	r2, [pc, #144]	@ (8001744 <TIM6_DAC_IRQHandler+0x428>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d115      	bne.n	80016ec <TIM6_DAC_IRQHandler+0x3d0>
						for (int k = i; k < 2; k++) {
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	e00b      	b.n	80016de <TIM6_DAC_IRQHandler+0x3c2>
							requests[k] = requests[k + 1];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <TIM6_DAC_IRQHandler+0x428>)
 80016cc:	5cd1      	ldrb	r1, [r2, r3]
 80016ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <TIM6_DAC_IRQHandler+0x428>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	460a      	mov	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
						for (int k = i; k < 2; k++) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	ddf0      	ble.n	80016c6 <TIM6_DAC_IRQHandler+0x3aa>
						}
						requests[3] = 0;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <TIM6_DAC_IRQHandler+0x428>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	70da      	strb	r2, [r3, #3]
						break;
 80016ea:	e005      	b.n	80016f8 <TIM6_DAC_IRQHandler+0x3dc>
				for (int i = 0; i < 3; i++) {
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dddc      	ble.n	80016b2 <TIM6_DAC_IRQHandler+0x396>
					}
				}
			}

			if (traveling) {
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <TIM6_DAC_IRQHandler+0x44c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d111      	bne.n	8001724 <TIM6_DAC_IRQHandler+0x408>

			} else {
				count = 0;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <TIM6_DAC_IRQHandler+0x42c>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <TIM6_DAC_IRQHandler+0x420>)
 8001708:	f002 f8f4 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
				start_timer = 0;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <TIM6_DAC_IRQHandler+0x424>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8001712:	480a      	ldr	r0, [pc, #40]	@ (800173c <TIM6_DAC_IRQHandler+0x420>)
 8001714:	f002 f89a 	bl	800384c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim15);
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <TIM6_DAC_IRQHandler+0x430>)
 800171a:	f002 f897 	bl	800384c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 800171e:	480c      	ldr	r0, [pc, #48]	@ (8001750 <TIM6_DAC_IRQHandler+0x434>)
 8001720:	f002 f8e8 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001724:	480a      	ldr	r0, [pc, #40]	@ (8001750 <TIM6_DAC_IRQHandler+0x434>)
 8001726:	f002 f914 	bl	8003952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000212 	.word	0x20000212
 8001738:	48000800 	.word	0x48000800
 800173c:	20000078 	.word	0x20000078
 8001740:	2000021d 	.word	0x2000021d
 8001744:	20000218 	.word	0x20000218
 8001748:	2000021f 	.word	0x2000021f
 800174c:	20000110 	.word	0x20000110
 8001750:	200000c4 	.word	0x200000c4
 8001754:	20000213 	.word	0x20000213
 8001758:	2000020c 	.word	0x2000020c
 800175c:	080052c8 	.word	0x080052c8
 8001760:	20000224 	.word	0x20000224
 8001764:	2000015c 	.word	0x2000015c
 8001768:	2000021e 	.word	0x2000021e

0800176c <Reset_Timer>:
//	if (htim->Instance == TIM2) {
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	}
//}

void Reset_Timer(int num, ...) {
 800176c:	b40f      	push	{r0, r1, r2, r3}
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
	va_list arg_list;
	va_start(arg_list, num);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < num; i++) {
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	e025      	b.n	80017cc <Reset_Timer+0x60>
		if (va_arg(arg_list, TIM_HandleTypeDef*)->Instance == TIM2) {
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	1d1a      	adds	r2, r3, #4
 8001784:	603a      	str	r2, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800178e:	d109      	bne.n	80017a4 <Reset_Timer+0x38>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001790:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <Reset_Timer+0x78>)
 8001792:	f002 f8af 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
			start_timer = 0;
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <Reset_Timer+0x7c>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 800179c:	4811      	ldr	r0, [pc, #68]	@ (80017e4 <Reset_Timer+0x78>)
 800179e:	f002 f855 	bl	800384c <HAL_TIM_Base_Start_IT>
 80017a2:	e010      	b.n	80017c6 <Reset_Timer+0x5a>
		} else if (va_arg(arg_list, TIM_HandleTypeDef*)->Instance == TIM15) {
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	1d1a      	adds	r2, r3, #4
 80017a8:	603a      	str	r2, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <Reset_Timer+0x80>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d108      	bne.n	80017c6 <Reset_Timer+0x5a>
			HAL_TIM_Base_Stop_IT(&htim15);
 80017b4:	480e      	ldr	r0, [pc, #56]	@ (80017f0 <Reset_Timer+0x84>)
 80017b6:	f002 f89d 	bl	80038f4 <HAL_TIM_Base_Stop_IT>
			count = 0;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <Reset_Timer+0x88>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 80017c0:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <Reset_Timer+0x84>)
 80017c2:	f002 f843 	bl	800384c <HAL_TIM_Base_Start_IT>
	for (int i = 0; i < num; i++) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbd5      	blt.n	8001780 <Reset_Timer+0x14>
		}
	}
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017e0:	b004      	add	sp, #16
 80017e2:	4770      	bx	lr
 80017e4:	20000078 	.word	0x20000078
 80017e8:	2000021d 	.word	0x2000021d
 80017ec:	40014000 	.word	0x40014000
 80017f0:	20000110 	.word	0x20000110
 80017f4:	2000021f 	.word	0x2000021f

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f003 f870 	bl	800490c <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	@ (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20004000 	.word	0x20004000
 8001858:	00000400 	.word	0x00000400
 800185c:	20000258 	.word	0x20000258
 8001860:	200003a8 	.word	0x200003a8

08001864 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800188c:	f7ff ffea 	bl	8001864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	@ (80018c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <LoopForever+0xe>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	@ (80018d4 <LoopForever+0x16>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f003 f82f 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ba:	f7fe fcd9 	bl	8000270 <main>

080018be <LoopForever>:

LoopForever:
    b LoopForever
 80018be:	e7fe      	b.n	80018be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018c0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018cc:	08005354 	.word	0x08005354
  ldr r2, =_sbss
 80018d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80018d4:	200003a8 	.word	0x200003a8

080018d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_IRQHandler>
	...

080018dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <HAL_Init+0x28>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <HAL_Init+0x28>)
 80018e6:	f043 0310 	orr.w	r3, r3, #16
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f94f 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff f92e 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000

08001908 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f967 	bl	8001bfa <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 f92f 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000000 	.word	0x20000000
 8001960:	20000008 	.word	0x20000008
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	2000025c 	.word	0x2000025c

08001990 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;  
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000025c 	.word	0x2000025c

080019a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	@ (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	@ (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	@ (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	@ 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	@ 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff29 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff3e 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff31 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c22:	e14e      	b.n	8001ec2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8140 	beq.w	8001ebc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d005      	beq.n	8001c54 <HAL_GPIO_Init+0x40>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d130      	bne.n	8001cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 0201 	and.w	r2, r3, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d017      	beq.n	8001cf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d123      	bne.n	8001d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	08da      	lsrs	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	6939      	ldr	r1, [r7, #16]
 8001d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0203 	and.w	r2, r3, #3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 809a 	beq.w	8001ebc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d88:	4b55      	ldr	r3, [pc, #340]	@ (8001ee0 <HAL_GPIO_Init+0x2cc>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a54      	ldr	r2, [pc, #336]	@ (8001ee0 <HAL_GPIO_Init+0x2cc>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b52      	ldr	r3, [pc, #328]	@ (8001ee0 <HAL_GPIO_Init+0x2cc>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001da0:	4a50      	ldr	r2, [pc, #320]	@ (8001ee4 <HAL_GPIO_Init+0x2d0>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dca:	d013      	beq.n	8001df4 <HAL_GPIO_Init+0x1e0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a46      	ldr	r2, [pc, #280]	@ (8001ee8 <HAL_GPIO_Init+0x2d4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00d      	beq.n	8001df0 <HAL_GPIO_Init+0x1dc>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a45      	ldr	r2, [pc, #276]	@ (8001eec <HAL_GPIO_Init+0x2d8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_Init+0x1d8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a44      	ldr	r2, [pc, #272]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_GPIO_Init+0x1d4>
 8001de4:	2303      	movs	r3, #3
 8001de6:	e006      	b.n	8001df6 <HAL_GPIO_Init+0x1e2>
 8001de8:	2305      	movs	r3, #5
 8001dea:	e004      	b.n	8001df6 <HAL_GPIO_Init+0x1e2>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x1e2>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_GPIO_Init+0x1e2>
 8001df4:	2300      	movs	r3, #0
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e06:	4937      	ldr	r1, [pc, #220]	@ (8001ee4 <HAL_GPIO_Init+0x2d0>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e14:	4b37      	ldr	r3, [pc, #220]	@ (8001ef4 <HAL_GPIO_Init+0x2e0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e38:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef4 <HAL_GPIO_Init+0x2e0>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef4 <HAL_GPIO_Init+0x2e0>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e62:	4a24      	ldr	r2, [pc, #144]	@ (8001ef4 <HAL_GPIO_Init+0x2e0>)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e68:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_GPIO_Init+0x2e0>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e8c:	4a19      	ldr	r2, [pc, #100]	@ (8001ef4 <HAL_GPIO_Init+0x2e0>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_GPIO_Init+0x2e0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef4 <HAL_GPIO_Init+0x2e0>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f aea9 	bne.w	8001c24 <HAL_GPIO_Init+0x10>
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	48000400 	.word	0x48000400
 8001eec:	48000800 	.word	0x48000800
 8001ef0:	48000c00 	.word	0x48000c00
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43d9      	mvns	r1, r3
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	400b      	ands	r3, r1
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f96:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fd36 	bl	8000a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fcc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f001 b823 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 817d 	beq.w	80022f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ff8:	4bbc      	ldr	r3, [pc, #752]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b04      	cmp	r3, #4
 8002002:	d00c      	beq.n	800201e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002004:	4bb9      	ldr	r3, [pc, #740]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b08      	cmp	r3, #8
 800200e:	d15c      	bne.n	80020ca <HAL_RCC_OscConfig+0x10e>
 8002010:	4bb6      	ldr	r3, [pc, #728]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800201c:	d155      	bne.n	80020ca <HAL_RCC_OscConfig+0x10e>
 800201e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002022:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002032:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_RCC_OscConfig+0x94>
 800204a:	4ba8      	ldr	r3, [pc, #672]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e015      	b.n	800207c <HAL_RCC_OscConfig+0xc0>
 8002050:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002054:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002064:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002068:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800206c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002078:	4b9c      	ldr	r3, [pc, #624]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002080:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002084:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002090:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f042 0220 	orr.w	r2, r2, #32
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f002 021f 	and.w	r2, r2, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f202 	lsl.w	r2, r1, r2
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 811f 	beq.w	80022f0 <HAL_RCC_OscConfig+0x334>
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 8116 	bne.w	80022f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f000 bfaf 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x12e>
 80020dc:	4b83      	ldr	r3, [pc, #524]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a82      	ldr	r2, [pc, #520]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 80020e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	e036      	b.n	8002158 <HAL_RCC_OscConfig+0x19c>
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x158>
 80020fa:	4b7c      	ldr	r3, [pc, #496]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7b      	ldr	r2, [pc, #492]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b79      	ldr	r3, [pc, #484]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a78      	ldr	r2, [pc, #480]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 800210c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e021      	b.n	8002158 <HAL_RCC_OscConfig+0x19c>
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x184>
 8002126:	4b71      	ldr	r3, [pc, #452]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a70      	ldr	r2, [pc, #448]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 800212c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b6e      	ldr	r3, [pc, #440]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6d      	ldr	r2, [pc, #436]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0x19c>
 8002140:	4b6a      	ldr	r3, [pc, #424]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a69      	ldr	r2, [pc, #420]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b67      	ldr	r3, [pc, #412]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a66      	ldr	r2, [pc, #408]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002156:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002158:	4b64      	ldr	r3, [pc, #400]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	f023 020f 	bic.w	r2, r3, #15
 8002160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002164:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	495f      	ldr	r1, [pc, #380]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 800216e:	4313      	orrs	r3, r2
 8002170:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002176:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d059      	beq.n	8002236 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff fc05 	bl	8001990 <HAL_GetTick>
 8002186:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fc00 	bl	8001990 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	@ 0x64
 800219a:	d902      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	f000 bf43 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>
 80021a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021a6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80021b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_RCC_OscConfig+0x218>
 80021ce:	4b47      	ldr	r3, [pc, #284]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	e015      	b.n	8002200 <HAL_RCC_OscConfig+0x244>
 80021d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80021e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80021fc:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002204:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002208:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800220c:	fa92 f2a2 	rbit	r2, r2
 8002210:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002214:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f042 0220 	orr.w	r2, r2, #32
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f002 021f 	and.w	r2, r2, #31
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ab      	beq.n	800218c <HAL_RCC_OscConfig+0x1d0>
 8002234:	e05d      	b.n	80022f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff fbab 	bl	8001990 <HAL_GetTick>
 800223a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fba6 	bl	8001990 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	@ 0x64
 800224e:	d902      	bls.n	8002256 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	f000 bee9 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>
 8002256:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800225a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800226a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_RCC_OscConfig+0x2cc>
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	e015      	b.n	80022b4 <HAL_RCC_OscConfig+0x2f8>
 8002288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800228c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800229c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80022a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80022b0:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_RCC_OscConfig+0x330>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022b8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80022bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80022c0:	fa92 f2a2 	rbit	r2, r2
 80022c4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80022c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80022cc:	fab2 f282 	clz	r2, r2
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f042 0220 	orr.w	r2, r2, #32
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f002 021f 	and.w	r2, r2, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ab      	bne.n	8002240 <HAL_RCC_OscConfig+0x284>
 80022e8:	e003      	b.n	80022f2 <HAL_RCC_OscConfig+0x336>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 817d 	beq.w	8002602 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002308:	4ba6      	ldr	r3, [pc, #664]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00b      	beq.n	800232c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002314:	4ba3      	ldr	r3, [pc, #652]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d172      	bne.n	8002406 <HAL_RCC_OscConfig+0x44a>
 8002320:	4ba0      	ldr	r3, [pc, #640]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d16c      	bne.n	8002406 <HAL_RCC_OscConfig+0x44a>
 800232c:	2302      	movs	r3, #2
 800232e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800233e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x3a0>
 8002356:	4b93      	ldr	r3, [pc, #588]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e013      	b.n	8002384 <HAL_RCC_OscConfig+0x3c8>
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002374:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002380:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	2202      	movs	r2, #2
 8002386:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800238a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800238e:	fa92 f2a2 	rbit	r2, r2
 8002392:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002396:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCC_OscConfig+0x410>
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f000 be2e 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b75      	ldr	r3, [pc, #468]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	21f8      	movs	r1, #248	@ 0xf8
 80023e2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80023ea:	fa91 f1a1 	rbit	r1, r1
 80023ee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80023f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80023f6:	fab1 f181 	clz	r1, r1
 80023fa:	b2c9      	uxtb	r1, r1
 80023fc:	408b      	lsls	r3, r1
 80023fe:	4969      	ldr	r1, [pc, #420]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002404:	e0fd      	b.n	8002602 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8088 	beq.w	8002528 <HAL_RCC_OscConfig+0x56c>
 8002418:	2301      	movs	r3, #1
 800241a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800242a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002438:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	461a      	mov	r2, r3
 8002440:	2301      	movs	r3, #1
 8002442:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff faa4 	bl	8001990 <HAL_GetTick>
 8002448:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244e:	f7ff fa9f 	bl	8001990 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d902      	bls.n	8002464 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	f000 bde2 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002476:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <HAL_RCC_OscConfig+0x4d8>
 800248e:	4b45      	ldr	r3, [pc, #276]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e013      	b.n	80024bc <HAL_RCC_OscConfig+0x500>
 8002494:	2302      	movs	r3, #2
 8002496:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80024ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80024b8:	4b3a      	ldr	r3, [pc, #232]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	2202      	movs	r2, #2
 80024be:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80024c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80024c6:	fa92 f2a2 	rbit	r2, r2
 80024ca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80024ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80024d2:	fab2 f282 	clz	r2, r2
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f042 0220 	orr.w	r2, r2, #32
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f002 021f 	and.w	r2, r2, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f202 	lsl.w	r2, r1, r2
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0af      	beq.n	800244e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	21f8      	movs	r1, #248	@ 0xf8
 8002504:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800250c:	fa91 f1a1 	rbit	r1, r1
 8002510:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002514:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002518:	fab1 f181 	clz	r1, r1
 800251c:	b2c9      	uxtb	r1, r1
 800251e:	408b      	lsls	r3, r1
 8002520:	4920      	ldr	r1, [pc, #128]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
 8002526:	e06c      	b.n	8002602 <HAL_RCC_OscConfig+0x646>
 8002528:	2301      	movs	r3, #1
 800252a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800253a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002548:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	461a      	mov	r2, r3
 8002550:	2300      	movs	r3, #0
 8002552:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff fa1c 	bl	8001990 <HAL_GetTick>
 8002558:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255e:	f7ff fa17 	bl	8001990 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d902      	bls.n	8002574 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	f000 bd5a 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002586:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d104      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5ec>
 800259e:	4b01      	ldr	r3, [pc, #4]	@ (80025a4 <HAL_RCC_OscConfig+0x5e8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	e015      	b.n	80025d0 <HAL_RCC_OscConfig+0x614>
 80025a4:	40021000 	.word	0x40021000
 80025a8:	2302      	movs	r3, #2
 80025aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80025cc:	4bc8      	ldr	r3, [pc, #800]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	2202      	movs	r2, #2
 80025d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80025d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80025e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f002 021f 	and.w	r2, r2, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ad      	bne.n	800255e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8110 	beq.w	8002838 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d079      	beq.n	800271c <HAL_RCC_OscConfig+0x760>
 8002628:	2301      	movs	r3, #1
 800262a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800263a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	4bab      	ldr	r3, [pc, #684]	@ (80028f4 <HAL_RCC_OscConfig+0x938>)
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	461a      	mov	r2, r3
 800264e:	2301      	movs	r3, #1
 8002650:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7ff f99d 	bl	8001990 <HAL_GetTick>
 8002656:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265c:	f7ff f998 	bl	8001990 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d902      	bls.n	8002672 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	f000 bcdb 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>
 8002672:	2302      	movs	r3, #2
 8002674:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800268c:	2202      	movs	r2, #2
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026b0:	2202      	movs	r2, #2
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026cc:	4b88      	ldr	r3, [pc, #544]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 80026ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026d8:	2102      	movs	r1, #2
 80026da:	6019      	str	r1, [r3, #0]
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f1a3 	rbit	r1, r3
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026f2:	6019      	str	r1, [r3, #0]
  return result;
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0a0      	beq.n	800265c <HAL_RCC_OscConfig+0x6a0>
 800271a:	e08d      	b.n	8002838 <HAL_RCC_OscConfig+0x87c>
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800273e:	601a      	str	r2, [r3, #0]
  return result;
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002748:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	4b68      	ldr	r3, [pc, #416]	@ (80028f4 <HAL_RCC_OscConfig+0x938>)
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	461a      	mov	r2, r3
 800275a:	2300      	movs	r3, #0
 800275c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7ff f917 	bl	8001990 <HAL_GetTick>
 8002762:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002768:	f7ff f912 	bl	8001990 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d902      	bls.n	800277e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	f000 bc55 	b.w	8003028 <HAL_RCC_OscConfig+0x106c>
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027aa:	2202      	movs	r2, #2
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027ce:	2202      	movs	r2, #2
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ea:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 80027ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027f6:	2102      	movs	r1, #2
 80027f8:	6019      	str	r1, [r3, #0]
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	fa93 f1a3 	rbit	r1, r3
 8002808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002810:	6019      	str	r1, [r3, #0]
  return result;
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d197      	bne.n	8002768 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 81a1 	beq.w	8002b90 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002854:	4b26      	ldr	r3, [pc, #152]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d116      	bne.n	800288e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b23      	ldr	r3, [pc, #140]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4a22      	ldr	r2, [pc, #136]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286a:	61d3      	str	r3, [r2, #28]
 800286c:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002886:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002888:	2301      	movs	r3, #1
 800288a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <HAL_RCC_OscConfig+0x93c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11a      	bne.n	80028d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <HAL_RCC_OscConfig+0x93c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <HAL_RCC_OscConfig+0x93c>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7ff f873 	bl	8001990 <HAL_GetTick>
 80028aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	e009      	b.n	80028c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b0:	f7ff f86e 	bl	8001990 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	@ 0x64
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e3b1      	b.n	8003028 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <HAL_RCC_OscConfig+0x93c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10d      	bne.n	80028fc <HAL_RCC_OscConfig+0x940>
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4a02      	ldr	r2, [pc, #8]	@ (80028f0 <HAL_RCC_OscConfig+0x934>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6213      	str	r3, [r2, #32]
 80028ec:	e03c      	b.n	8002968 <HAL_RCC_OscConfig+0x9ac>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	10908120 	.word	0x10908120
 80028f8:	40007000 	.word	0x40007000
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x96a>
 800290c:	4bc1      	ldr	r3, [pc, #772]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4ac0      	ldr	r2, [pc, #768]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	4bbe      	ldr	r3, [pc, #760]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4abd      	ldr	r2, [pc, #756]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 800291e:	f023 0304 	bic.w	r3, r3, #4
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	e020      	b.n	8002968 <HAL_RCC_OscConfig+0x9ac>
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b05      	cmp	r3, #5
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x994>
 8002936:	4bb7      	ldr	r3, [pc, #732]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4ab6      	ldr	r2, [pc, #728]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	4bb4      	ldr	r3, [pc, #720]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4ab3      	ldr	r2, [pc, #716]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0x9ac>
 8002950:	4bb0      	ldr	r3, [pc, #704]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4aaf      	ldr	r2, [pc, #700]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	4bad      	ldr	r3, [pc, #692]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4aac      	ldr	r2, [pc, #688]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8081 	beq.w	8002a7c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff f809 	bl	8001990 <HAL_GetTick>
 800297e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7ff f804 	bl	8001990 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e345      	b.n	8003028 <HAL_RCC_OscConfig+0x106c>
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029a4:	2202      	movs	r2, #2
 80029a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029c8:	2202      	movs	r2, #2
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029e2:	601a      	str	r2, [r3, #0]
  return result;
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d102      	bne.n	8002a08 <HAL_RCC_OscConfig+0xa4c>
 8002a02:	4b84      	ldr	r3, [pc, #528]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	e013      	b.n	8002a30 <HAL_RCC_OscConfig+0xa74>
 8002a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a10:	2202      	movs	r2, #2
 8002a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f2a3 	rbit	r2, r3
 8002a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a26:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	4b79      	ldr	r3, [pc, #484]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a34:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a38:	2102      	movs	r1, #2
 8002a3a:	6011      	str	r1, [r2, #0]
 8002a3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a40:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	fa92 f1a2 	rbit	r1, r2
 8002a4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a4e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a52:	6011      	str	r1, [r2, #0]
  return result;
 8002a54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a58:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	fab2 f282 	clz	r2, r2
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f002 021f 	and.w	r2, r2, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d084      	beq.n	8002984 <HAL_RCC_OscConfig+0x9c8>
 8002a7a:	e07f      	b.n	8002b7c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7c:	f7fe ff88 	bl	8001990 <HAL_GetTick>
 8002a80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a84:	e00b      	b.n	8002a9e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe ff83 	bl	8001990 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e2c4      	b.n	8003028 <HAL_RCC_OscConfig+0x106c>
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aca:	2202      	movs	r2, #2
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ae4:	601a      	str	r2, [r3, #0]
  return result;
 8002ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002aee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_OscConfig+0xb4e>
 8002b04:	4b43      	ldr	r3, [pc, #268]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	e013      	b.n	8002b32 <HAL_RCC_OscConfig+0xb76>
 8002b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b12:	2202      	movs	r2, #2
 8002b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	fa93 f2a3 	rbit	r2, r3
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	4b39      	ldr	r3, [pc, #228]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b36:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	6011      	str	r1, [r2, #0]
 8002b3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b42:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	fa92 f1a2 	rbit	r1, r2
 8002b4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b50:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b54:	6011      	str	r1, [r2, #0]
  return result;
 8002b56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b5a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d184      	bne.n	8002a86 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b23      	ldr	r3, [pc, #140]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	4a22      	ldr	r2, [pc, #136]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8242 	beq.w	8003026 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <HAL_RCC_OscConfig+0xc58>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	f000 8213 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	f040 8162 	bne.w	8002e86 <HAL_RCC_OscConfig+0xeca>
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002bca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002be6:	601a      	str	r2, [r3, #0]
  return result;
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bf0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bfc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	461a      	mov	r2, r3
 8002c04:	2300      	movs	r3, #0
 8002c06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fec2 	bl	8001990 <HAL_GetTick>
 8002c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c10:	e00c      	b.n	8002c2c <HAL_RCC_OscConfig+0xc70>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe feba 	bl	8001990 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e1fd      	b.n	8003028 <HAL_RCC_OscConfig+0x106c>
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	fa93 f2a3 	rbit	r2, r3
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c50:	601a      	str	r2, [r3, #0]
  return result;
 8002c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c56:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_OscConfig+0xcba>
 8002c70:	4bb0      	ldr	r3, [pc, #704]	@ (8002f34 <HAL_RCC_OscConfig+0xf78>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	e027      	b.n	8002cc6 <HAL_RCC_OscConfig+0xd0a>
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ca4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f2a3 	rbit	r2, r3
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8002f34 <HAL_RCC_OscConfig+0xf78>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002cce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cd2:	6011      	str	r1, [r2, #0]
 8002cd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cd8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	fa92 f1a2 	rbit	r1, r2
 8002ce2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cea:	6011      	str	r1, [r2, #0]
  return result;
 8002cec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cf0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	fab2 f282 	clz	r2, r2
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	f042 0220 	orr.w	r2, r2, #32
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	f002 021f 	and.w	r2, r2, #31
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d182      	bne.n	8002c18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d12:	4b88      	ldr	r3, [pc, #544]	@ (8002f34 <HAL_RCC_OscConfig+0xf78>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	430b      	orrs	r3, r1
 8002d34:	497f      	ldr	r1, [pc, #508]	@ (8002f34 <HAL_RCC_OscConfig+0xf78>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
 8002d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d5e:	601a      	str	r2, [r3, #0]
  return result;
 8002d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d64:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fe06 	bl	8001990 <HAL_GetTick>
 8002d84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d88:	e009      	b.n	8002d9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fe01 	bl	8001990 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e144      	b.n	8003028 <HAL_RCC_OscConfig+0x106c>
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002da6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002dc2:	601a      	str	r2, [r3, #0]
  return result;
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002dcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_OscConfig+0xe2c>
 8002de2:	4b54      	ldr	r3, [pc, #336]	@ (8002f34 <HAL_RCC_OscConfig+0xf78>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e027      	b.n	8002e38 <HAL_RCC_OscConfig+0xe7c>
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002df0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f2a3 	rbit	r2, r3
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	4b3f      	ldr	r3, [pc, #252]	@ (8002f34 <HAL_RCC_OscConfig+0xf78>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e3c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e44:	6011      	str	r1, [r2, #0]
 8002e46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e4a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	fa92 f1a2 	rbit	r1, r2
 8002e54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e58:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e5c:	6011      	str	r1, [r2, #0]
  return result;
 8002e5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e62:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f042 0220 	orr.w	r2, r2, #32
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f002 021f 	and.w	r2, r2, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d082      	beq.n	8002d8a <HAL_RCC_OscConfig+0xdce>
 8002e84:	e0cf      	b.n	8003026 <HAL_RCC_OscConfig+0x106a>
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e98:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	fa93 f2a3 	rbit	r2, r3
 8002ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002eaa:	601a      	str	r2, [r3, #0]
  return result;
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002eb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ec0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fd60 	bl	8001990 <HAL_GetTick>
 8002ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed4:	e009      	b.n	8002eea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe fd5b 	bl	8001990 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e09e      	b.n	8003028 <HAL_RCC_OscConfig+0x106c>
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ef2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f0e:	601a      	str	r2, [r3, #0]
  return result;
 8002f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f14:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d104      	bne.n	8002f38 <HAL_RCC_OscConfig+0xf7c>
 8002f2e:	4b01      	ldr	r3, [pc, #4]	@ (8002f34 <HAL_RCC_OscConfig+0xf78>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	e029      	b.n	8002f88 <HAL_RCC_OscConfig+0xfcc>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	4b2b      	ldr	r3, [pc, #172]	@ (8003034 <HAL_RCC_OscConfig+0x1078>)
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f8c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f94:	6011      	str	r1, [r2, #0]
 8002f96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f9a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	fa92 f1a2 	rbit	r1, r2
 8002fa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fac:	6011      	str	r1, [r2, #0]
  return result;
 8002fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fb2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	fab2 f282 	clz	r2, r2
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	f042 0220 	orr.w	r2, r2, #32
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	f002 021f 	and.w	r2, r2, #31
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d180      	bne.n	8002ed6 <HAL_RCC_OscConfig+0xf1a>
 8002fd4:	e027      	b.n	8003026 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01e      	b.n	8003028 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fea:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <HAL_RCC_OscConfig+0x1078>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ff2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ff6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	429a      	cmp	r2, r3
 8003008:	d10b      	bne.n	8003022 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800300a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800300e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000

08003038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b09e      	sub	sp, #120	@ 0x78
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e162      	b.n	8003316 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b90      	ldr	r3, [pc, #576]	@ (8003294 <HAL_RCC_ClockConfig+0x25c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d910      	bls.n	8003080 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b8d      	ldr	r3, [pc, #564]	@ (8003294 <HAL_RCC_ClockConfig+0x25c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0207 	bic.w	r2, r3, #7
 8003066:	498b      	ldr	r1, [pc, #556]	@ (8003294 <HAL_RCC_ClockConfig+0x25c>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b89      	ldr	r3, [pc, #548]	@ (8003294 <HAL_RCC_ClockConfig+0x25c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e14a      	b.n	8003316 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b82      	ldr	r3, [pc, #520]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	497f      	ldr	r1, [pc, #508]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80dc 	beq.w	8003264 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d13c      	bne.n	800312e <HAL_RCC_ClockConfig+0xf6>
 80030b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_RCC_ClockConfig+0xa6>
 80030d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	e00f      	b.n	80030fe <HAL_RCC_ClockConfig+0xc6>
 80030de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80030ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030fa:	4b67      	ldr	r3, [pc, #412]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003102:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003106:	fa92 f2a2 	rbit	r2, r2
 800310a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800310c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800310e:	fab2 f282 	clz	r2, r2
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	f042 0220 	orr.w	r2, r2, #32
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f002 021f 	and.w	r2, r2, #31
 800311e:	2101      	movs	r1, #1
 8003120:	fa01 f202 	lsl.w	r2, r1, r2
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d17b      	bne.n	8003222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0f3      	b.n	8003316 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d13c      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x178>
 8003136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800313a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d102      	bne.n	8003160 <HAL_RCC_ClockConfig+0x128>
 800315a:	4b4f      	ldr	r3, [pc, #316]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	e00f      	b.n	8003180 <HAL_RCC_ClockConfig+0x148>
 8003160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003164:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	647b      	str	r3, [r7, #68]	@ 0x44
 800316e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003172:	643b      	str	r3, [r7, #64]	@ 0x40
 8003174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800317c:	4b46      	ldr	r3, [pc, #280]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003184:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003186:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003188:	fa92 f2a2 	rbit	r2, r2
 800318c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800318e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003190:	fab2 f282 	clz	r2, r2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f002 021f 	and.w	r2, r2, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d13a      	bne.n	8003222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0b2      	b.n	8003316 <HAL_RCC_ClockConfig+0x2de>
 80031b0:	2302      	movs	r3, #2
 80031b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d102      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x1a0>
 80031d2:	4b31      	ldr	r3, [pc, #196]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	e00d      	b.n	80031f4 <HAL_RCC_ClockConfig+0x1bc>
 80031d8:	2302      	movs	r3, #2
 80031da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e4:	2302      	movs	r3, #2
 80031e6:	623b      	str	r3, [r7, #32]
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	4b29      	ldr	r3, [pc, #164]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	2202      	movs	r2, #2
 80031f6:	61ba      	str	r2, [r7, #24]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	fa92 f2a2 	rbit	r2, r2
 80031fe:	617a      	str	r2, [r7, #20]
  return result;
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	fab2 f282 	clz	r2, r2
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	f042 0220 	orr.w	r2, r2, #32
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	f002 021f 	and.w	r2, r2, #31
 8003212:	2101      	movs	r1, #1
 8003214:	fa01 f202 	lsl.w	r2, r1, r2
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e079      	b.n	8003316 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	491a      	ldr	r1, [pc, #104]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003234:	f7fe fbac 	bl	8001990 <HAL_GetTick>
 8003238:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fe fba8 	bl	8001990 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e061      	b.n	8003316 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_RCC_ClockConfig+0x260>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003264:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <HAL_RCC_ClockConfig+0x25c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d214      	bcs.n	800329c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <HAL_RCC_ClockConfig+0x25c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 0207 	bic.w	r2, r3, #7
 800327a:	4906      	ldr	r1, [pc, #24]	@ (8003294 <HAL_RCC_ClockConfig+0x25c>)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <HAL_RCC_ClockConfig+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e040      	b.n	8003316 <HAL_RCC_ClockConfig+0x2de>
 8003294:	40022000 	.word	0x40022000
 8003298:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003320 <HAL_RCC_ClockConfig+0x2e8>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	491a      	ldr	r1, [pc, #104]	@ (8003320 <HAL_RCC_ClockConfig+0x2e8>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c6:	4b16      	ldr	r3, [pc, #88]	@ (8003320 <HAL_RCC_ClockConfig+0x2e8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4912      	ldr	r1, [pc, #72]	@ (8003320 <HAL_RCC_ClockConfig+0x2e8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032da:	f000 f829 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032de:	4601      	mov	r1, r0
 80032e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_RCC_ClockConfig+0x2e8>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032e8:	22f0      	movs	r2, #240	@ 0xf0
 80032ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	fa92 f2a2 	rbit	r2, r2
 80032f2:	60fa      	str	r2, [r7, #12]
  return result;
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	40d3      	lsrs	r3, r2
 80032fe:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <HAL_RCC_ClockConfig+0x2ec>)
 8003300:	5cd3      	ldrb	r3, [r2, r3]
 8003302:	fa21 f303 	lsr.w	r3, r1, r3
 8003306:	4a08      	ldr	r2, [pc, #32]	@ (8003328 <HAL_RCC_ClockConfig+0x2f0>)
 8003308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_RCC_ClockConfig+0x2f4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fafa 	bl	8001908 <HAL_InitTick>
  
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3778      	adds	r7, #120	@ 0x78
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	080052d8 	.word	0x080052d8
 8003328:	20000000 	.word	0x20000000
 800332c:	20000004 	.word	0x20000004

08003330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800334a:	4b1e      	ldr	r3, [pc, #120]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b04      	cmp	r3, #4
 8003358:	d002      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x30>
 800335a:	2b08      	cmp	r3, #8
 800335c:	d003      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x36>
 800335e:	e026      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003360:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003362:	613b      	str	r3, [r7, #16]
      break;
 8003364:	e026      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0c9b      	lsrs	r3, r3, #18
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	4a17      	ldr	r2, [pc, #92]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003370:	5cd3      	ldrb	r3, [r2, r3]
 8003372:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003374:	4b13      	ldr	r3, [pc, #76]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	4a14      	ldr	r2, [pc, #80]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800338c:	4a0e      	ldr	r2, [pc, #56]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	fbb2 f2f3 	udiv	r2, r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e004      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a0c      	ldr	r2, [pc, #48]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	613b      	str	r3, [r7, #16]
      break;
 80033ac:	e002      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80033b0:	613b      	str	r3, [r7, #16]
      break;
 80033b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b4:	693b      	ldr	r3, [r7, #16]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	007a1200 	.word	0x007a1200
 80033cc:	080052f0 	.word	0x080052f0
 80033d0:	08005300 	.word	0x08005300
 80033d4:	003d0900 	.word	0x003d0900

080033d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <HAL_RCC_GetHCLKFreq+0x14>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000000 	.word	0x20000000

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033f6:	f7ff ffef 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 80033fa:	4601      	mov	r1, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003404:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003408:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	fa92 f2a2 	rbit	r2, r2
 8003410:	603a      	str	r2, [r7, #0]
  return result;
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	fab2 f282 	clz	r2, r2
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	40d3      	lsrs	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	@ (8003430 <HAL_RCC_GetPCLK1Freq+0x40>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	080052e8 	.word	0x080052e8

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800343a:	f7ff ffcd 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 800343e:	4601      	mov	r1, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003448:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800344c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	603a      	str	r2, [r7, #0]
  return result;
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	40d3      	lsrs	r3, r2
 8003460:	4a04      	ldr	r2, [pc, #16]	@ (8003474 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	080052e8 	.word	0x080052e8

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b092      	sub	sp, #72	@ 0x48
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80d4 	beq.w	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349c:	4b4e      	ldr	r3, [pc, #312]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10e      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a8:	4b4b      	ldr	r3, [pc, #300]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4a4a      	ldr	r2, [pc, #296]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	61d3      	str	r3, [r2, #28]
 80034b4:	4b48      	ldr	r3, [pc, #288]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b45      	ldr	r3, [pc, #276]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b42      	ldr	r3, [pc, #264]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a41      	ldr	r2, [pc, #260]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fe fa57 	bl	8001990 <HAL_GetTick>
 80034e2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fe fa53 	bl	8001990 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	@ 0x64
 80034f2:	d901      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e14b      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b38      	ldr	r3, [pc, #224]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003504:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800350e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8084 	beq.w	800361e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003520:	429a      	cmp	r2, r3
 8003522:	d07c      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003524:	4b2c      	ldr	r3, [pc, #176]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800352c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800352e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003532:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	4b26      	ldr	r3, [pc, #152]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	461a      	mov	r2, r3
 800354e:	2301      	movs	r3, #1
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	461a      	mov	r2, r3
 8003572:	2300      	movs	r3, #0
 8003574:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003576:	4a18      	ldr	r2, [pc, #96]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800357c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d04b      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe fa03 	bl	8001990 <HAL_GetTick>
 800358a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe f9ff 	bl	8001990 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0f5      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b0:	2302      	movs	r3, #2
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	61fb      	str	r3, [r7, #28]
  return result;
 80035bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d108      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035d2:	4b01      	ldr	r3, [pc, #4]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	e00d      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
 80035e0:	10908100 	.word	0x10908100
 80035e4:	2302      	movs	r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	4b69      	ldr	r3, [pc, #420]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	2202      	movs	r2, #2
 80035f6:	613a      	str	r2, [r7, #16]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	fa92 f2a2 	rbit	r2, r2
 80035fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	fab2 f282 	clz	r2, r2
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f002 021f 	and.w	r2, r2, #31
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f202 	lsl.w	r2, r1, r2
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0b7      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800361e:	4b5e      	ldr	r3, [pc, #376]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	495b      	ldr	r1, [pc, #364]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800362c:	4313      	orrs	r3, r2
 800362e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003630:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003638:	4b57      	ldr	r3, [pc, #348]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a56      	ldr	r2, [pc, #344]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800363e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003642:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003650:	4b51      	ldr	r3, [pc, #324]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003654:	f023 0203 	bic.w	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	494e      	ldr	r1, [pc, #312]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800365e:	4313      	orrs	r3, r2
 8003660:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800366e:	4b4a      	ldr	r3, [pc, #296]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f023 0210 	bic.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4947      	ldr	r1, [pc, #284]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800367c:	4313      	orrs	r3, r2
 800367e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800368c:	4b42      	ldr	r3, [pc, #264]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	493f      	ldr	r1, [pc, #252]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	f023 0220 	bic.w	r2, r3, #32
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	4938      	ldr	r1, [pc, #224]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c8:	4b33      	ldr	r3, [pc, #204]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	4930      	ldr	r1, [pc, #192]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4929      	ldr	r1, [pc, #164]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003704:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	4921      	ldr	r1, [pc, #132]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003712:	4313      	orrs	r3, r2
 8003714:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003722:	4b1d      	ldr	r3, [pc, #116]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	491a      	ldr	r1, [pc, #104]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003730:	4313      	orrs	r3, r2
 8003732:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003740:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	4912      	ldr	r1, [pc, #72]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800375e:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376a:	490b      	ldr	r1, [pc, #44]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800376c:	4313      	orrs	r3, r2
 800376e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	4903      	ldr	r1, [pc, #12]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800378a:	4313      	orrs	r3, r2
 800378c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3748      	adds	r7, #72	@ 0x48
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000

0800379c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e049      	b.n	8003842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd f9ec 	bl	8000ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f000 faac 	bl	8003d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d001      	beq.n	8003864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e03b      	b.n	80038dc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a19      	ldr	r2, [pc, #100]	@ (80038e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x4e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388e:	d004      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x4e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a15      	ldr	r2, [pc, #84]	@ (80038ec <HAL_TIM_Base_Start_IT+0xa0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d115      	bne.n	80038c6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <HAL_TIM_Base_Start_IT+0xa4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b06      	cmp	r3, #6
 80038aa:	d015      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0x8c>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b2:	d011      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	e008      	b.n	80038d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e000      	b.n	80038da <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40014000 	.word	0x40014000
 80038f0:	00010007 	.word	0x00010007

080038f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a1a      	ldr	r2, [r3, #32]
 8003912:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <HAL_TIM_Base_Stop_IT+0x48>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a1a      	ldr	r2, [r3, #32]
 8003922:	f240 4344 	movw	r3, #1092	@ 0x444
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_TIM_Base_Stop_IT+0x48>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01b      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f06f 0202 	mvn.w	r2, #2
 8003986:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9ad 	bl	8003cfc <HAL_TIM_IC_CaptureCallback>
 80039a2:	e005      	b.n	80039b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f99f 	bl	8003ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9b0 	bl	8003d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01b      	beq.n	8003a02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0204 	mvn.w	r2, #4
 80039d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f987 	bl	8003cfc <HAL_TIM_IC_CaptureCallback>
 80039ee:	e005      	b.n	80039fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f979 	bl	8003ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f98a 	bl	8003d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d020      	beq.n	8003a4e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01b      	beq.n	8003a4e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f06f 0208 	mvn.w	r2, #8
 8003a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2204      	movs	r2, #4
 8003a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f961 	bl	8003cfc <HAL_TIM_IC_CaptureCallback>
 8003a3a:	e005      	b.n	8003a48 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f953 	bl	8003ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f964 	bl	8003d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01b      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f06f 0210 	mvn.w	r2, #16
 8003a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2208      	movs	r2, #8
 8003a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f93b 	bl	8003cfc <HAL_TIM_IC_CaptureCallback>
 8003a86:	e005      	b.n	8003a94 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f92d 	bl	8003ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f93e 	bl	8003d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00c      	beq.n	8003abe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f06f 0201 	mvn.w	r2, #1
 8003ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fc ffc9 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 faaf 	bl	8004040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00c      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 faa7 	bl	8004054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f8fd 	bl	8003d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00c      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f06f 0220 	mvn.w	r2, #32
 8003b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fa6f 	bl	800402c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_ConfigClockSource+0x1c>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e0b6      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x18a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b90:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bae:	d03e      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0xd8>
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb4:	f200 8087 	bhi.w	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bbc:	f000 8086 	beq.w	8003ccc <HAL_TIM_ConfigClockSource+0x176>
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc4:	d87f      	bhi.n	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
 8003bc6:	2b70      	cmp	r3, #112	@ 0x70
 8003bc8:	d01a      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0xaa>
 8003bca:	2b70      	cmp	r3, #112	@ 0x70
 8003bcc:	d87b      	bhi.n	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
 8003bce:	2b60      	cmp	r3, #96	@ 0x60
 8003bd0:	d050      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x11e>
 8003bd2:	2b60      	cmp	r3, #96	@ 0x60
 8003bd4:	d877      	bhi.n	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
 8003bd6:	2b50      	cmp	r3, #80	@ 0x50
 8003bd8:	d03c      	beq.n	8003c54 <HAL_TIM_ConfigClockSource+0xfe>
 8003bda:	2b50      	cmp	r3, #80	@ 0x50
 8003bdc:	d873      	bhi.n	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
 8003bde:	2b40      	cmp	r3, #64	@ 0x40
 8003be0:	d058      	beq.n	8003c94 <HAL_TIM_ConfigClockSource+0x13e>
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d86f      	bhi.n	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
 8003be6:	2b30      	cmp	r3, #48	@ 0x30
 8003be8:	d064      	beq.n	8003cb4 <HAL_TIM_ConfigClockSource+0x15e>
 8003bea:	2b30      	cmp	r3, #48	@ 0x30
 8003bec:	d86b      	bhi.n	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d060      	beq.n	8003cb4 <HAL_TIM_ConfigClockSource+0x15e>
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d867      	bhi.n	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d05c      	beq.n	8003cb4 <HAL_TIM_ConfigClockSource+0x15e>
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d05a      	beq.n	8003cb4 <HAL_TIM_ConfigClockSource+0x15e>
 8003bfe:	e062      	b.n	8003cc6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c10:	f000 f986 	bl	8003f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
      break;
 8003c2c:	e04f      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c3e:	f000 f96f 	bl	8003f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c50:	609a      	str	r2, [r3, #8]
      break;
 8003c52:	e03c      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c60:	461a      	mov	r2, r3
 8003c62:	f000 f8e3 	bl	8003e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2150      	movs	r1, #80	@ 0x50
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 f93c 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003c72:	e02c      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c80:	461a      	mov	r2, r3
 8003c82:	f000 f902 	bl	8003e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2160      	movs	r1, #96	@ 0x60
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f92c 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003c92:	e01c      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f000 f8c3 	bl	8003e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2140      	movs	r1, #64	@ 0x40
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f91c 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f000 f913 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ccc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a34      	ldr	r2, [pc, #208]	@ (8003e1c <TIM_Base_SetConfig+0xe4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_Base_SetConfig+0x20>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d56:	d108      	bne.n	8003d6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e1c <TIM_Base_SetConfig+0xe4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00f      	beq.n	8003d92 <TIM_Base_SetConfig+0x5a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d78:	d00b      	beq.n	8003d92 <TIM_Base_SetConfig+0x5a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a28      	ldr	r2, [pc, #160]	@ (8003e20 <TIM_Base_SetConfig+0xe8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <TIM_Base_SetConfig+0x5a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a27      	ldr	r2, [pc, #156]	@ (8003e24 <TIM_Base_SetConfig+0xec>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_Base_SetConfig+0x5a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a26      	ldr	r2, [pc, #152]	@ (8003e28 <TIM_Base_SetConfig+0xf0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d108      	bne.n	8003da4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <TIM_Base_SetConfig+0xe4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <TIM_Base_SetConfig+0xb0>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <TIM_Base_SetConfig+0xe8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_Base_SetConfig+0xb0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a12      	ldr	r2, [pc, #72]	@ (8003e24 <TIM_Base_SetConfig+0xec>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0xb0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a11      	ldr	r2, [pc, #68]	@ (8003e28 <TIM_Base_SetConfig+0xf0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d105      	bne.n	8003e0e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	611a      	str	r2, [r3, #16]
  }
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 030a 	bic.w	r3, r3, #10
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b087      	sub	sp, #28
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f023 0210 	bic.w	r2, r3, #16
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	031b      	lsls	r3, r3, #12
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f043 0307 	orr.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e04f      	b.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a21      	ldr	r2, [pc, #132]	@ (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a14      	ldr	r2, [pc, #80]	@ (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe0:	d004      	beq.n	8003fec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a10      	ldr	r2, [pc, #64]	@ (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10c      	bne.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ff2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40014000 	.word	0x40014000

0800402c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e040      	b.n	80040fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fde4 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f9e8 	bl	8004484 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f8af 	bl	8004218 <UART_SetConfig>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e01b      	b.n	80040fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fa67 	bl	80045c8 <UART_CheckIdleState>
 80040fa:	4603      	mov	r3, r0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	@ 0x28
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004118:	2b20      	cmp	r3, #32
 800411a:	d177      	bne.n	800420c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Transmit+0x24>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e070      	b.n	800420e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2221      	movs	r2, #33	@ 0x21
 8004138:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413a:	f7fd fc29 	bl	8001990 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d108      	bne.n	800416c <HAL_UART_Transmit+0x68>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e003      	b.n	8004174 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004174:	e02f      	b.n	80041d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	@ 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fac9 	bl	8004718 <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e03b      	b.n	800420e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a8:	b292      	uxth	r2, r2
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	3302      	adds	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e007      	b.n	80041c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3301      	adds	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1c9      	bne.n	8004176 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2140      	movs	r1, #64	@ 0x40
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fa93 	bl	8004718 <UART_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e005      	b.n	800420e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b8a      	ldr	r3, [pc, #552]	@ (800446c <UART_SetConfig+0x254>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	430b      	orrs	r3, r1
 800424e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a78      	ldr	r2, [pc, #480]	@ (8004470 <UART_SetConfig+0x258>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d120      	bne.n	80042d6 <UART_SetConfig+0xbe>
 8004294:	4b77      	ldr	r3, [pc, #476]	@ (8004474 <UART_SetConfig+0x25c>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d817      	bhi.n	80042d0 <UART_SetConfig+0xb8>
 80042a0:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <UART_SetConfig+0x90>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c5 	.word	0x080042c5
 80042b0:	080042cb 	.word	0x080042cb
 80042b4:	080042bf 	.word	0x080042bf
 80042b8:	2300      	movs	r3, #0
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e01d      	b.n	80042fa <UART_SetConfig+0xe2>
 80042be:	2302      	movs	r3, #2
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e01a      	b.n	80042fa <UART_SetConfig+0xe2>
 80042c4:	2304      	movs	r3, #4
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e017      	b.n	80042fa <UART_SetConfig+0xe2>
 80042ca:	2308      	movs	r3, #8
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e014      	b.n	80042fa <UART_SetConfig+0xe2>
 80042d0:	2310      	movs	r3, #16
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e011      	b.n	80042fa <UART_SetConfig+0xe2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a67      	ldr	r2, [pc, #412]	@ (8004478 <UART_SetConfig+0x260>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d102      	bne.n	80042e6 <UART_SetConfig+0xce>
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e009      	b.n	80042fa <UART_SetConfig+0xe2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a64      	ldr	r2, [pc, #400]	@ (800447c <UART_SetConfig+0x264>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d102      	bne.n	80042f6 <UART_SetConfig+0xde>
 80042f0:	2300      	movs	r3, #0
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e001      	b.n	80042fa <UART_SetConfig+0xe2>
 80042f6:	2310      	movs	r3, #16
 80042f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004302:	d15a      	bne.n	80043ba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004304:	7ffb      	ldrb	r3, [r7, #31]
 8004306:	2b08      	cmp	r3, #8
 8004308:	d827      	bhi.n	800435a <UART_SetConfig+0x142>
 800430a:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <UART_SetConfig+0xf8>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004335 	.word	0x08004335
 8004314:	0800433d 	.word	0x0800433d
 8004318:	08004345 	.word	0x08004345
 800431c:	0800435b 	.word	0x0800435b
 8004320:	0800434b 	.word	0x0800434b
 8004324:	0800435b 	.word	0x0800435b
 8004328:	0800435b 	.word	0x0800435b
 800432c:	0800435b 	.word	0x0800435b
 8004330:	08004353 	.word	0x08004353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004334:	f7ff f85c 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004338:	61b8      	str	r0, [r7, #24]
        break;
 800433a:	e013      	b.n	8004364 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800433c:	f7ff f87a 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004340:	61b8      	str	r0, [r7, #24]
        break;
 8004342:	e00f      	b.n	8004364 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004344:	4b4e      	ldr	r3, [pc, #312]	@ (8004480 <UART_SetConfig+0x268>)
 8004346:	61bb      	str	r3, [r7, #24]
        break;
 8004348:	e00c      	b.n	8004364 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434a:	f7fe fff1 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 800434e:	61b8      	str	r0, [r7, #24]
        break;
 8004350:	e008      	b.n	8004364 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004356:	61bb      	str	r3, [r7, #24]
        break;
 8004358:	e004      	b.n	8004364 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	77bb      	strb	r3, [r7, #30]
        break;
 8004362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d074      	beq.n	8004454 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	005a      	lsls	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	441a      	add	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	d916      	bls.n	80043b4 <UART_SetConfig+0x19c>
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438c:	d212      	bcs.n	80043b4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f023 030f 	bic.w	r3, r3, #15
 8004396:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	89fb      	ldrh	r3, [r7, #14]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	89fa      	ldrh	r2, [r7, #14]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	e04f      	b.n	8004454 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	77bb      	strb	r3, [r7, #30]
 80043b8:	e04c      	b.n	8004454 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ba:	7ffb      	ldrb	r3, [r7, #31]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d828      	bhi.n	8004412 <UART_SetConfig+0x1fa>
 80043c0:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <UART_SetConfig+0x1b0>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043fd 	.word	0x080043fd
 80043d4:	08004413 	.word	0x08004413
 80043d8:	08004403 	.word	0x08004403
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004413 	.word	0x08004413
 80043e4:	08004413 	.word	0x08004413
 80043e8:	0800440b 	.word	0x0800440b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7ff f800 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 80043f0:	61b8      	str	r0, [r7, #24]
        break;
 80043f2:	e013      	b.n	800441c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f4:	f7ff f81e 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 80043f8:	61b8      	str	r0, [r7, #24]
        break;
 80043fa:	e00f      	b.n	800441c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043fc:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <UART_SetConfig+0x268>)
 80043fe:	61bb      	str	r3, [r7, #24]
        break;
 8004400:	e00c      	b.n	800441c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004402:	f7fe ff95 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 8004406:	61b8      	str	r0, [r7, #24]
        break;
 8004408:	e008      	b.n	800441c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800440e:	61bb      	str	r3, [r7, #24]
        break;
 8004410:	e004      	b.n	800441c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	77bb      	strb	r3, [r7, #30]
        break;
 800441a:	bf00      	nop
    }

    if (pclk != 0U)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d018      	beq.n	8004454 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	085a      	lsrs	r2, r3, #1
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	441a      	add	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b0f      	cmp	r3, #15
 800443a:	d909      	bls.n	8004450 <UART_SetConfig+0x238>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004442:	d205      	bcs.n	8004450 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	e001      	b.n	8004454 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004460:	7fbb      	ldrb	r3, [r7, #30]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	efff69f3 	.word	0xefff69f3
 8004470:	40013800 	.word	0x40013800
 8004474:	40021000 	.word	0x40021000
 8004478:	40004400 	.word	0x40004400
 800447c:	40004800 	.word	0x40004800
 8004480:	007a1200 	.word	0x007a1200

08004484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01a      	beq.n	800459a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004582:	d10a      	bne.n	800459a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  }
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b098      	sub	sp, #96	@ 0x60
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045d8:	f7fd f9da 	bl	8001990 <HAL_GetTick>
 80045dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d12e      	bne.n	800464a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f4:	2200      	movs	r2, #0
 80045f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f88c 	bl	8004718 <UART_WaitOnFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d021      	beq.n	800464a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800461a:	653b      	str	r3, [r7, #80]	@ 0x50
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004624:	647b      	str	r3, [r7, #68]	@ 0x44
 8004626:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800462a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e6      	bne.n	8004606 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e062      	b.n	8004710 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b04      	cmp	r3, #4
 8004656:	d149      	bne.n	80046ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004660:	2200      	movs	r2, #0
 8004662:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f856 	bl	8004718 <UART_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d03c      	beq.n	80046ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	623b      	str	r3, [r7, #32]
   return(result);
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004690:	633b      	str	r3, [r7, #48]	@ 0x30
 8004692:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e6      	bne.n	8004672 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046c4:	61fa      	str	r2, [r7, #28]
 80046c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	69b9      	ldr	r1, [r7, #24]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	617b      	str	r3, [r7, #20]
   return(result);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e011      	b.n	8004710 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3758      	adds	r7, #88	@ 0x58
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004728:	e04f      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d04b      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004732:	f7fd f92d 	bl	8001990 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	429a      	cmp	r2, r3
 8004740:	d302      	bcc.n	8004748 <UART_WaitOnFlagUntilTimeout+0x30>
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e04e      	b.n	80047ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	d037      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b80      	cmp	r3, #128	@ 0x80
 800475e:	d034      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d031      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d110      	bne.n	8004796 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2208      	movs	r2, #8
 800477a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f838 	bl	80047f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2208      	movs	r2, #8
 8004786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e029      	b.n	80047ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a4:	d111      	bne.n	80047ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f81e 	bl	80047f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e00f      	b.n	80047ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d0a0      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b095      	sub	sp, #84	@ 0x54
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800480e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004818:	643b      	str	r3, [r7, #64]	@ 0x40
 800481a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800481e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	61fb      	str	r3, [r7, #28]
   return(result);
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3308      	adds	r3, #8
 800484a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800484c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800484e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004864:	2b01      	cmp	r3, #1
 8004866:	d118      	bne.n	800489a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	60bb      	str	r3, [r7, #8]
   return(result);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f023 0310 	bic.w	r3, r3, #16
 800487c:	647b      	str	r3, [r7, #68]	@ 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6979      	ldr	r1, [r7, #20]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	613b      	str	r3, [r7, #16]
   return(result);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e6      	bne.n	8004868 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048ae:	bf00      	nop
 80048b0:	3754      	adds	r7, #84	@ 0x54
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <siprintf>:
 80048bc:	b40e      	push	{r1, r2, r3}
 80048be:	b500      	push	{lr}
 80048c0:	b09c      	sub	sp, #112	@ 0x70
 80048c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80048c4:	9002      	str	r0, [sp, #8]
 80048c6:	9006      	str	r0, [sp, #24]
 80048c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048cc:	4809      	ldr	r0, [pc, #36]	@ (80048f4 <siprintf+0x38>)
 80048ce:	9107      	str	r1, [sp, #28]
 80048d0:	9104      	str	r1, [sp, #16]
 80048d2:	4909      	ldr	r1, [pc, #36]	@ (80048f8 <siprintf+0x3c>)
 80048d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d8:	9105      	str	r1, [sp, #20]
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	a902      	add	r1, sp, #8
 80048e0:	f000 f994 	bl	8004c0c <_svfiprintf_r>
 80048e4:	9b02      	ldr	r3, [sp, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	b01c      	add	sp, #112	@ 0x70
 80048ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f0:	b003      	add	sp, #12
 80048f2:	4770      	bx	lr
 80048f4:	2000000c 	.word	0x2000000c
 80048f8:	ffff0208 	.word	0xffff0208

080048fc <memset>:
 80048fc:	4402      	add	r2, r0
 80048fe:	4603      	mov	r3, r0
 8004900:	4293      	cmp	r3, r2
 8004902:	d100      	bne.n	8004906 <memset+0xa>
 8004904:	4770      	bx	lr
 8004906:	f803 1b01 	strb.w	r1, [r3], #1
 800490a:	e7f9      	b.n	8004900 <memset+0x4>

0800490c <__errno>:
 800490c:	4b01      	ldr	r3, [pc, #4]	@ (8004914 <__errno+0x8>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000000c 	.word	0x2000000c

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4d0d      	ldr	r5, [pc, #52]	@ (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	@ (8004954 <__libc_init_array+0x3c>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2600      	movs	r6, #0
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4d0b      	ldr	r5, [pc, #44]	@ (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	@ (800495c <__libc_init_array+0x44>)
 800492c:	f000 fc66 	bl	80051fc <_init>
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2600      	movs	r6, #0
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	0800534c 	.word	0x0800534c
 8004954:	0800534c 	.word	0x0800534c
 8004958:	0800534c 	.word	0x0800534c
 800495c:	08005350 	.word	0x08005350

08004960 <__retarget_lock_acquire_recursive>:
 8004960:	4770      	bx	lr

08004962 <__retarget_lock_release_recursive>:
 8004962:	4770      	bx	lr

08004964 <_free_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	4605      	mov	r5, r0
 8004968:	2900      	cmp	r1, #0
 800496a:	d041      	beq.n	80049f0 <_free_r+0x8c>
 800496c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004970:	1f0c      	subs	r4, r1, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfb8      	it	lt
 8004976:	18e4      	addlt	r4, r4, r3
 8004978:	f000 f8e0 	bl	8004b3c <__malloc_lock>
 800497c:	4a1d      	ldr	r2, [pc, #116]	@ (80049f4 <_free_r+0x90>)
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	b933      	cbnz	r3, 8004990 <_free_r+0x2c>
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	6014      	str	r4, [r2, #0]
 8004986:	4628      	mov	r0, r5
 8004988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800498c:	f000 b8dc 	b.w	8004b48 <__malloc_unlock>
 8004990:	42a3      	cmp	r3, r4
 8004992:	d908      	bls.n	80049a6 <_free_r+0x42>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	1821      	adds	r1, r4, r0
 8004998:	428b      	cmp	r3, r1
 800499a:	bf01      	itttt	eq
 800499c:	6819      	ldreq	r1, [r3, #0]
 800499e:	685b      	ldreq	r3, [r3, #4]
 80049a0:	1809      	addeq	r1, r1, r0
 80049a2:	6021      	streq	r1, [r4, #0]
 80049a4:	e7ed      	b.n	8004982 <_free_r+0x1e>
 80049a6:	461a      	mov	r2, r3
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b10b      	cbz	r3, 80049b0 <_free_r+0x4c>
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d9fa      	bls.n	80049a6 <_free_r+0x42>
 80049b0:	6811      	ldr	r1, [r2, #0]
 80049b2:	1850      	adds	r0, r2, r1
 80049b4:	42a0      	cmp	r0, r4
 80049b6:	d10b      	bne.n	80049d0 <_free_r+0x6c>
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	4401      	add	r1, r0
 80049bc:	1850      	adds	r0, r2, r1
 80049be:	4283      	cmp	r3, r0
 80049c0:	6011      	str	r1, [r2, #0]
 80049c2:	d1e0      	bne.n	8004986 <_free_r+0x22>
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	6053      	str	r3, [r2, #4]
 80049ca:	4408      	add	r0, r1
 80049cc:	6010      	str	r0, [r2, #0]
 80049ce:	e7da      	b.n	8004986 <_free_r+0x22>
 80049d0:	d902      	bls.n	80049d8 <_free_r+0x74>
 80049d2:	230c      	movs	r3, #12
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	e7d6      	b.n	8004986 <_free_r+0x22>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	1821      	adds	r1, r4, r0
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf04      	itt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	6063      	str	r3, [r4, #4]
 80049e6:	bf04      	itt	eq
 80049e8:	1809      	addeq	r1, r1, r0
 80049ea:	6021      	streq	r1, [r4, #0]
 80049ec:	6054      	str	r4, [r2, #4]
 80049ee:	e7ca      	b.n	8004986 <_free_r+0x22>
 80049f0:	bd38      	pop	{r3, r4, r5, pc}
 80049f2:	bf00      	nop
 80049f4:	200003a4 	.word	0x200003a4

080049f8 <sbrk_aligned>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004a38 <sbrk_aligned+0x40>)
 80049fc:	460c      	mov	r4, r1
 80049fe:	6831      	ldr	r1, [r6, #0]
 8004a00:	4605      	mov	r5, r0
 8004a02:	b911      	cbnz	r1, 8004a0a <sbrk_aligned+0x12>
 8004a04:	f000 fba6 	bl	8005154 <_sbrk_r>
 8004a08:	6030      	str	r0, [r6, #0]
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f000 fba1 	bl	8005154 <_sbrk_r>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	d103      	bne.n	8004a1e <sbrk_aligned+0x26>
 8004a16:	f04f 34ff 	mov.w	r4, #4294967295
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	1cc4      	adds	r4, r0, #3
 8004a20:	f024 0403 	bic.w	r4, r4, #3
 8004a24:	42a0      	cmp	r0, r4
 8004a26:	d0f8      	beq.n	8004a1a <sbrk_aligned+0x22>
 8004a28:	1a21      	subs	r1, r4, r0
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 fb92 	bl	8005154 <_sbrk_r>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d1f2      	bne.n	8004a1a <sbrk_aligned+0x22>
 8004a34:	e7ef      	b.n	8004a16 <sbrk_aligned+0x1e>
 8004a36:	bf00      	nop
 8004a38:	200003a0 	.word	0x200003a0

08004a3c <_malloc_r>:
 8004a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a40:	1ccd      	adds	r5, r1, #3
 8004a42:	f025 0503 	bic.w	r5, r5, #3
 8004a46:	3508      	adds	r5, #8
 8004a48:	2d0c      	cmp	r5, #12
 8004a4a:	bf38      	it	cc
 8004a4c:	250c      	movcc	r5, #12
 8004a4e:	2d00      	cmp	r5, #0
 8004a50:	4606      	mov	r6, r0
 8004a52:	db01      	blt.n	8004a58 <_malloc_r+0x1c>
 8004a54:	42a9      	cmp	r1, r5
 8004a56:	d904      	bls.n	8004a62 <_malloc_r+0x26>
 8004a58:	230c      	movs	r3, #12
 8004a5a:	6033      	str	r3, [r6, #0]
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b38 <_malloc_r+0xfc>
 8004a66:	f000 f869 	bl	8004b3c <__malloc_lock>
 8004a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a6e:	461c      	mov	r4, r3
 8004a70:	bb44      	cbnz	r4, 8004ac4 <_malloc_r+0x88>
 8004a72:	4629      	mov	r1, r5
 8004a74:	4630      	mov	r0, r6
 8004a76:	f7ff ffbf 	bl	80049f8 <sbrk_aligned>
 8004a7a:	1c43      	adds	r3, r0, #1
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	d158      	bne.n	8004b32 <_malloc_r+0xf6>
 8004a80:	f8d8 4000 	ldr.w	r4, [r8]
 8004a84:	4627      	mov	r7, r4
 8004a86:	2f00      	cmp	r7, #0
 8004a88:	d143      	bne.n	8004b12 <_malloc_r+0xd6>
 8004a8a:	2c00      	cmp	r4, #0
 8004a8c:	d04b      	beq.n	8004b26 <_malloc_r+0xea>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	4639      	mov	r1, r7
 8004a92:	4630      	mov	r0, r6
 8004a94:	eb04 0903 	add.w	r9, r4, r3
 8004a98:	f000 fb5c 	bl	8005154 <_sbrk_r>
 8004a9c:	4581      	cmp	r9, r0
 8004a9e:	d142      	bne.n	8004b26 <_malloc_r+0xea>
 8004aa0:	6821      	ldr	r1, [r4, #0]
 8004aa2:	1a6d      	subs	r5, r5, r1
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7ff ffa6 	bl	80049f8 <sbrk_aligned>
 8004aac:	3001      	adds	r0, #1
 8004aae:	d03a      	beq.n	8004b26 <_malloc_r+0xea>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	442b      	add	r3, r5
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	bb62      	cbnz	r2, 8004b18 <_malloc_r+0xdc>
 8004abe:	f8c8 7000 	str.w	r7, [r8]
 8004ac2:	e00f      	b.n	8004ae4 <_malloc_r+0xa8>
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	1b52      	subs	r2, r2, r5
 8004ac8:	d420      	bmi.n	8004b0c <_malloc_r+0xd0>
 8004aca:	2a0b      	cmp	r2, #11
 8004acc:	d917      	bls.n	8004afe <_malloc_r+0xc2>
 8004ace:	1961      	adds	r1, r4, r5
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	6025      	str	r5, [r4, #0]
 8004ad4:	bf18      	it	ne
 8004ad6:	6059      	strne	r1, [r3, #4]
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	bf08      	it	eq
 8004adc:	f8c8 1000 	streq.w	r1, [r8]
 8004ae0:	5162      	str	r2, [r4, r5]
 8004ae2:	604b      	str	r3, [r1, #4]
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f000 f82f 	bl	8004b48 <__malloc_unlock>
 8004aea:	f104 000b 	add.w	r0, r4, #11
 8004aee:	1d23      	adds	r3, r4, #4
 8004af0:	f020 0007 	bic.w	r0, r0, #7
 8004af4:	1ac2      	subs	r2, r0, r3
 8004af6:	bf1c      	itt	ne
 8004af8:	1a1b      	subne	r3, r3, r0
 8004afa:	50a3      	strne	r3, [r4, r2]
 8004afc:	e7af      	b.n	8004a5e <_malloc_r+0x22>
 8004afe:	6862      	ldr	r2, [r4, #4]
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	bf0c      	ite	eq
 8004b04:	f8c8 2000 	streq.w	r2, [r8]
 8004b08:	605a      	strne	r2, [r3, #4]
 8004b0a:	e7eb      	b.n	8004ae4 <_malloc_r+0xa8>
 8004b0c:	4623      	mov	r3, r4
 8004b0e:	6864      	ldr	r4, [r4, #4]
 8004b10:	e7ae      	b.n	8004a70 <_malloc_r+0x34>
 8004b12:	463c      	mov	r4, r7
 8004b14:	687f      	ldr	r7, [r7, #4]
 8004b16:	e7b6      	b.n	8004a86 <_malloc_r+0x4a>
 8004b18:	461a      	mov	r2, r3
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	d1fb      	bne.n	8004b18 <_malloc_r+0xdc>
 8004b20:	2300      	movs	r3, #0
 8004b22:	6053      	str	r3, [r2, #4]
 8004b24:	e7de      	b.n	8004ae4 <_malloc_r+0xa8>
 8004b26:	230c      	movs	r3, #12
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f000 f80c 	bl	8004b48 <__malloc_unlock>
 8004b30:	e794      	b.n	8004a5c <_malloc_r+0x20>
 8004b32:	6005      	str	r5, [r0, #0]
 8004b34:	e7d6      	b.n	8004ae4 <_malloc_r+0xa8>
 8004b36:	bf00      	nop
 8004b38:	200003a4 	.word	0x200003a4

08004b3c <__malloc_lock>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	@ (8004b44 <__malloc_lock+0x8>)
 8004b3e:	f7ff bf0f 	b.w	8004960 <__retarget_lock_acquire_recursive>
 8004b42:	bf00      	nop
 8004b44:	2000039c 	.word	0x2000039c

08004b48 <__malloc_unlock>:
 8004b48:	4801      	ldr	r0, [pc, #4]	@ (8004b50 <__malloc_unlock+0x8>)
 8004b4a:	f7ff bf0a 	b.w	8004962 <__retarget_lock_release_recursive>
 8004b4e:	bf00      	nop
 8004b50:	2000039c 	.word	0x2000039c

08004b54 <__ssputs_r>:
 8004b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b58:	688e      	ldr	r6, [r1, #8]
 8004b5a:	461f      	mov	r7, r3
 8004b5c:	42be      	cmp	r6, r7
 8004b5e:	680b      	ldr	r3, [r1, #0]
 8004b60:	4682      	mov	sl, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	4690      	mov	r8, r2
 8004b66:	d82d      	bhi.n	8004bc4 <__ssputs_r+0x70>
 8004b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b70:	d026      	beq.n	8004bc0 <__ssputs_r+0x6c>
 8004b72:	6965      	ldr	r5, [r4, #20]
 8004b74:	6909      	ldr	r1, [r1, #16]
 8004b76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b7a:	eba3 0901 	sub.w	r9, r3, r1
 8004b7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b82:	1c7b      	adds	r3, r7, #1
 8004b84:	444b      	add	r3, r9
 8004b86:	106d      	asrs	r5, r5, #1
 8004b88:	429d      	cmp	r5, r3
 8004b8a:	bf38      	it	cc
 8004b8c:	461d      	movcc	r5, r3
 8004b8e:	0553      	lsls	r3, r2, #21
 8004b90:	d527      	bpl.n	8004be2 <__ssputs_r+0x8e>
 8004b92:	4629      	mov	r1, r5
 8004b94:	f7ff ff52 	bl	8004a3c <_malloc_r>
 8004b98:	4606      	mov	r6, r0
 8004b9a:	b360      	cbz	r0, 8004bf6 <__ssputs_r+0xa2>
 8004b9c:	6921      	ldr	r1, [r4, #16]
 8004b9e:	464a      	mov	r2, r9
 8004ba0:	f000 fae8 	bl	8005174 <memcpy>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	6126      	str	r6, [r4, #16]
 8004bb2:	6165      	str	r5, [r4, #20]
 8004bb4:	444e      	add	r6, r9
 8004bb6:	eba5 0509 	sub.w	r5, r5, r9
 8004bba:	6026      	str	r6, [r4, #0]
 8004bbc:	60a5      	str	r5, [r4, #8]
 8004bbe:	463e      	mov	r6, r7
 8004bc0:	42be      	cmp	r6, r7
 8004bc2:	d900      	bls.n	8004bc6 <__ssputs_r+0x72>
 8004bc4:	463e      	mov	r6, r7
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	4632      	mov	r2, r6
 8004bca:	4641      	mov	r1, r8
 8004bcc:	f000 faa8 	bl	8005120 <memmove>
 8004bd0:	68a3      	ldr	r3, [r4, #8]
 8004bd2:	1b9b      	subs	r3, r3, r6
 8004bd4:	60a3      	str	r3, [r4, #8]
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	4433      	add	r3, r6
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	2000      	movs	r0, #0
 8004bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be2:	462a      	mov	r2, r5
 8004be4:	f000 fad4 	bl	8005190 <_realloc_r>
 8004be8:	4606      	mov	r6, r0
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d1e0      	bne.n	8004bb0 <__ssputs_r+0x5c>
 8004bee:	6921      	ldr	r1, [r4, #16]
 8004bf0:	4650      	mov	r0, sl
 8004bf2:	f7ff feb7 	bl	8004964 <_free_r>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	f8ca 3000 	str.w	r3, [sl]
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	e7e9      	b.n	8004bde <__ssputs_r+0x8a>
	...

08004c0c <_svfiprintf_r>:
 8004c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c10:	4698      	mov	r8, r3
 8004c12:	898b      	ldrh	r3, [r1, #12]
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	b09d      	sub	sp, #116	@ 0x74
 8004c18:	4607      	mov	r7, r0
 8004c1a:	460d      	mov	r5, r1
 8004c1c:	4614      	mov	r4, r2
 8004c1e:	d510      	bpl.n	8004c42 <_svfiprintf_r+0x36>
 8004c20:	690b      	ldr	r3, [r1, #16]
 8004c22:	b973      	cbnz	r3, 8004c42 <_svfiprintf_r+0x36>
 8004c24:	2140      	movs	r1, #64	@ 0x40
 8004c26:	f7ff ff09 	bl	8004a3c <_malloc_r>
 8004c2a:	6028      	str	r0, [r5, #0]
 8004c2c:	6128      	str	r0, [r5, #16]
 8004c2e:	b930      	cbnz	r0, 8004c3e <_svfiprintf_r+0x32>
 8004c30:	230c      	movs	r3, #12
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	b01d      	add	sp, #116	@ 0x74
 8004c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3e:	2340      	movs	r3, #64	@ 0x40
 8004c40:	616b      	str	r3, [r5, #20]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c46:	2320      	movs	r3, #32
 8004c48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c50:	2330      	movs	r3, #48	@ 0x30
 8004c52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004df0 <_svfiprintf_r+0x1e4>
 8004c56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c5a:	f04f 0901 	mov.w	r9, #1
 8004c5e:	4623      	mov	r3, r4
 8004c60:	469a      	mov	sl, r3
 8004c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c66:	b10a      	cbz	r2, 8004c6c <_svfiprintf_r+0x60>
 8004c68:	2a25      	cmp	r2, #37	@ 0x25
 8004c6a:	d1f9      	bne.n	8004c60 <_svfiprintf_r+0x54>
 8004c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c70:	d00b      	beq.n	8004c8a <_svfiprintf_r+0x7e>
 8004c72:	465b      	mov	r3, fp
 8004c74:	4622      	mov	r2, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	4638      	mov	r0, r7
 8004c7a:	f7ff ff6b 	bl	8004b54 <__ssputs_r>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f000 80a7 	beq.w	8004dd2 <_svfiprintf_r+0x1c6>
 8004c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c86:	445a      	add	r2, fp
 8004c88:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 809f 	beq.w	8004dd2 <_svfiprintf_r+0x1c6>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c9e:	f10a 0a01 	add.w	sl, sl, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	9307      	str	r3, [sp, #28]
 8004ca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004caa:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cac:	4654      	mov	r4, sl
 8004cae:	2205      	movs	r2, #5
 8004cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb4:	484e      	ldr	r0, [pc, #312]	@ (8004df0 <_svfiprintf_r+0x1e4>)
 8004cb6:	f7fb fa8b 	bl	80001d0 <memchr>
 8004cba:	9a04      	ldr	r2, [sp, #16]
 8004cbc:	b9d8      	cbnz	r0, 8004cf6 <_svfiprintf_r+0xea>
 8004cbe:	06d0      	lsls	r0, r2, #27
 8004cc0:	bf44      	itt	mi
 8004cc2:	2320      	movmi	r3, #32
 8004cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cc8:	0711      	lsls	r1, r2, #28
 8004cca:	bf44      	itt	mi
 8004ccc:	232b      	movmi	r3, #43	@ 0x2b
 8004cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cd8:	d015      	beq.n	8004d06 <_svfiprintf_r+0xfa>
 8004cda:	9a07      	ldr	r2, [sp, #28]
 8004cdc:	4654      	mov	r4, sl
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f04f 0c0a 	mov.w	ip, #10
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cea:	3b30      	subs	r3, #48	@ 0x30
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	d94b      	bls.n	8004d88 <_svfiprintf_r+0x17c>
 8004cf0:	b1b0      	cbz	r0, 8004d20 <_svfiprintf_r+0x114>
 8004cf2:	9207      	str	r2, [sp, #28]
 8004cf4:	e014      	b.n	8004d20 <_svfiprintf_r+0x114>
 8004cf6:	eba0 0308 	sub.w	r3, r0, r8
 8004cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	46a2      	mov	sl, r4
 8004d04:	e7d2      	b.n	8004cac <_svfiprintf_r+0xa0>
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	1d19      	adds	r1, r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	9103      	str	r1, [sp, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfbb      	ittet	lt
 8004d12:	425b      	neglt	r3, r3
 8004d14:	f042 0202 	orrlt.w	r2, r2, #2
 8004d18:	9307      	strge	r3, [sp, #28]
 8004d1a:	9307      	strlt	r3, [sp, #28]
 8004d1c:	bfb8      	it	lt
 8004d1e:	9204      	strlt	r2, [sp, #16]
 8004d20:	7823      	ldrb	r3, [r4, #0]
 8004d22:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d24:	d10a      	bne.n	8004d3c <_svfiprintf_r+0x130>
 8004d26:	7863      	ldrb	r3, [r4, #1]
 8004d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d2a:	d132      	bne.n	8004d92 <_svfiprintf_r+0x186>
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	1d1a      	adds	r2, r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	9203      	str	r2, [sp, #12]
 8004d34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d38:	3402      	adds	r4, #2
 8004d3a:	9305      	str	r3, [sp, #20]
 8004d3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e00 <_svfiprintf_r+0x1f4>
 8004d40:	7821      	ldrb	r1, [r4, #0]
 8004d42:	2203      	movs	r2, #3
 8004d44:	4650      	mov	r0, sl
 8004d46:	f7fb fa43 	bl	80001d0 <memchr>
 8004d4a:	b138      	cbz	r0, 8004d5c <_svfiprintf_r+0x150>
 8004d4c:	9b04      	ldr	r3, [sp, #16]
 8004d4e:	eba0 000a 	sub.w	r0, r0, sl
 8004d52:	2240      	movs	r2, #64	@ 0x40
 8004d54:	4082      	lsls	r2, r0
 8004d56:	4313      	orrs	r3, r2
 8004d58:	3401      	adds	r4, #1
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d60:	4824      	ldr	r0, [pc, #144]	@ (8004df4 <_svfiprintf_r+0x1e8>)
 8004d62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d66:	2206      	movs	r2, #6
 8004d68:	f7fb fa32 	bl	80001d0 <memchr>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d036      	beq.n	8004dde <_svfiprintf_r+0x1d2>
 8004d70:	4b21      	ldr	r3, [pc, #132]	@ (8004df8 <_svfiprintf_r+0x1ec>)
 8004d72:	bb1b      	cbnz	r3, 8004dbc <_svfiprintf_r+0x1b0>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	3307      	adds	r3, #7
 8004d78:	f023 0307 	bic.w	r3, r3, #7
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	9303      	str	r3, [sp, #12]
 8004d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d82:	4433      	add	r3, r6
 8004d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d86:	e76a      	b.n	8004c5e <_svfiprintf_r+0x52>
 8004d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	2001      	movs	r0, #1
 8004d90:	e7a8      	b.n	8004ce4 <_svfiprintf_r+0xd8>
 8004d92:	2300      	movs	r3, #0
 8004d94:	3401      	adds	r4, #1
 8004d96:	9305      	str	r3, [sp, #20]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f04f 0c0a 	mov.w	ip, #10
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da4:	3a30      	subs	r2, #48	@ 0x30
 8004da6:	2a09      	cmp	r2, #9
 8004da8:	d903      	bls.n	8004db2 <_svfiprintf_r+0x1a6>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0c6      	beq.n	8004d3c <_svfiprintf_r+0x130>
 8004dae:	9105      	str	r1, [sp, #20]
 8004db0:	e7c4      	b.n	8004d3c <_svfiprintf_r+0x130>
 8004db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004db6:	4604      	mov	r4, r0
 8004db8:	2301      	movs	r3, #1
 8004dba:	e7f0      	b.n	8004d9e <_svfiprintf_r+0x192>
 8004dbc:	ab03      	add	r3, sp, #12
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	462a      	mov	r2, r5
 8004dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004dfc <_svfiprintf_r+0x1f0>)
 8004dc4:	a904      	add	r1, sp, #16
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f3af 8000 	nop.w
 8004dcc:	1c42      	adds	r2, r0, #1
 8004dce:	4606      	mov	r6, r0
 8004dd0:	d1d6      	bne.n	8004d80 <_svfiprintf_r+0x174>
 8004dd2:	89ab      	ldrh	r3, [r5, #12]
 8004dd4:	065b      	lsls	r3, r3, #25
 8004dd6:	f53f af2d 	bmi.w	8004c34 <_svfiprintf_r+0x28>
 8004dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ddc:	e72c      	b.n	8004c38 <_svfiprintf_r+0x2c>
 8004dde:	ab03      	add	r3, sp, #12
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	462a      	mov	r2, r5
 8004de4:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <_svfiprintf_r+0x1f0>)
 8004de6:	a904      	add	r1, sp, #16
 8004de8:	4638      	mov	r0, r7
 8004dea:	f000 f879 	bl	8004ee0 <_printf_i>
 8004dee:	e7ed      	b.n	8004dcc <_svfiprintf_r+0x1c0>
 8004df0:	08005310 	.word	0x08005310
 8004df4:	0800531a 	.word	0x0800531a
 8004df8:	00000000 	.word	0x00000000
 8004dfc:	08004b55 	.word	0x08004b55
 8004e00:	08005316 	.word	0x08005316

08004e04 <_printf_common>:
 8004e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	4616      	mov	r6, r2
 8004e0a:	4698      	mov	r8, r3
 8004e0c:	688a      	ldr	r2, [r1, #8]
 8004e0e:	690b      	ldr	r3, [r1, #16]
 8004e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e14:	4293      	cmp	r3, r2
 8004e16:	bfb8      	it	lt
 8004e18:	4613      	movlt	r3, r2
 8004e1a:	6033      	str	r3, [r6, #0]
 8004e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e20:	4607      	mov	r7, r0
 8004e22:	460c      	mov	r4, r1
 8004e24:	b10a      	cbz	r2, 8004e2a <_printf_common+0x26>
 8004e26:	3301      	adds	r3, #1
 8004e28:	6033      	str	r3, [r6, #0]
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	0699      	lsls	r1, r3, #26
 8004e2e:	bf42      	ittt	mi
 8004e30:	6833      	ldrmi	r3, [r6, #0]
 8004e32:	3302      	addmi	r3, #2
 8004e34:	6033      	strmi	r3, [r6, #0]
 8004e36:	6825      	ldr	r5, [r4, #0]
 8004e38:	f015 0506 	ands.w	r5, r5, #6
 8004e3c:	d106      	bne.n	8004e4c <_printf_common+0x48>
 8004e3e:	f104 0a19 	add.w	sl, r4, #25
 8004e42:	68e3      	ldr	r3, [r4, #12]
 8004e44:	6832      	ldr	r2, [r6, #0]
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	42ab      	cmp	r3, r5
 8004e4a:	dc26      	bgt.n	8004e9a <_printf_common+0x96>
 8004e4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	3b00      	subs	r3, #0
 8004e54:	bf18      	it	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	0692      	lsls	r2, r2, #26
 8004e5a:	d42b      	bmi.n	8004eb4 <_printf_common+0xb0>
 8004e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e60:	4641      	mov	r1, r8
 8004e62:	4638      	mov	r0, r7
 8004e64:	47c8      	blx	r9
 8004e66:	3001      	adds	r0, #1
 8004e68:	d01e      	beq.n	8004ea8 <_printf_common+0xa4>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	6922      	ldr	r2, [r4, #16]
 8004e6e:	f003 0306 	and.w	r3, r3, #6
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	bf02      	ittt	eq
 8004e76:	68e5      	ldreq	r5, [r4, #12]
 8004e78:	6833      	ldreq	r3, [r6, #0]
 8004e7a:	1aed      	subeq	r5, r5, r3
 8004e7c:	68a3      	ldr	r3, [r4, #8]
 8004e7e:	bf0c      	ite	eq
 8004e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e84:	2500      	movne	r5, #0
 8004e86:	4293      	cmp	r3, r2
 8004e88:	bfc4      	itt	gt
 8004e8a:	1a9b      	subgt	r3, r3, r2
 8004e8c:	18ed      	addgt	r5, r5, r3
 8004e8e:	2600      	movs	r6, #0
 8004e90:	341a      	adds	r4, #26
 8004e92:	42b5      	cmp	r5, r6
 8004e94:	d11a      	bne.n	8004ecc <_printf_common+0xc8>
 8004e96:	2000      	movs	r0, #0
 8004e98:	e008      	b.n	8004eac <_printf_common+0xa8>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4652      	mov	r2, sl
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	47c8      	blx	r9
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d103      	bne.n	8004eb0 <_printf_common+0xac>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb0:	3501      	adds	r5, #1
 8004eb2:	e7c6      	b.n	8004e42 <_printf_common+0x3e>
 8004eb4:	18e1      	adds	r1, r4, r3
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	2030      	movs	r0, #48	@ 0x30
 8004eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ebe:	4422      	add	r2, r4
 8004ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ec8:	3302      	adds	r3, #2
 8004eca:	e7c7      	b.n	8004e5c <_printf_common+0x58>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4622      	mov	r2, r4
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	47c8      	blx	r9
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d0e6      	beq.n	8004ea8 <_printf_common+0xa4>
 8004eda:	3601      	adds	r6, #1
 8004edc:	e7d9      	b.n	8004e92 <_printf_common+0x8e>
	...

08004ee0 <_printf_i>:
 8004ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee4:	7e0f      	ldrb	r7, [r1, #24]
 8004ee6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ee8:	2f78      	cmp	r7, #120	@ 0x78
 8004eea:	4691      	mov	r9, r2
 8004eec:	4680      	mov	r8, r0
 8004eee:	460c      	mov	r4, r1
 8004ef0:	469a      	mov	sl, r3
 8004ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ef6:	d807      	bhi.n	8004f08 <_printf_i+0x28>
 8004ef8:	2f62      	cmp	r7, #98	@ 0x62
 8004efa:	d80a      	bhi.n	8004f12 <_printf_i+0x32>
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	f000 80d2 	beq.w	80050a6 <_printf_i+0x1c6>
 8004f02:	2f58      	cmp	r7, #88	@ 0x58
 8004f04:	f000 80b9 	beq.w	800507a <_printf_i+0x19a>
 8004f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f10:	e03a      	b.n	8004f88 <_printf_i+0xa8>
 8004f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f16:	2b15      	cmp	r3, #21
 8004f18:	d8f6      	bhi.n	8004f08 <_printf_i+0x28>
 8004f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f20 <_printf_i+0x40>)
 8004f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f20:	08004f79 	.word	0x08004f79
 8004f24:	08004f8d 	.word	0x08004f8d
 8004f28:	08004f09 	.word	0x08004f09
 8004f2c:	08004f09 	.word	0x08004f09
 8004f30:	08004f09 	.word	0x08004f09
 8004f34:	08004f09 	.word	0x08004f09
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004f09 	.word	0x08004f09
 8004f40:	08004f09 	.word	0x08004f09
 8004f44:	08004f09 	.word	0x08004f09
 8004f48:	08004f09 	.word	0x08004f09
 8004f4c:	0800508d 	.word	0x0800508d
 8004f50:	08004fb7 	.word	0x08004fb7
 8004f54:	08005047 	.word	0x08005047
 8004f58:	08004f09 	.word	0x08004f09
 8004f5c:	08004f09 	.word	0x08004f09
 8004f60:	080050af 	.word	0x080050af
 8004f64:	08004f09 	.word	0x08004f09
 8004f68:	08004fb7 	.word	0x08004fb7
 8004f6c:	08004f09 	.word	0x08004f09
 8004f70:	08004f09 	.word	0x08004f09
 8004f74:	0800504f 	.word	0x0800504f
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	1d1a      	adds	r2, r3, #4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6032      	str	r2, [r6, #0]
 8004f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e09d      	b.n	80050c8 <_printf_i+0x1e8>
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	1d19      	adds	r1, r3, #4
 8004f92:	6031      	str	r1, [r6, #0]
 8004f94:	0606      	lsls	r6, r0, #24
 8004f96:	d501      	bpl.n	8004f9c <_printf_i+0xbc>
 8004f98:	681d      	ldr	r5, [r3, #0]
 8004f9a:	e003      	b.n	8004fa4 <_printf_i+0xc4>
 8004f9c:	0645      	lsls	r5, r0, #25
 8004f9e:	d5fb      	bpl.n	8004f98 <_printf_i+0xb8>
 8004fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fa4:	2d00      	cmp	r5, #0
 8004fa6:	da03      	bge.n	8004fb0 <_printf_i+0xd0>
 8004fa8:	232d      	movs	r3, #45	@ 0x2d
 8004faa:	426d      	negs	r5, r5
 8004fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb0:	4859      	ldr	r0, [pc, #356]	@ (8005118 <_printf_i+0x238>)
 8004fb2:	230a      	movs	r3, #10
 8004fb4:	e011      	b.n	8004fda <_printf_i+0xfa>
 8004fb6:	6821      	ldr	r1, [r4, #0]
 8004fb8:	6833      	ldr	r3, [r6, #0]
 8004fba:	0608      	lsls	r0, r1, #24
 8004fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fc0:	d402      	bmi.n	8004fc8 <_printf_i+0xe8>
 8004fc2:	0649      	lsls	r1, r1, #25
 8004fc4:	bf48      	it	mi
 8004fc6:	b2ad      	uxthmi	r5, r5
 8004fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fca:	4853      	ldr	r0, [pc, #332]	@ (8005118 <_printf_i+0x238>)
 8004fcc:	6033      	str	r3, [r6, #0]
 8004fce:	bf14      	ite	ne
 8004fd0:	230a      	movne	r3, #10
 8004fd2:	2308      	moveq	r3, #8
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fda:	6866      	ldr	r6, [r4, #4]
 8004fdc:	60a6      	str	r6, [r4, #8]
 8004fde:	2e00      	cmp	r6, #0
 8004fe0:	bfa2      	ittt	ge
 8004fe2:	6821      	ldrge	r1, [r4, #0]
 8004fe4:	f021 0104 	bicge.w	r1, r1, #4
 8004fe8:	6021      	strge	r1, [r4, #0]
 8004fea:	b90d      	cbnz	r5, 8004ff0 <_printf_i+0x110>
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	d04b      	beq.n	8005088 <_printf_i+0x1a8>
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ff6:	fb03 5711 	mls	r7, r3, r1, r5
 8004ffa:	5dc7      	ldrb	r7, [r0, r7]
 8004ffc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005000:	462f      	mov	r7, r5
 8005002:	42bb      	cmp	r3, r7
 8005004:	460d      	mov	r5, r1
 8005006:	d9f4      	bls.n	8004ff2 <_printf_i+0x112>
 8005008:	2b08      	cmp	r3, #8
 800500a:	d10b      	bne.n	8005024 <_printf_i+0x144>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	07df      	lsls	r7, r3, #31
 8005010:	d508      	bpl.n	8005024 <_printf_i+0x144>
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	6861      	ldr	r1, [r4, #4]
 8005016:	4299      	cmp	r1, r3
 8005018:	bfde      	ittt	le
 800501a:	2330      	movle	r3, #48	@ 0x30
 800501c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005020:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005024:	1b92      	subs	r2, r2, r6
 8005026:	6122      	str	r2, [r4, #16]
 8005028:	f8cd a000 	str.w	sl, [sp]
 800502c:	464b      	mov	r3, r9
 800502e:	aa03      	add	r2, sp, #12
 8005030:	4621      	mov	r1, r4
 8005032:	4640      	mov	r0, r8
 8005034:	f7ff fee6 	bl	8004e04 <_printf_common>
 8005038:	3001      	adds	r0, #1
 800503a:	d14a      	bne.n	80050d2 <_printf_i+0x1f2>
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	b004      	add	sp, #16
 8005042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	f043 0320 	orr.w	r3, r3, #32
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	4833      	ldr	r0, [pc, #204]	@ (800511c <_printf_i+0x23c>)
 8005050:	2778      	movs	r7, #120	@ 0x78
 8005052:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	6831      	ldr	r1, [r6, #0]
 800505a:	061f      	lsls	r7, r3, #24
 800505c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005060:	d402      	bmi.n	8005068 <_printf_i+0x188>
 8005062:	065f      	lsls	r7, r3, #25
 8005064:	bf48      	it	mi
 8005066:	b2ad      	uxthmi	r5, r5
 8005068:	6031      	str	r1, [r6, #0]
 800506a:	07d9      	lsls	r1, r3, #31
 800506c:	bf44      	itt	mi
 800506e:	f043 0320 	orrmi.w	r3, r3, #32
 8005072:	6023      	strmi	r3, [r4, #0]
 8005074:	b11d      	cbz	r5, 800507e <_printf_i+0x19e>
 8005076:	2310      	movs	r3, #16
 8005078:	e7ac      	b.n	8004fd4 <_printf_i+0xf4>
 800507a:	4827      	ldr	r0, [pc, #156]	@ (8005118 <_printf_i+0x238>)
 800507c:	e7e9      	b.n	8005052 <_printf_i+0x172>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	f023 0320 	bic.w	r3, r3, #32
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	e7f6      	b.n	8005076 <_printf_i+0x196>
 8005088:	4616      	mov	r6, r2
 800508a:	e7bd      	b.n	8005008 <_printf_i+0x128>
 800508c:	6833      	ldr	r3, [r6, #0]
 800508e:	6825      	ldr	r5, [r4, #0]
 8005090:	6961      	ldr	r1, [r4, #20]
 8005092:	1d18      	adds	r0, r3, #4
 8005094:	6030      	str	r0, [r6, #0]
 8005096:	062e      	lsls	r6, r5, #24
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	d501      	bpl.n	80050a0 <_printf_i+0x1c0>
 800509c:	6019      	str	r1, [r3, #0]
 800509e:	e002      	b.n	80050a6 <_printf_i+0x1c6>
 80050a0:	0668      	lsls	r0, r5, #25
 80050a2:	d5fb      	bpl.n	800509c <_printf_i+0x1bc>
 80050a4:	8019      	strh	r1, [r3, #0]
 80050a6:	2300      	movs	r3, #0
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	4616      	mov	r6, r2
 80050ac:	e7bc      	b.n	8005028 <_printf_i+0x148>
 80050ae:	6833      	ldr	r3, [r6, #0]
 80050b0:	1d1a      	adds	r2, r3, #4
 80050b2:	6032      	str	r2, [r6, #0]
 80050b4:	681e      	ldr	r6, [r3, #0]
 80050b6:	6862      	ldr	r2, [r4, #4]
 80050b8:	2100      	movs	r1, #0
 80050ba:	4630      	mov	r0, r6
 80050bc:	f7fb f888 	bl	80001d0 <memchr>
 80050c0:	b108      	cbz	r0, 80050c6 <_printf_i+0x1e6>
 80050c2:	1b80      	subs	r0, r0, r6
 80050c4:	6060      	str	r0, [r4, #4]
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	6123      	str	r3, [r4, #16]
 80050ca:	2300      	movs	r3, #0
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d0:	e7aa      	b.n	8005028 <_printf_i+0x148>
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	4632      	mov	r2, r6
 80050d6:	4649      	mov	r1, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	47d0      	blx	sl
 80050dc:	3001      	adds	r0, #1
 80050de:	d0ad      	beq.n	800503c <_printf_i+0x15c>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	079b      	lsls	r3, r3, #30
 80050e4:	d413      	bmi.n	800510e <_printf_i+0x22e>
 80050e6:	68e0      	ldr	r0, [r4, #12]
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	4298      	cmp	r0, r3
 80050ec:	bfb8      	it	lt
 80050ee:	4618      	movlt	r0, r3
 80050f0:	e7a6      	b.n	8005040 <_printf_i+0x160>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4632      	mov	r2, r6
 80050f6:	4649      	mov	r1, r9
 80050f8:	4640      	mov	r0, r8
 80050fa:	47d0      	blx	sl
 80050fc:	3001      	adds	r0, #1
 80050fe:	d09d      	beq.n	800503c <_printf_i+0x15c>
 8005100:	3501      	adds	r5, #1
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	9903      	ldr	r1, [sp, #12]
 8005106:	1a5b      	subs	r3, r3, r1
 8005108:	42ab      	cmp	r3, r5
 800510a:	dcf2      	bgt.n	80050f2 <_printf_i+0x212>
 800510c:	e7eb      	b.n	80050e6 <_printf_i+0x206>
 800510e:	2500      	movs	r5, #0
 8005110:	f104 0619 	add.w	r6, r4, #25
 8005114:	e7f5      	b.n	8005102 <_printf_i+0x222>
 8005116:	bf00      	nop
 8005118:	08005321 	.word	0x08005321
 800511c:	08005332 	.word	0x08005332

08005120 <memmove>:
 8005120:	4288      	cmp	r0, r1
 8005122:	b510      	push	{r4, lr}
 8005124:	eb01 0402 	add.w	r4, r1, r2
 8005128:	d902      	bls.n	8005130 <memmove+0x10>
 800512a:	4284      	cmp	r4, r0
 800512c:	4623      	mov	r3, r4
 800512e:	d807      	bhi.n	8005140 <memmove+0x20>
 8005130:	1e43      	subs	r3, r0, #1
 8005132:	42a1      	cmp	r1, r4
 8005134:	d008      	beq.n	8005148 <memmove+0x28>
 8005136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800513a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800513e:	e7f8      	b.n	8005132 <memmove+0x12>
 8005140:	4402      	add	r2, r0
 8005142:	4601      	mov	r1, r0
 8005144:	428a      	cmp	r2, r1
 8005146:	d100      	bne.n	800514a <memmove+0x2a>
 8005148:	bd10      	pop	{r4, pc}
 800514a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800514e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005152:	e7f7      	b.n	8005144 <memmove+0x24>

08005154 <_sbrk_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4d06      	ldr	r5, [pc, #24]	@ (8005170 <_sbrk_r+0x1c>)
 8005158:	2300      	movs	r3, #0
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	602b      	str	r3, [r5, #0]
 8005160:	f7fc fb4a 	bl	80017f8 <_sbrk>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_sbrk_r+0x1a>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	b103      	cbz	r3, 800516e <_sbrk_r+0x1a>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	20000398 	.word	0x20000398

08005174 <memcpy>:
 8005174:	440a      	add	r2, r1
 8005176:	4291      	cmp	r1, r2
 8005178:	f100 33ff 	add.w	r3, r0, #4294967295
 800517c:	d100      	bne.n	8005180 <memcpy+0xc>
 800517e:	4770      	bx	lr
 8005180:	b510      	push	{r4, lr}
 8005182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800518a:	4291      	cmp	r1, r2
 800518c:	d1f9      	bne.n	8005182 <memcpy+0xe>
 800518e:	bd10      	pop	{r4, pc}

08005190 <_realloc_r>:
 8005190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005194:	4680      	mov	r8, r0
 8005196:	4615      	mov	r5, r2
 8005198:	460c      	mov	r4, r1
 800519a:	b921      	cbnz	r1, 80051a6 <_realloc_r+0x16>
 800519c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051a0:	4611      	mov	r1, r2
 80051a2:	f7ff bc4b 	b.w	8004a3c <_malloc_r>
 80051a6:	b92a      	cbnz	r2, 80051b4 <_realloc_r+0x24>
 80051a8:	f7ff fbdc 	bl	8004964 <_free_r>
 80051ac:	2400      	movs	r4, #0
 80051ae:	4620      	mov	r0, r4
 80051b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b4:	f000 f81a 	bl	80051ec <_malloc_usable_size_r>
 80051b8:	4285      	cmp	r5, r0
 80051ba:	4606      	mov	r6, r0
 80051bc:	d802      	bhi.n	80051c4 <_realloc_r+0x34>
 80051be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80051c2:	d8f4      	bhi.n	80051ae <_realloc_r+0x1e>
 80051c4:	4629      	mov	r1, r5
 80051c6:	4640      	mov	r0, r8
 80051c8:	f7ff fc38 	bl	8004a3c <_malloc_r>
 80051cc:	4607      	mov	r7, r0
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d0ec      	beq.n	80051ac <_realloc_r+0x1c>
 80051d2:	42b5      	cmp	r5, r6
 80051d4:	462a      	mov	r2, r5
 80051d6:	4621      	mov	r1, r4
 80051d8:	bf28      	it	cs
 80051da:	4632      	movcs	r2, r6
 80051dc:	f7ff ffca 	bl	8005174 <memcpy>
 80051e0:	4621      	mov	r1, r4
 80051e2:	4640      	mov	r0, r8
 80051e4:	f7ff fbbe 	bl	8004964 <_free_r>
 80051e8:	463c      	mov	r4, r7
 80051ea:	e7e0      	b.n	80051ae <_realloc_r+0x1e>

080051ec <_malloc_usable_size_r>:
 80051ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f0:	1f18      	subs	r0, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bfbc      	itt	lt
 80051f6:	580b      	ldrlt	r3, [r1, r0]
 80051f8:	18c0      	addlt	r0, r0, r3
 80051fa:	4770      	bx	lr

080051fc <_init>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr

08005208 <_fini>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr
