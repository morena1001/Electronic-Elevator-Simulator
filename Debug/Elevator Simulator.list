
Elevator Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005240  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080053d0  080053d0  000063d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e8  080054e8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f0  080054f0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054f4  080054f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080054f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000005c  08005554  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08005554  000073c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e60e  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d53  00000000  00000000  0001569a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000173f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c1  00000000  00000000  00018050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdfb  00000000  00000000  00018a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff4c  00000000  00000000  0003480c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a647d  00000000  00000000  00044758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eabd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003924  00000000  00000000  000eac18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ee53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053b8 	.word	0x080053b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080053b8 	.word	0x080053b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f001 fc10 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f810 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f968 	bl	8000550 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f85e 	bl	8000340 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f934 	bl	80004f0 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8000288:	f000 f8e0 	bl	800044c <MX_TIM15_Init>
  MX_TIM6_Init();
 800028c:	f000 f8a6 	bl	80003dc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Program_Start_Light_Up();
 8000290:	f000 fa9e 	bl	80007d0 <Program_Start_Light_Up>
  Elevator_Simulator_Init();
 8000294:	f000 fa12 	bl	80006bc <Elevator_Simulator_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <main+0x28>

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b09c      	sub	sp, #112	@ 0x70
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002a6:	2228      	movs	r2, #40	@ 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 fc04 	bl	8004ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2234      	movs	r2, #52	@ 0x34
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 fbf6 	bl	8004ab8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	2302      	movs	r3, #2
 80002ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	2301      	movs	r3, #1
 80002d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	2310      	movs	r3, #16
 80002d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	2300      	movs	r3, #0
 80002da:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 ff49 	bl	8002178 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002ec:	f000 fbde 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f4:	2300      	movs	r3, #0
 80002f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000304:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 ff72 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000316:	f000 fbc9 	bl	8000aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 800031a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800031e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000320:	2300      	movs	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4618      	mov	r0, r3
 8000328:	f003 f984 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000332:	f000 fbbb 	bl	8000aac <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3770      	adds	r7, #112	@ 0x70
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800035e:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000364:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000366:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000368:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800036c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b1a      	ldr	r3, [pc, #104]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9995;
 8000374:	4b18      	ldr	r3, [pc, #96]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000376:	f242 720b 	movw	r2, #9995	@ 0x270b
 800037a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_TIM2_Init+0x98>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000382:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000388:	4813      	ldr	r0, [pc, #76]	@ (80003d8 <MX_TIM2_Init+0x98>)
 800038a:	f003 fae5 	bl	8003958 <HAL_TIM_Base_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000394:	f000 fb8a 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800039c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <MX_TIM2_Init+0x98>)
 80003a6:	f003 fcb4 	bl	8003d12 <HAL_TIM_ConfigClockSource>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003b0:	f000 fb7c 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	@ (80003d8 <MX_TIM2_Init+0x98>)
 80003c2:	f003 feab 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003cc:	f000 fb6e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000078 	.word	0x20000078

080003dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003ec:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003ee:	4a16      	ldr	r2, [pc, #88]	@ (8000448 <MX_TIM6_Init+0x6c>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 80003f2:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003f4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80003f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8000400:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <MX_TIM6_Init+0x68>)
 8000402:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000406:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000408:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_TIM6_Init+0x68>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800040e:	480d      	ldr	r0, [pc, #52]	@ (8000444 <MX_TIM6_Init+0x68>)
 8000410:	f003 faa2 	bl	8003958 <HAL_TIM_Base_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800041a:	f000 fb47 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4806      	ldr	r0, [pc, #24]	@ (8000444 <MX_TIM6_Init+0x68>)
 800042c:	f003 fe76 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000436:	f000 fb39 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	200000c4 	.word	0x200000c4
 8000448:	40001000 	.word	0x40001000

0800044c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800046a:	4b1f      	ldr	r3, [pc, #124]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800046c:	4a1f      	ldr	r2, [pc, #124]	@ (80004ec <MX_TIM15_Init+0xa0>)
 800046e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 8000470:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000472:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000476:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 111;
 800047e:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000480:	226f      	movs	r2, #111	@ 0x6f
 8000482:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000496:	4814      	ldr	r0, [pc, #80]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000498:	f003 fa5e 	bl	8003958 <HAL_TIM_Base_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80004a2:	f000 fb03 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 80004b4:	f003 fc2d 	bl	8003d12 <HAL_TIM_ConfigClockSource>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80004be:	f000 faf5 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4619      	mov	r1, r3
 80004ce:	4806      	ldr	r0, [pc, #24]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 80004d0:	f003 fe24 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80004da:	f000 fae7 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000110 	.word	0x20000110
 80004ec:	40014000 	.word	0x40014000

080004f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f4:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 80004f6:	4a15      	ldr	r2, [pc, #84]	@ (800054c <MX_USART2_UART_Init+0x5c>)
 80004f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004fa:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 80004fc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000516:	220c      	movs	r2, #12
 8000518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000526:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000534:	f003 fe76 	bl	8004224 <HAL_UART_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800053e:	f000 fab5 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000015c 	.word	0x2000015c
 800054c:	40004400 	.word	0x40004400

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b52      	ldr	r3, [pc, #328]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a51      	ldr	r2, [pc, #324]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800056c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b4f      	ldr	r3, [pc, #316]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b4c      	ldr	r3, [pc, #304]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a4b      	ldr	r2, [pc, #300]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b49      	ldr	r3, [pc, #292]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b46      	ldr	r3, [pc, #280]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a45      	ldr	r2, [pc, #276]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800059c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b43      	ldr	r3, [pc, #268]	@ (80006b0 <MX_GPIO_Init+0x160>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PF1_Pin|PF2_Pin|PF3_Pin|DF1_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80005b4:	483f      	ldr	r0, [pc, #252]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005b6:	f001 fd95 	bl	80020e4 <HAL_GPIO_WritePin>
                          |DF2_Pin|DF3_Pin|DU_Pin|DD_Pin
                          |FR1_Pin|FR2_Pin|FR3_Pin|BCDI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c0:	483d      	ldr	r0, [pc, #244]	@ (80006b8 <MX_GPIO_Init+0x168>)
 80005c2:	f001 fd8f 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4835      	ldr	r0, [pc, #212]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005de:	f001 fbf7 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1_Pin PF2_Pin PF3_Pin DF1_Pin
                           DF2_Pin DF3_Pin DU_Pin DD_Pin
                           FR1_Pin FR2_Pin FR3_Pin BCDI_Pin */
  GPIO_InitStruct.Pin = PF1_Pin|PF2_Pin|PF3_Pin|DF1_Pin
 80005e2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005e6:	60fb      	str	r3, [r7, #12]
                          |DF2_Pin|DF3_Pin|DU_Pin|DD_Pin
                          |FR1_Pin|FR2_Pin|FR3_Pin|BCDI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	482e      	ldr	r0, [pc, #184]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005fc:	f001 fbe8 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : II1_Pin II2_Pin II3_Pin OI1U_Pin
                           OI2D_Pin OI2U_Pin OI3D_Pin */
  GPIO_InitStruct.Pin = II1_Pin|II2_Pin|II3_Pin|OI1U_Pin
 8000600:	237f      	movs	r3, #127	@ 0x7f
 8000602:	60fb      	str	r3, [r7, #12]
                          |OI2D_Pin|OI2U_Pin|OI3D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000604:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	4828      	ldr	r0, [pc, #160]	@ (80006b8 <MX_GPIO_Init+0x168>)
 8000616:	f001 fbdb 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0x168>)
 8000634:	f001 fbcc 	bl	8001dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	2006      	movs	r0, #6
 800063e:	f001 fb90 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000642:	2006      	movs	r0, #6
 8000644:	f001 fba9 	bl	8001d9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2007      	movs	r0, #7
 800064e:	f001 fb88 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000652:	2007      	movs	r0, #7
 8000654:	f001 fba1 	bl	8001d9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2008      	movs	r0, #8
 800065e:	f001 fb80 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000662:	2008      	movs	r0, #8
 8000664:	f001 fb99 	bl	8001d9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2009      	movs	r0, #9
 800066e:	f001 fb78 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000672:	2009      	movs	r0, #9
 8000674:	f001 fb91 	bl	8001d9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	200a      	movs	r0, #10
 800067e:	f001 fb70 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000682:	200a      	movs	r0, #10
 8000684:	f001 fb89 	bl	8001d9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2017      	movs	r0, #23
 800068e:	f001 fb68 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000692:	2017      	movs	r0, #23
 8000694:	f001 fb81 	bl	8001d9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2028      	movs	r0, #40	@ 0x28
 800069e:	f001 fb60 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a2:	2028      	movs	r0, #40	@ 0x28
 80006a4:	f001 fb79 	bl	8001d9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000800 	.word	0x48000800
 80006b8:	48000400 	.word	0x48000400

080006bc <Elevator_Simulator_Init>:
//		sprintf(msg, "YIPPEE\r\n");
//		HAL_UART_Transmit(&huart2, (uint8_t*) msg, 10, 100);
//	}
//}

void Elevator_Simulator_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	201c      	movs	r0, #28
 80006c8:	f001 fb4b 	bl	8001d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006cc:	201c      	movs	r0, #28
 80006ce:	f001 fb64 	bl	8001d9a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	2036      	movs	r0, #54	@ 0x36
 80006d8:	f001 fb43 	bl	8001d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006dc:	2036      	movs	r0, #54	@ 0x36
 80006de:	f001 fb5c 	bl	8001d9a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	2018      	movs	r0, #24
 80006e8:	f001 fb3b 	bl	8001d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80006ec:	2018      	movs	r0, #24
 80006ee:	f001 fb54 	bl	8001d9a <HAL_NVIC_EnableIRQ>

	// Floor request corresponding to floor 1 in an upward direction
	floor_requests[0].requested = 0;
 80006f2:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
	floor_requests[0].floor_number = 1;
 80006f8:	4b2b      	ldr	r3, [pc, #172]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	705a      	strb	r2, [r3, #1]
	floor_requests[0].direction = 'u';
 80006fe:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000700:	2275      	movs	r2, #117	@ 0x75
 8000702:	709a      	strb	r2, [r3, #2]

	// Floor request corresponding to floor 2 in a downward direction
	floor_requests[1].requested = 0;
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	70da      	strb	r2, [r3, #3]
	floor_requests[1].floor_number = 2;
 800070a:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 800070c:	2202      	movs	r2, #2
 800070e:	711a      	strb	r2, [r3, #4]
	floor_requests[1].direction = 'd';
 8000710:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000712:	2264      	movs	r2, #100	@ 0x64
 8000714:	715a      	strb	r2, [r3, #5]

	// Floor request corresponding to floor 2 in an upward direction
	floor_requests[2].requested = 0;
 8000716:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000718:	2200      	movs	r2, #0
 800071a:	719a      	strb	r2, [r3, #6]
	floor_requests[2].floor_number = 2;
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 800071e:	2202      	movs	r2, #2
 8000720:	71da      	strb	r2, [r3, #7]
	floor_requests[2].direction = 'u';
 8000722:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000724:	2275      	movs	r2, #117	@ 0x75
 8000726:	721a      	strb	r2, [r3, #8]

	// Floor request corresponding to floor 3 in a downward direction
	floor_requests[3].requested = 0;
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 800072a:	2200      	movs	r2, #0
 800072c:	725a      	strb	r2, [r3, #9]
	floor_requests[3].floor_number = 3;
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000730:	2203      	movs	r2, #3
 8000732:	729a      	strb	r2, [r3, #10]
	floor_requests[3].direction = 'd';
 8000734:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000736:	2264      	movs	r2, #100	@ 0x64
 8000738:	72da      	strb	r2, [r3, #11]

	elevator_direction = 'n';
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <Elevator_Simulator_Init+0xf0>)
 800073c:	226e      	movs	r2, #110	@ 0x6e
 800073e:	701a      	strb	r2, [r3, #0]
	floor_position = 1; // The elevator always begins in the first floor
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <Elevator_Simulator_Init+0xf4>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 2; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	e007      	b.n	800075c <Elevator_Simulator_Init+0xa0>
		floor_destinations[i] = 0;
 800074c:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <Elevator_Simulator_Init+0xf8>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b01      	cmp	r3, #1
 8000760:	ddf4      	ble.n	800074c <Elevator_Simulator_Init+0x90>
	}

	for (int i =  0; i < 3; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	e007      	b.n	8000778 <Elevator_Simulator_Init+0xbc>
			requests[i] = NULL;
 8000768:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <Elevator_Simulator_Init+0xfc>)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2100      	movs	r1, #0
 800076e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =  0; i < 3; i++) {
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b02      	cmp	r3, #2
 800077c:	ddf4      	ble.n	8000768 <Elevator_Simulator_Init+0xac>
		}

	pin_num = 0;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <Elevator_Simulator_Init+0x100>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
	serving = NULL;
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <Elevator_Simulator_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
	start_timer = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <Elevator_Simulator_Init+0x108>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
	traveling = 0;
 8000790:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <Elevator_Simulator_Init+0x10c>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2101      	movs	r1, #1
 800079a:	480c      	ldr	r0, [pc, #48]	@ (80007cc <Elevator_Simulator_Init+0x110>)
 800079c:	f001 fca2 	bl	80020e4 <HAL_GPIO_WritePin>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000020c 	.word	0x2000020c
 80007ac:	20000218 	.word	0x20000218
 80007b0:	20000219 	.word	0x20000219
 80007b4:	2000021c 	.word	0x2000021c
 80007b8:	20000220 	.word	0x20000220
 80007bc:	20000230 	.word	0x20000230
 80007c0:	20000234 	.word	0x20000234
 80007c4:	20000238 	.word	0x20000238
 80007c8:	20000239 	.word	0x20000239
 80007cc:	48000800 	.word	0x48000800

080007d0 <Program_Start_Light_Up>:

void Program_Start_Light_Up(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
 80007d4:	2101      	movs	r1, #1
 80007d6:	4848      	ldr	r0, [pc, #288]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80007d8:	f001 fc9c 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007dc:	20fa      	movs	r0, #250	@ 0xfa
 80007de:	f001 f9c1 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(PF2_GPIO_Port, PF2_Pin);
 80007e2:	2102      	movs	r1, #2
 80007e4:	4844      	ldr	r0, [pc, #272]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80007e6:	f001 fc95 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
 80007ea:	2101      	movs	r1, #1
 80007ec:	4842      	ldr	r0, [pc, #264]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80007ee:	f001 fc91 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007f2:	20fa      	movs	r0, #250	@ 0xfa
 80007f4:	f001 f9b6 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(PF3_GPIO_Port, PF3_Pin);
 80007f8:	2104      	movs	r1, #4
 80007fa:	483f      	ldr	r0, [pc, #252]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80007fc:	f001 fc8a 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF2_GPIO_Port, PF2_Pin);
 8000800:	2102      	movs	r1, #2
 8000802:	483d      	ldr	r0, [pc, #244]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 8000804:	f001 fc86 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000808:	20fa      	movs	r0, #250	@ 0xfa
 800080a:	f001 f9ab 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(DF1_GPIO_Port, DF1_Pin);
 800080e:	2108      	movs	r1, #8
 8000810:	4839      	ldr	r0, [pc, #228]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 8000812:	f001 fc7f 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF3_GPIO_Port, PF3_Pin);
 8000816:	2104      	movs	r1, #4
 8000818:	4837      	ldr	r0, [pc, #220]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 800081a:	f001 fc7b 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800081e:	20fa      	movs	r0, #250	@ 0xfa
 8000820:	f001 f9a0 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(DF2_GPIO_Port, DF2_Pin);
 8000824:	2110      	movs	r1, #16
 8000826:	4834      	ldr	r0, [pc, #208]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 8000828:	f001 fc74 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF1_GPIO_Port, DF1_Pin);
 800082c:	2108      	movs	r1, #8
 800082e:	4832      	ldr	r0, [pc, #200]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 8000830:	f001 fc70 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000834:	20fa      	movs	r0, #250	@ 0xfa
 8000836:	f001 f995 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(DF3_GPIO_Port, DF3_Pin);
 800083a:	2120      	movs	r1, #32
 800083c:	482e      	ldr	r0, [pc, #184]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 800083e:	f001 fc69 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF2_GPIO_Port, DF2_Pin);
 8000842:	2110      	movs	r1, #16
 8000844:	482c      	ldr	r0, [pc, #176]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 8000846:	f001 fc65 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800084a:	20fa      	movs	r0, #250	@ 0xfa
 800084c:	f001 f98a 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(DU_GPIO_Port, DU_Pin);
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	4829      	ldr	r0, [pc, #164]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 8000854:	f001 fc5e 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF3_GPIO_Port, DF3_Pin);
 8000858:	2120      	movs	r1, #32
 800085a:	4827      	ldr	r0, [pc, #156]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 800085c:	f001 fc5a 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000860:	20fa      	movs	r0, #250	@ 0xfa
 8000862:	f001 f97f 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(DD_GPIO_Port, DD_Pin);
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	4823      	ldr	r0, [pc, #140]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 800086a:	f001 fc53 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DU_GPIO_Port, DU_Pin);
 800086e:	2140      	movs	r1, #64	@ 0x40
 8000870:	4821      	ldr	r0, [pc, #132]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 8000872:	f001 fc4f 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000876:	20fa      	movs	r0, #250	@ 0xfa
 8000878:	f001 f974 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(FR1_GPIO_Port, FR1_Pin);
 800087c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000880:	481d      	ldr	r0, [pc, #116]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 8000882:	f001 fc47 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DD_GPIO_Port, DD_Pin);
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	481b      	ldr	r0, [pc, #108]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 800088a:	f001 fc43 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800088e:	20fa      	movs	r0, #250	@ 0xfa
 8000890:	f001 f968 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(FR2_GPIO_Port, FR2_Pin);
 8000894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000898:	4817      	ldr	r0, [pc, #92]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 800089a:	f001 fc3b 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR1_GPIO_Port, FR1_Pin);
 800089e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008a2:	4815      	ldr	r0, [pc, #84]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80008a4:	f001 fc36 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80008a8:	20fa      	movs	r0, #250	@ 0xfa
 80008aa:	f001 f95b 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(FR3_GPIO_Port, FR3_Pin);
 80008ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b2:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80008b4:	f001 fc2e 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR2_GPIO_Port, FR2_Pin);
 80008b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008bc:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80008be:	f001 fc29 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80008c2:	20fa      	movs	r0, #250	@ 0xfa
 80008c4:	f001 f94e 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(BCDI_GPIO_Port, BCDI_Pin);
 80008c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008cc:	480a      	ldr	r0, [pc, #40]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80008ce:	f001 fc21 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR3_GPIO_Port, FR3_Pin);
 80008d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008d6:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80008d8:	f001 fc1c 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80008dc:	20fa      	movs	r0, #250	@ 0xfa
 80008de:	f001 f941 	bl	8001b64 <HAL_Delay>

	HAL_GPIO_TogglePin(BCDI_GPIO_Port, BCDI_Pin);
 80008e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008e6:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <Program_Start_Light_Up+0x128>)
 80008e8:	f001 fc14 	bl	8002114 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f0:	f001 f938 	bl	8001b64 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	48000800 	.word	0x48000800

080008fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OI2U_Pin) {
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	2b20      	cmp	r3, #32
 800090a:	d103      	bne.n	8000914 <HAL_GPIO_EXTI_Callback+0x18>
		pin_num = 2;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <HAL_GPIO_EXTI_Callback+0x30>)
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == OI3D_Pin) {
		pin_num = 3;
	}
}
 8000912:	e005      	b.n	8000920 <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == OI3D_Pin) {
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	2b40      	cmp	r3, #64	@ 0x40
 8000918:	d102      	bne.n	8000920 <HAL_GPIO_EXTI_Callback+0x24>
		pin_num = 3;
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <HAL_GPIO_EXTI_Callback+0x30>)
 800091c:	2203      	movs	r2, #3
 800091e:	701a      	strb	r2, [r3, #0]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	20000230 	.word	0x20000230

08000930 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	// IF htim2 has fully run once, it will check if there are any destination
	if (htim->Instance == TIM2 && start_timer == 1) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000940:	f040 809a 	bne.w	8000a78 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000944:	4b4e      	ldr	r3, [pc, #312]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	f040 8095 	bne.w	8000a78 <HAL_TIM_PeriodElapsedCallback+0x148>
		// IF no destinations, the elevator has finished serving the floor in the serving variable
		if (!floor_destinations[0]) {
 800094e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d123      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x6e>
			// IF there are no other requests, stop moving the elevator
//			if (!requests[0] && !serving) {
			if (!requests[0]) {
 8000956:	4b4c      	ldr	r3, [pc, #304]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d109      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x42>
				sprintf(msg, "NOTHING TO DO\r\n");
 800095e:	494b      	ldr	r1, [pc, #300]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000960:	484b      	ldr	r0, [pc, #300]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000962:	f004 f889 	bl	8004a78 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, 15, 100);
 8000966:	2364      	movs	r3, #100	@ 0x64
 8000968:	220f      	movs	r2, #15
 800096a:	4949      	ldr	r1, [pc, #292]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800096c:	4849      	ldr	r0, [pc, #292]	@ (8000a94 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800096e:	f003 fca7 	bl	80042c0 <HAL_UART_Transmit>
			}

			// reset the serving variable and the LED corresponding to the elevator_direction variable
			serving->requested = 0;
 8000972:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
			serving = NULL;
 800097a:	4b47      	ldr	r3, [pc, #284]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 8000980:	4b46      	ldr	r3, [pc, #280]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b75      	cmp	r3, #117	@ 0x75
 8000986:	d101      	bne.n	800098c <HAL_TIM_PeriodElapsedCallback+0x5c>
 8000988:	2340      	movs	r3, #64	@ 0x40
 800098a:	e000      	b.n	800098e <HAL_TIM_PeriodElapsedCallback+0x5e>
 800098c:	2380      	movs	r3, #128	@ 0x80
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	4843      	ldr	r0, [pc, #268]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000994:	f001 fba6 	bl	80020e4 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 8000998:	f000 ff74 	bl	8001884 <Choose_Floor_To_Service>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DD_Pin : DU_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
			HAL_TIM_Base_Start_IT(&htim6);
		}
	}
}
 800099c:	e06c      	b.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x148>
		  else if (floor_destinations[1] == 0) {
 800099e:	4b39      	ldr	r3, [pc, #228]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80009a0:	785b      	ldrb	r3, [r3, #1]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d126      	bne.n	80009f4 <HAL_TIM_PeriodElapsedCallback+0xc4>
		    elevator_direction = floor_destinations[0] < floor_position ? 'd' : 'u';
 80009a6:	4b37      	ldr	r3, [pc, #220]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d201      	bcs.n	80009b6 <HAL_TIM_PeriodElapsedCallback+0x86>
 80009b2:	2264      	movs	r2, #100	@ 0x64
 80009b4:	e000      	b.n	80009b8 <HAL_TIM_PeriodElapsedCallback+0x88>
 80009b6:	2275      	movs	r2, #117	@ 0x75
 80009b8:	4b38      	ldr	r3, [pc, #224]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009ba:	701a      	strb	r2, [r3, #0]
		    HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DD_Pin : DU_Pin, GPIO_PIN_RESET);
 80009bc:	4b37      	ldr	r3, [pc, #220]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b75      	cmp	r3, #117	@ 0x75
 80009c2:	d101      	bne.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0x98>
 80009c4:	2380      	movs	r3, #128	@ 0x80
 80009c6:	e000      	b.n	80009ca <HAL_TIM_PeriodElapsedCallback+0x9a>
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4834      	ldr	r0, [pc, #208]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009d0:	f001 fb88 	bl	80020e4 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 80009d4:	4b31      	ldr	r3, [pc, #196]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b75      	cmp	r3, #117	@ 0x75
 80009da:	d101      	bne.n	80009e0 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80009dc:	2340      	movs	r3, #64	@ 0x40
 80009de:	e000      	b.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0xb2>
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	2201      	movs	r2, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	482e      	ldr	r0, [pc, #184]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009e8:	f001 fb7c 	bl	80020e4 <HAL_GPIO_WritePin>
		    HAL_TIM_Base_Start_IT(&htim6);
 80009ec:	482e      	ldr	r0, [pc, #184]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80009ee:	f003 f80b 	bl	8003a08 <HAL_TIM_Base_Start_IT>
}
 80009f2:	e041      	b.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x148>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 80009f4:	4b29      	ldr	r3, [pc, #164]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b75      	cmp	r3, #117	@ 0x75
 80009fa:	d101      	bne.n	8000a00 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80009fc:	2340      	movs	r3, #64	@ 0x40
 80009fe:	e000      	b.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	4826      	ldr	r0, [pc, #152]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a08:	f001 fb6c 	bl	80020e4 <HAL_GPIO_WritePin>
			if (floor_destinations[0] - floor_position > floor_destinations[1] - floor_position) {
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d909      	bls.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0xfc>
				uint8_t temp = floor_destinations[0];
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	73fb      	strb	r3, [r7, #15]
				floor_destinations[0] = floor_destinations[1];
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a20:	785a      	ldrb	r2, [r3, #1]
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a24:	701a      	strb	r2, [r3, #0]
				floor_destinations[1] = temp;
 8000a26:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	7053      	strb	r3, [r2, #1]
			elevator_direction = floor_destinations[0] < floor_position ? 'd' : 'u';
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d201      	bcs.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000a38:	2264      	movs	r2, #100	@ 0x64
 8000a3a:	e000      	b.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x10e>
 8000a3c:	2275      	movs	r2, #117	@ 0x75
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a40:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DD_Pin : DU_Pin, GPIO_PIN_RESET);
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b75      	cmp	r3, #117	@ 0x75
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x11e>
 8000a4a:	2380      	movs	r3, #128	@ 0x80
 8000a4c:	e000      	b.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000a4e:	2340      	movs	r3, #64	@ 0x40
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	4812      	ldr	r0, [pc, #72]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a56:	f001 fb45 	bl	80020e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b75      	cmp	r3, #117	@ 0x75
 8000a60:	d101      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x136>
 8000a62:	2340      	movs	r3, #64	@ 0x40
 8000a64:	e000      	b.n	8000a68 <HAL_TIM_PeriodElapsedCallback+0x138>
 8000a66:	2380      	movs	r3, #128	@ 0x80
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a6e:	f001 fb39 	bl	80020e4 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Start_IT(&htim6);
 8000a72:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000a74:	f002 ffc8 	bl	8003a08 <HAL_TIM_Base_Start_IT>
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000238 	.word	0x20000238
 8000a84:	2000021c 	.word	0x2000021c
 8000a88:	20000220 	.word	0x20000220
 8000a8c:	080053d0 	.word	0x080053d0
 8000a90:	200001e4 	.word	0x200001e4
 8000a94:	2000015c 	.word	0x2000015c
 8000a98:	20000234 	.word	0x20000234
 8000a9c:	20000218 	.word	0x20000218
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	20000219 	.word	0x20000219
 8000aa8:	200000c4 	.word	0x200000c4

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x44>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x44>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x44>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b10:	d114      	bne.n	8000b3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b12:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a25      	ldr	r2, [pc, #148]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	61d3      	str	r3, [r2, #28]
 8000b1e:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	201c      	movs	r0, #28
 8000b30:	f001 f917 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b34:	201c      	movs	r0, #28
 8000b36:	f001 f930 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000b3a:	e032      	b.n	8000ba2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d114      	bne.n	8000b70 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a18      	ldr	r2, [pc, #96]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2036      	movs	r0, #54	@ 0x36
 8000b64:	f001 f8fd 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b68:	2036      	movs	r0, #54	@ 0x36
 8000b6a:	f001 f916 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 8000b6e:	e018      	b.n	8000ba2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM15)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb4 <HAL_TIM_Base_MspInit+0xb4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d113      	bne.n	8000ba2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_TIM_Base_MspInit+0xac>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2018      	movs	r0, #24
 8000b98:	f001 f8e3 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b9c:	2018      	movs	r0, #24
 8000b9e:	f001 f8fc 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40001000 	.word	0x40001000
 8000bb4:	40014000 	.word	0x40014000

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <HAL_UART_MspInit+0x7c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d128      	bne.n	8000c2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_UART_MspInit+0x80>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a16      	ldr	r2, [pc, #88]	@ (8000c38 <HAL_UART_MspInit+0x80>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_UART_MspInit+0x80>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_UART_MspInit+0x80>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <HAL_UART_MspInit+0x80>)
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_UART_MspInit+0x80>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c28:	f001 f8d2 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	@ 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40004400 	.word	0x40004400
 8000c38:	40021000 	.word	0x40021000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 ff47 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	// FUNCTION SETS FLOOR 1 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	e002      	b.n	8000cae <EXTI0_IRQHandler+0x12>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	ddf7      	ble.n	8000ca8 <EXTI0_IRQHandler+0xc>
	// IF button for choosing floor 1 as a destination is pressed
	if(HAL_GPIO_ReadPin(II1_GPIO_Port, II1_Pin)) {
 8000cb8:	2101      	movs	r1, #1
 8000cba:	481d      	ldr	r0, [pc, #116]	@ (8000d30 <EXTI0_IRQHandler+0x94>)
 8000cbc:	f001 f9fa 	bl	80020b4 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d02c      	beq.n	8000d20 <EXTI0_IRQHandler+0x84>
		// IF the current floor_position is not 1 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 1 && serving && !traveling) {
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <EXTI0_IRQHandler+0x98>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d028      	beq.n	8000d20 <EXTI0_IRQHandler+0x84>
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <EXTI0_IRQHandler+0x9c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d024      	beq.n	8000d20 <EXTI0_IRQHandler+0x84>
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <EXTI0_IRQHandler+0xa0>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d120      	bne.n	8000d20 <EXTI0_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <EXTI0_IRQHandler+0xa4>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d110      	bne.n	8000d08 <EXTI0_IRQHandler+0x6c>
				floor_destinations[0] = 1;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <EXTI0_IRQHandler+0xa4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2108      	movs	r1, #8
 8000cf0:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <EXTI0_IRQHandler+0xa8>)
 8000cf2:	f001 f9f7 	bl	80020e4 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <EXTI0_IRQHandler+0xac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d110      	bne.n	8000d20 <EXTI0_IRQHandler+0x84>
 8000cfe:	4913      	ldr	r1, [pc, #76]	@ (8000d4c <EXTI0_IRQHandler+0xb0>)
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fd79 	bl	80017f8 <Reset_Timer>
 8000d06:	e00b      	b.n	8000d20 <EXTI0_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  // (There are only at most 2 possible floors to set as a destination, overwriting can never occur)
			  else if (floor_destinations[0] != 1 /* !floor_destinations[1] */) {
 8000d08:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <EXTI0_IRQHandler+0xa4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d007      	beq.n	8000d20 <EXTI0_IRQHandler+0x84>
				floor_destinations[1] = 1;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <EXTI0_IRQHandler+0xa4>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2108      	movs	r1, #8
 8000d1a:	480a      	ldr	r0, [pc, #40]	@ (8000d44 <EXTI0_IRQHandler+0xa8>)
 8000d1c:	f001 f9e2 	bl	80020e4 <HAL_GPIO_WritePin>
//				return;
//			}
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II1_Pin);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f001 fa11 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	48000400 	.word	0x48000400
 8000d34:	20000219 	.word	0x20000219
 8000d38:	20000234 	.word	0x20000234
 8000d3c:	20000239 	.word	0x20000239
 8000d40:	2000021c 	.word	0x2000021c
 8000d44:	48000800 	.word	0x48000800
 8000d48:	20000220 	.word	0x20000220
 8000d4c:	20000078 	.word	0x20000078

08000d50 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// FUNCTION SETS FLOOR 2 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	e002      	b.n	8000d62 <EXTI1_IRQHandler+0x12>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	ddf7      	ble.n	8000d5c <EXTI1_IRQHandler+0xc>
	// IF button for choosing floor 2 as a destination is pressed
	if(HAL_GPIO_ReadPin(II2_GPIO_Port, II2_Pin)) {
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	481d      	ldr	r0, [pc, #116]	@ (8000de4 <EXTI1_IRQHandler+0x94>)
 8000d70:	f001 f9a0 	bl	80020b4 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d02c      	beq.n	8000dd4 <EXTI1_IRQHandler+0x84>
		// IF the current floor_position is not 2 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 2 && serving && !traveling) {
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <EXTI1_IRQHandler+0x98>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d028      	beq.n	8000dd4 <EXTI1_IRQHandler+0x84>
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <EXTI1_IRQHandler+0x9c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d024      	beq.n	8000dd4 <EXTI1_IRQHandler+0x84>
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <EXTI1_IRQHandler+0xa0>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d120      	bne.n	8000dd4 <EXTI1_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <EXTI1_IRQHandler+0xa4>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d110      	bne.n	8000dbc <EXTI1_IRQHandler+0x6c>
				floor_destinations[0] = 2;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <EXTI1_IRQHandler+0xa4>)
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <EXTI1_IRQHandler+0xa8>)
 8000da6:	f001 f99d 	bl	80020e4 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <EXTI1_IRQHandler+0xac>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d110      	bne.n	8000dd4 <EXTI1_IRQHandler+0x84>
 8000db2:	4913      	ldr	r1, [pc, #76]	@ (8000e00 <EXTI1_IRQHandler+0xb0>)
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 fd1f 	bl	80017f8 <Reset_Timer>
 8000dba:	e00b      	b.n	8000dd4 <EXTI1_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  else if (floor_destinations[0] != 2){
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <EXTI1_IRQHandler+0xa4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d007      	beq.n	8000dd4 <EXTI1_IRQHandler+0x84>
				floor_destinations[1] = 2;
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <EXTI1_IRQHandler+0xa4>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2110      	movs	r1, #16
 8000dce:	480a      	ldr	r0, [pc, #40]	@ (8000df8 <EXTI1_IRQHandler+0xa8>)
 8000dd0:	f001 f988 	bl	80020e4 <HAL_GPIO_WritePin>
//				  return;
//			  }
		}
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II2_Pin);
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f001 f9b7 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	48000400 	.word	0x48000400
 8000de8:	20000219 	.word	0x20000219
 8000dec:	20000234 	.word	0x20000234
 8000df0:	20000239 	.word	0x20000239
 8000df4:	2000021c 	.word	0x2000021c
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	20000220 	.word	0x20000220
 8000e00:	20000078 	.word	0x20000078

08000e04 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
	// FUNCTION SET FLOOR 3 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	e002      	b.n	8000e16 <EXTI2_TSC_IRQHandler+0x12>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3301      	adds	r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	ddf7      	ble.n	8000e10 <EXTI2_TSC_IRQHandler+0xc>
	// IF button for choosing floor 3 as a destination is pressed
	if(HAL_GPIO_ReadPin(II3_GPIO_Port, II3_Pin)) {
 8000e20:	2104      	movs	r1, #4
 8000e22:	481d      	ldr	r0, [pc, #116]	@ (8000e98 <EXTI2_TSC_IRQHandler+0x94>)
 8000e24:	f001 f946 	bl	80020b4 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d02c      	beq.n	8000e88 <EXTI2_TSC_IRQHandler+0x84>
		// IF the current floor_position is not 2 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 3 && serving && !traveling) {
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <EXTI2_TSC_IRQHandler+0x98>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d028      	beq.n	8000e88 <EXTI2_TSC_IRQHandler+0x84>
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <EXTI2_TSC_IRQHandler+0x9c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d024      	beq.n	8000e88 <EXTI2_TSC_IRQHandler+0x84>
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <EXTI2_TSC_IRQHandler+0xa0>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d120      	bne.n	8000e88 <EXTI2_TSC_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <EXTI2_TSC_IRQHandler+0xa4>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d110      	bne.n	8000e70 <EXTI2_TSC_IRQHandler+0x6c>
				floor_destinations[0] = 3;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <EXTI2_TSC_IRQHandler+0xa4>)
 8000e50:	2203      	movs	r2, #3
 8000e52:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2120      	movs	r1, #32
 8000e58:	4814      	ldr	r0, [pc, #80]	@ (8000eac <EXTI2_TSC_IRQHandler+0xa8>)
 8000e5a:	f001 f943 	bl	80020e4 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000e5e:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <EXTI2_TSC_IRQHandler+0xac>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d110      	bne.n	8000e88 <EXTI2_TSC_IRQHandler+0x84>
 8000e66:	4913      	ldr	r1, [pc, #76]	@ (8000eb4 <EXTI2_TSC_IRQHandler+0xb0>)
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fcc5 	bl	80017f8 <Reset_Timer>
 8000e6e:	e00b      	b.n	8000e88 <EXTI2_TSC_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  else if (floor_destinations[0] != 3) {
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <EXTI2_TSC_IRQHandler+0xa4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d007      	beq.n	8000e88 <EXTI2_TSC_IRQHandler+0x84>
				floor_destinations[1] = 3;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <EXTI2_TSC_IRQHandler+0xa4>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2120      	movs	r1, #32
 8000e82:	480a      	ldr	r0, [pc, #40]	@ (8000eac <EXTI2_TSC_IRQHandler+0xa8>)
 8000e84:	f001 f92e 	bl	80020e4 <HAL_GPIO_WritePin>
//				  return;
//			  }
		}
	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II3_Pin);
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f001 f95d 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	20000219 	.word	0x20000219
 8000ea0:	20000234 	.word	0x20000234
 8000ea4:	20000239 	.word	0x20000239
 8000ea8:	2000021c 	.word	0x2000021c
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	20000220 	.word	0x20000220
 8000eb4:	20000078 	.word	0x20000078

08000eb8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	// FUNCTION REQUESTS FLOOR 1

	for (int i = 0; i < 65535; i++);
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	e002      	b.n	8000eca <EXTI3_IRQHandler+0x12>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	ddf7      	ble.n	8000ec4 <EXTI3_IRQHandler+0xc>
	// IF button for choosing floor 1 as a request is pressed
	if(HAL_GPIO_ReadPin(OI1U_GPIO_Port, OI1U_Pin)) {
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4839      	ldr	r0, [pc, #228]	@ (8000fbc <EXTI3_IRQHandler+0x104>)
 8000ed8:	f001 f8ec 	bl	80020b4 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d065      	beq.n	8000fae <EXTI3_IRQHandler+0xf6>
		uint8_t i = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	70fb      	strb	r3, [r7, #3]
		while (requests[i]) i++;
 8000ee6:	e002      	b.n	8000eee <EXTI3_IRQHandler+0x36>
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	3301      	adds	r3, #1
 8000eec:	70fb      	strb	r3, [r7, #3]
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	4a33      	ldr	r2, [pc, #204]	@ (8000fc0 <EXTI3_IRQHandler+0x108>)
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f6      	bne.n	8000ee8 <EXTI3_IRQHandler+0x30>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving->floor_number == 1) {
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d11e      	bne.n	8000f3e <EXTI3_IRQHandler+0x86>
 8000f00:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <EXTI3_IRQHandler+0x10c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	785b      	ldrb	r3, [r3, #1]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d119      	bne.n	8000f3e <EXTI3_IRQHandler+0x86>
			// IF the floor position is not equal to the floor we are servicing
			if (floor_position != serving->floor_number) {
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <EXTI3_IRQHandler+0x10c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	785a      	ldrb	r2, [r3, #1]
 8000f10:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <EXTI3_IRQHandler+0x110>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d04a      	beq.n	8000fae <EXTI3_IRQHandler+0xf6>
				floor_requests[0].requested = 1;
 8000f18:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <EXTI3_IRQHandler+0x114>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]

				requests[i] = &floor_requests[0];
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <EXTI3_IRQHandler+0x108>)
 8000f22:	492a      	ldr	r1, [pc, #168]	@ (8000fcc <EXTI3_IRQHandler+0x114>)
 8000f24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Reset_Timer(1, &htim2);
 8000f28:	4929      	ldr	r1, [pc, #164]	@ (8000fd0 <EXTI3_IRQHandler+0x118>)
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fc64 	bl	80017f8 <Reset_Timer>
				HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f36:	4827      	ldr	r0, [pc, #156]	@ (8000fd4 <EXTI3_IRQHandler+0x11c>)
 8000f38:	f001 f8d4 	bl	80020e4 <HAL_GPIO_WritePin>
			if (floor_position != serving->floor_number) {
 8000f3c:	e037      	b.n	8000fae <EXTI3_IRQHandler+0xf6>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[0].requested || serving->floor_number == 1) && (!(i == 0 && serving->floor_number == 1) && !(i > 0 && requests[i - 1]->floor_number == 1))) {
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <EXTI3_IRQHandler+0x114>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <EXTI3_IRQHandler+0x98>
 8000f46:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <EXTI3_IRQHandler+0x10c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	785b      	ldrb	r3, [r3, #1]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d12e      	bne.n	8000fae <EXTI3_IRQHandler+0xf6>
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d104      	bne.n	8000f60 <EXTI3_IRQHandler+0xa8>
 8000f56:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <EXTI3_IRQHandler+0x10c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d026      	beq.n	8000fae <EXTI3_IRQHandler+0xf6>
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <EXTI3_IRQHandler+0xbe>
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	4a15      	ldr	r2, [pc, #84]	@ (8000fc0 <EXTI3_IRQHandler+0x108>)
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d01b      	beq.n	8000fae <EXTI3_IRQHandler+0xf6>
			floor_requests[0].requested = 1;
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <EXTI3_IRQHandler+0x114>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
			requests[i] = &floor_requests[0];
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <EXTI3_IRQHandler+0x108>)
 8000f80:	4912      	ldr	r1, [pc, #72]	@ (8000fcc <EXTI3_IRQHandler+0x114>)
 8000f82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <EXTI3_IRQHandler+0x10c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <EXTI3_IRQHandler+0xe6>
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <EXTI3_IRQHandler+0x120>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d103      	bne.n	8000f9e <EXTI3_IRQHandler+0xe6>
				Reset_Timer(1, &htim2);
 8000f96:	490e      	ldr	r1, [pc, #56]	@ (8000fd0 <EXTI3_IRQHandler+0x118>)
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fc2d 	bl	80017f8 <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa4:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <EXTI3_IRQHandler+0x11c>)
 8000fa6:	f001 f89d 	bl	80020e4 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 8000faa:	f000 fc6b 	bl	8001884 <Choose_Floor_To_Service>
		}
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI1U_Pin);
 8000fae:	2008      	movs	r0, #8
 8000fb0:	f001 f8ca 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	20000220 	.word	0x20000220
 8000fc4:	20000234 	.word	0x20000234
 8000fc8:	20000219 	.word	0x20000219
 8000fcc:	2000020c 	.word	0x2000020c
 8000fd0:	20000078 	.word	0x20000078
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	2000021c 	.word	0x2000021c

08000fdc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// FUNCTION REQUESTS FLOOR 2 DOWN

	for (int i = 0; i < 65535; i++);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	e002      	b.n	8000fee <EXTI4_IRQHandler+0x12>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	ddf7      	ble.n	8000fe8 <EXTI4_IRQHandler+0xc>
	// IF button for choosing floor 2 as a request is pressed
	if(HAL_GPIO_ReadPin(OI2D_GPIO_Port, OI2D_Pin)) {
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4839      	ldr	r0, [pc, #228]	@ (80010e0 <EXTI4_IRQHandler+0x104>)
 8000ffc:	f001 f85a 	bl	80020b4 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d065      	beq.n	80010d2 <EXTI4_IRQHandler+0xf6>
		uint8_t i = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	70fb      	strb	r3, [r7, #3]
		while (requests[i]) i++;
 800100a:	e002      	b.n	8001012 <EXTI4_IRQHandler+0x36>
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	3301      	adds	r3, #1
 8001010:	70fb      	strb	r3, [r7, #3]
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	4a33      	ldr	r2, [pc, #204]	@ (80010e4 <EXTI4_IRQHandler+0x108>)
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f6      	bne.n	800100c <EXTI4_IRQHandler+0x30>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving->floor_number == 2) {
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d11e      	bne.n	8001062 <EXTI4_IRQHandler+0x86>
 8001024:	4b30      	ldr	r3, [pc, #192]	@ (80010e8 <EXTI4_IRQHandler+0x10c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d119      	bne.n	8001062 <EXTI4_IRQHandler+0x86>
			// IF the floor position is not equal to the floor we are servicing
			if (floor_position != serving->floor_number) {
 800102e:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <EXTI4_IRQHandler+0x10c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	785a      	ldrb	r2, [r3, #1]
 8001034:	4b2d      	ldr	r3, [pc, #180]	@ (80010ec <EXTI4_IRQHandler+0x110>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d04a      	beq.n	80010d2 <EXTI4_IRQHandler+0xf6>
				floor_requests[1].requested = 1;
 800103c:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <EXTI4_IRQHandler+0x114>)
 800103e:	2201      	movs	r2, #1
 8001040:	70da      	strb	r2, [r3, #3]

				requests[i] = &floor_requests[1];
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <EXTI4_IRQHandler+0x108>)
 8001046:	492b      	ldr	r1, [pc, #172]	@ (80010f4 <EXTI4_IRQHandler+0x118>)
 8001048:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Reset_Timer(1, &htim2);
 800104c:	492a      	ldr	r1, [pc, #168]	@ (80010f8 <EXTI4_IRQHandler+0x11c>)
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fbd2 	bl	80017f8 <Reset_Timer>
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105a:	4828      	ldr	r0, [pc, #160]	@ (80010fc <EXTI4_IRQHandler+0x120>)
 800105c:	f001 f842 	bl	80020e4 <HAL_GPIO_WritePin>
			if (floor_position != serving->floor_number) {
 8001060:	e037      	b.n	80010d2 <EXTI4_IRQHandler+0xf6>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[1].requested || serving->floor_number == 2) && (!(i == 0 && serving->floor_number == 2) && !(i > 0 && requests[i - 1]->floor_number == 2))) {
 8001062:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <EXTI4_IRQHandler+0x114>)
 8001064:	78db      	ldrb	r3, [r3, #3]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <EXTI4_IRQHandler+0x98>
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <EXTI4_IRQHandler+0x10c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d12e      	bne.n	80010d2 <EXTI4_IRQHandler+0xf6>
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <EXTI4_IRQHandler+0xa8>
 800107a:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <EXTI4_IRQHandler+0x10c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	785b      	ldrb	r3, [r3, #1]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d026      	beq.n	80010d2 <EXTI4_IRQHandler+0xf6>
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <EXTI4_IRQHandler+0xbe>
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	3b01      	subs	r3, #1
 800108e:	4a15      	ldr	r2, [pc, #84]	@ (80010e4 <EXTI4_IRQHandler+0x108>)
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d01b      	beq.n	80010d2 <EXTI4_IRQHandler+0xf6>
			floor_requests[1].requested = 1;
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <EXTI4_IRQHandler+0x114>)
 800109c:	2201      	movs	r2, #1
 800109e:	70da      	strb	r2, [r3, #3]
			requests[i] = &floor_requests[1];
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	4a10      	ldr	r2, [pc, #64]	@ (80010e4 <EXTI4_IRQHandler+0x108>)
 80010a4:	4913      	ldr	r1, [pc, #76]	@ (80010f4 <EXTI4_IRQHandler+0x118>)
 80010a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <EXTI4_IRQHandler+0x10c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <EXTI4_IRQHandler+0xe6>
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <EXTI4_IRQHandler+0x124>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d103      	bne.n	80010c2 <EXTI4_IRQHandler+0xe6>
				Reset_Timer(1, &htim2);
 80010ba:	490f      	ldr	r1, [pc, #60]	@ (80010f8 <EXTI4_IRQHandler+0x11c>)
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fb9b 	bl	80017f8 <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <EXTI4_IRQHandler+0x120>)
 80010ca:	f001 f80b 	bl	80020e4 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 80010ce:	f000 fbd9 	bl	8001884 <Choose_Floor_To_Service>
		}
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI2D_Pin);
 80010d2:	2010      	movs	r0, #16
 80010d4:	f001 f838 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	48000400 	.word	0x48000400
 80010e4:	20000220 	.word	0x20000220
 80010e8:	20000234 	.word	0x20000234
 80010ec:	20000219 	.word	0x20000219
 80010f0:	2000020c 	.word	0x2000020c
 80010f4:	2000020f 	.word	0x2000020f
 80010f8:	20000078 	.word	0x20000078
 80010fc:	48000800 	.word	0x48000800
 8001100:	2000021c 	.word	0x2000021c

08001104 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI2U_Pin);
 800110a:	2020      	movs	r0, #32
 800110c:	f001 f81c 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OI3D_Pin);
 8001110:	2040      	movs	r0, #64	@ 0x40
 8001112:	f001 f819 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  // FUNCTION REQUESTS FLOOR 2 UP AND FLOOR 3

  // IF button for choosing floor 2 is pressed
    if(pin_num == 2) {
 8001116:	4b6e      	ldr	r3, [pc, #440]	@ (80012d0 <EXTI9_5_IRQHandler+0x1cc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d16a      	bne.n	80011f4 <EXTI9_5_IRQHandler+0xf0>
	    uint8_t i = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
		while (requests[i]) i++;
 8001122:	e002      	b.n	800112a <EXTI9_5_IRQHandler+0x26>
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3301      	adds	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a69      	ldr	r2, [pc, #420]	@ (80012d4 <EXTI9_5_IRQHandler+0x1d0>)
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f6      	bne.n	8001124 <EXTI9_5_IRQHandler+0x20>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving->floor_number == 2) {
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d11f      	bne.n	800117c <EXTI9_5_IRQHandler+0x78>
 800113c:	4b66      	ldr	r3, [pc, #408]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d11a      	bne.n	800117c <EXTI9_5_IRQHandler+0x78>
			// IF the floor position is not equal to the floor we are servicing
			if (floor_position != serving->floor_number) {
 8001146:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	785a      	ldrb	r2, [r3, #1]
 800114c:	4b63      	ldr	r3, [pc, #396]	@ (80012dc <EXTI9_5_IRQHandler+0x1d8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	f000 80b9 	beq.w	80012c8 <EXTI9_5_IRQHandler+0x1c4>
				floor_requests[2].requested = 1;
 8001156:	4b62      	ldr	r3, [pc, #392]	@ (80012e0 <EXTI9_5_IRQHandler+0x1dc>)
 8001158:	2201      	movs	r2, #1
 800115a:	719a      	strb	r2, [r3, #6]

				requests[i] = &floor_requests[2];
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4a5d      	ldr	r2, [pc, #372]	@ (80012d4 <EXTI9_5_IRQHandler+0x1d0>)
 8001160:	4960      	ldr	r1, [pc, #384]	@ (80012e4 <EXTI9_5_IRQHandler+0x1e0>)
 8001162:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Reset_Timer(1, &htim2);
 8001166:	4960      	ldr	r1, [pc, #384]	@ (80012e8 <EXTI9_5_IRQHandler+0x1e4>)
 8001168:	2001      	movs	r0, #1
 800116a:	f000 fb45 	bl	80017f8 <Reset_Timer>
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001174:	485d      	ldr	r0, [pc, #372]	@ (80012ec <EXTI9_5_IRQHandler+0x1e8>)
 8001176:	f000 ffb5 	bl	80020e4 <HAL_GPIO_WritePin>
			if (floor_position != serving->floor_number) {
 800117a:	e0a5      	b.n	80012c8 <EXTI9_5_IRQHandler+0x1c4>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[2].requested || serving->floor_number == 2) && (!(i == 0 && serving->floor_number == 2) && !(i > 0 && requests[i - 1]->floor_number == 2))) {
 800117c:	4b58      	ldr	r3, [pc, #352]	@ (80012e0 <EXTI9_5_IRQHandler+0x1dc>)
 800117e:	799b      	ldrb	r3, [r3, #6]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <EXTI9_5_IRQHandler+0x8c>
 8001184:	4b54      	ldr	r3, [pc, #336]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	2b02      	cmp	r3, #2
 800118c:	f040 809c 	bne.w	80012c8 <EXTI9_5_IRQHandler+0x1c4>
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <EXTI9_5_IRQHandler+0x9e>
 8001196:	4b50      	ldr	r3, [pc, #320]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	2b02      	cmp	r3, #2
 800119e:	f000 8093 	beq.w	80012c8 <EXTI9_5_IRQHandler+0x1c4>
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d008      	beq.n	80011ba <EXTI9_5_IRQHandler+0xb6>
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	4a49      	ldr	r2, [pc, #292]	@ (80012d4 <EXTI9_5_IRQHandler+0x1d0>)
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	f000 8087 	beq.w	80012c8 <EXTI9_5_IRQHandler+0x1c4>
			floor_requests[2].requested = 1;
 80011ba:	4b49      	ldr	r3, [pc, #292]	@ (80012e0 <EXTI9_5_IRQHandler+0x1dc>)
 80011bc:	2201      	movs	r2, #1
 80011be:	719a      	strb	r2, [r3, #6]
			requests[i] = &floor_requests[2];
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4a44      	ldr	r2, [pc, #272]	@ (80012d4 <EXTI9_5_IRQHandler+0x1d0>)
 80011c4:	4947      	ldr	r1, [pc, #284]	@ (80012e4 <EXTI9_5_IRQHandler+0x1e0>)
 80011c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <EXTI9_5_IRQHandler+0xde>
 80011d2:	4b47      	ldr	r3, [pc, #284]	@ (80012f0 <EXTI9_5_IRQHandler+0x1ec>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <EXTI9_5_IRQHandler+0xde>
				Reset_Timer(1, &htim2);
 80011da:	4943      	ldr	r1, [pc, #268]	@ (80012e8 <EXTI9_5_IRQHandler+0x1e4>)
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 fb0b 	bl	80017f8 <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e8:	4840      	ldr	r0, [pc, #256]	@ (80012ec <EXTI9_5_IRQHandler+0x1e8>)
 80011ea:	f000 ff7b 	bl	80020e4 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 80011ee:	f000 fb49 	bl	8001884 <Choose_Floor_To_Service>
			HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
			Choose_Floor_To_Service();
		}
	}
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011f2:	e069      	b.n	80012c8 <EXTI9_5_IRQHandler+0x1c4>
      else if (pin_num == 3) {
 80011f4:	4b36      	ldr	r3, [pc, #216]	@ (80012d0 <EXTI9_5_IRQHandler+0x1cc>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d165      	bne.n	80012c8 <EXTI9_5_IRQHandler+0x1c4>
		uint8_t i = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	71bb      	strb	r3, [r7, #6]
		while (requests[i]) i++;
 8001200:	e002      	b.n	8001208 <EXTI9_5_IRQHandler+0x104>
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	3301      	adds	r3, #1
 8001206:	71bb      	strb	r3, [r7, #6]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	4a32      	ldr	r2, [pc, #200]	@ (80012d4 <EXTI9_5_IRQHandler+0x1d0>)
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f6      	bne.n	8001202 <EXTI9_5_IRQHandler+0xfe>
		if (i == 0 && serving->floor_number == 3) {
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d11d      	bne.n	8001256 <EXTI9_5_IRQHandler+0x152>
 800121a:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d118      	bne.n	8001256 <EXTI9_5_IRQHandler+0x152>
			if (floor_position != serving->floor_number) {
 8001224:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	785a      	ldrb	r2, [r3, #1]
 800122a:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <EXTI9_5_IRQHandler+0x1d8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d011      	beq.n	8001256 <EXTI9_5_IRQHandler+0x152>
				floor_requests[3].requested = 1;
 8001232:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <EXTI9_5_IRQHandler+0x1dc>)
 8001234:	2201      	movs	r2, #1
 8001236:	725a      	strb	r2, [r3, #9]
				requests[i] = &floor_requests[3];
 8001238:	79bb      	ldrb	r3, [r7, #6]
 800123a:	4a26      	ldr	r2, [pc, #152]	@ (80012d4 <EXTI9_5_IRQHandler+0x1d0>)
 800123c:	492d      	ldr	r1, [pc, #180]	@ (80012f4 <EXTI9_5_IRQHandler+0x1f0>)
 800123e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Reset_Timer(1, &htim2);
 8001242:	4929      	ldr	r1, [pc, #164]	@ (80012e8 <EXTI9_5_IRQHandler+0x1e4>)
 8001244:	2001      	movs	r0, #1
 8001246:	f000 fad7 	bl	80017f8 <Reset_Timer>
				HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001250:	4826      	ldr	r0, [pc, #152]	@ (80012ec <EXTI9_5_IRQHandler+0x1e8>)
 8001252:	f000 ff47 	bl	80020e4 <HAL_GPIO_WritePin>
		if ((!floor_requests[3].requested || serving->floor_number == 3) && (!(i == 0 && serving->floor_number == 3) && !(i > 0 && requests[i - 1]->floor_number == 3))) {
 8001256:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <EXTI9_5_IRQHandler+0x1dc>)
 8001258:	7a5b      	ldrb	r3, [r3, #9]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <EXTI9_5_IRQHandler+0x164>
 800125e:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d12f      	bne.n	80012c8 <EXTI9_5_IRQHandler+0x1c4>
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <EXTI9_5_IRQHandler+0x174>
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	2b03      	cmp	r3, #3
 8001276:	d027      	beq.n	80012c8 <EXTI9_5_IRQHandler+0x1c4>
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <EXTI9_5_IRQHandler+0x18a>
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	3b01      	subs	r3, #1
 8001282:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <EXTI9_5_IRQHandler+0x1d0>)
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d01c      	beq.n	80012c8 <EXTI9_5_IRQHandler+0x1c4>
			floor_requests[3].requested = 1;
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <EXTI9_5_IRQHandler+0x1dc>)
 8001290:	2201      	movs	r2, #1
 8001292:	725a      	strb	r2, [r3, #9]
			requests[i] = &floor_requests[3];
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <EXTI9_5_IRQHandler+0x1d0>)
 8001298:	4916      	ldr	r1, [pc, #88]	@ (80012f4 <EXTI9_5_IRQHandler+0x1f0>)
 800129a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (serving && !floor_destinations[0]) {
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <EXTI9_5_IRQHandler+0x1d4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <EXTI9_5_IRQHandler+0x1b2>
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <EXTI9_5_IRQHandler+0x1ec>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <EXTI9_5_IRQHandler+0x1b2>
				Reset_Timer(1, &htim2);
 80012ae:	490e      	ldr	r1, [pc, #56]	@ (80012e8 <EXTI9_5_IRQHandler+0x1e4>)
 80012b0:	2001      	movs	r0, #1
 80012b2:	f000 faa1 	bl	80017f8 <Reset_Timer>
			HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012bc:	480b      	ldr	r0, [pc, #44]	@ (80012ec <EXTI9_5_IRQHandler+0x1e8>)
 80012be:	f000 ff11 	bl	80020e4 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 80012c2:	f000 fadf 	bl	8001884 <Choose_Floor_To_Service>
}
 80012c6:	e7ff      	b.n	80012c8 <EXTI9_5_IRQHandler+0x1c4>
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000230 	.word	0x20000230
 80012d4:	20000220 	.word	0x20000220
 80012d8:	20000234 	.word	0x20000234
 80012dc:	20000219 	.word	0x20000219
 80012e0:	2000020c 	.word	0x2000020c
 80012e4:	20000212 	.word	0x20000212
 80012e8:	20000078 	.word	0x20000078
 80012ec:	48000800 	.word	0x48000800
 80012f0:	2000021c 	.word	0x2000021c
 80012f4:	20000215 	.word	0x20000215

080012f8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	count++;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001306:	701a      	strb	r2, [r3, #0]
	if (count == 15 || (count < 10 && count % 2 == 1)) {
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d00a      	beq.n	8001326 <TIM1_BRK_TIM15_IRQHandler+0x2e>
 8001310:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b09      	cmp	r3, #9
 8001316:	d80b      	bhi.n	8001330 <TIM1_BRK_TIM15_IRQHandler+0x38>
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <TIM1_BRK_TIM15_IRQHandler+0x38>
		HAL_GPIO_TogglePin(BCDI_GPIO_Port, BCDI_Pin);
 8001326:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800132a:	4808      	ldr	r0, [pc, #32]	@ (800134c <TIM1_BRK_TIM15_IRQHandler+0x54>)
 800132c:	f000 fef2 	bl	8002114 <HAL_GPIO_TogglePin>
	}

	if (count == 18) 	count = 0;
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d102      	bne.n	800133e <TIM1_BRK_TIM15_IRQHandler+0x46>
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800133e:	4804      	ldr	r0, [pc, #16]	@ (8001350 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001340:	f002 fbe5 	bl	8003b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000023a 	.word	0x2000023a
 800134c:	48000800 	.word	0x48000800
 8001350:	20000110 	.word	0x20000110

08001354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001358:	4812      	ldr	r0, [pc, #72]	@ (80013a4 <TIM2_IRQHandler+0x50>)
 800135a:	f002 fbd8 	bl	8003b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (start_timer) {
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <TIM2_IRQHandler+0x54>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00f      	beq.n	8001386 <TIM2_IRQHandler+0x32>
  		start_timer = 0;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <TIM2_IRQHandler+0x54>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
  		HAL_TIM_Base_Stop_IT(&htim2);
 800136c:	480d      	ldr	r0, [pc, #52]	@ (80013a4 <TIM2_IRQHandler+0x50>)
 800136e:	f002 fb9f 	bl	8003ab0 <HAL_TIM_Base_Stop_IT>
  		HAL_TIM_Base_Stop_IT(&htim15);
 8001372:	480e      	ldr	r0, [pc, #56]	@ (80013ac <TIM2_IRQHandler+0x58>)
 8001374:	f002 fb9c 	bl	8003ab0 <HAL_TIM_Base_Stop_IT>
  		HAL_GPIO_WritePin(BCDI_GPIO_Port, BCDI_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800137e:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <TIM2_IRQHandler+0x5c>)
 8001380:	f000 feb0 	bl	80020e4 <HAL_GPIO_WritePin>
  		start_timer = 1;
  		sprintf(msgs, "HURRY UP TIMER STARTING\r\n");
  		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 25, 100);
  	}
  /* USER CODE END TIM2_IRQn 1 */
}
 8001384:	e00c      	b.n	80013a0 <TIM2_IRQHandler+0x4c>
  		start_timer = 1;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <TIM2_IRQHandler+0x54>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
  		sprintf(msgs, "HURRY UP TIMER STARTING\r\n");
 800138c:	4909      	ldr	r1, [pc, #36]	@ (80013b4 <TIM2_IRQHandler+0x60>)
 800138e:	480a      	ldr	r0, [pc, #40]	@ (80013b8 <TIM2_IRQHandler+0x64>)
 8001390:	f003 fb72 	bl	8004a78 <siprintf>
  		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 25, 100);
 8001394:	2364      	movs	r3, #100	@ 0x64
 8001396:	2219      	movs	r2, #25
 8001398:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <TIM2_IRQHandler+0x64>)
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <TIM2_IRQHandler+0x68>)
 800139c:	f002 ff90 	bl	80042c0 <HAL_UART_Transmit>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000078 	.word	0x20000078
 80013a8:	20000238 	.word	0x20000238
 80013ac:	20000110 	.word	0x20000110
 80013b0:	48000800 	.word	0x48000800
 80013b4:	080053e0 	.word	0x080053e0
 80013b8:	2000023c 	.word	0x2000023c
 80013bc:	2000015c 	.word	0x2000015c

080013c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
//	for (int i = 0; i < 65535; i++);
//	if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
//		on = 1;
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013c8:	f000 febe 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (elevator_moving_counter < 3) {
 80013d6:	4b9f      	ldr	r3, [pc, #636]	@ (8001654 <TIM6_DAC_IRQHandler+0x284>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d81d      	bhi.n	800141a <TIM6_DAC_IRQHandler+0x4a>
//			case 2:
//				HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
//				break;
//			}
//		}
		sprintf(msgs, "MOVING TO FLOOR %d FROM FLOOR %d\r\n", elevator_direction == 'u' ? floor_position + 1 : floor_position - 1, floor_position);
 80013de:	4b9e      	ldr	r3, [pc, #632]	@ (8001658 <TIM6_DAC_IRQHandler+0x288>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b75      	cmp	r3, #117	@ 0x75
 80013e4:	d103      	bne.n	80013ee <TIM6_DAC_IRQHandler+0x1e>
 80013e6:	4b9d      	ldr	r3, [pc, #628]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	e002      	b.n	80013f4 <TIM6_DAC_IRQHandler+0x24>
 80013ee:	4b9b      	ldr	r3, [pc, #620]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	1e5a      	subs	r2, r3, #1
 80013f4:	4b99      	ldr	r3, [pc, #612]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4999      	ldr	r1, [pc, #612]	@ (8001660 <TIM6_DAC_IRQHandler+0x290>)
 80013fa:	489a      	ldr	r0, [pc, #616]	@ (8001664 <TIM6_DAC_IRQHandler+0x294>)
 80013fc:	f003 fb3c 	bl	8004a78 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 32, 100);
 8001400:	2364      	movs	r3, #100	@ 0x64
 8001402:	2220      	movs	r2, #32
 8001404:	4997      	ldr	r1, [pc, #604]	@ (8001664 <TIM6_DAC_IRQHandler+0x294>)
 8001406:	4898      	ldr	r0, [pc, #608]	@ (8001668 <TIM6_DAC_IRQHandler+0x298>)
 8001408:	f002 ff5a 	bl	80042c0 <HAL_UART_Transmit>
		elevator_moving_counter++;
 800140c:	4b91      	ldr	r3, [pc, #580]	@ (8001654 <TIM6_DAC_IRQHandler+0x284>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b8f      	ldr	r3, [pc, #572]	@ (8001654 <TIM6_DAC_IRQHandler+0x284>)
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	e1d5      	b.n	80017c6 <TIM6_DAC_IRQHandler+0x3f6>
	} else {
		switch (floor_position) {
 800141a:	4b90      	ldr	r3, [pc, #576]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d012      	beq.n	8001448 <TIM6_DAC_IRQHandler+0x78>
 8001422:	2b03      	cmp	r3, #3
 8001424:	dc16      	bgt.n	8001454 <TIM6_DAC_IRQHandler+0x84>
 8001426:	2b01      	cmp	r3, #1
 8001428:	d002      	beq.n	8001430 <TIM6_DAC_IRQHandler+0x60>
 800142a:	2b02      	cmp	r3, #2
 800142c:	d006      	beq.n	800143c <TIM6_DAC_IRQHandler+0x6c>
 800142e:	e011      	b.n	8001454 <TIM6_DAC_IRQHandler+0x84>
		case 1:
			HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2101      	movs	r1, #1
 8001434:	488d      	ldr	r0, [pc, #564]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 8001436:	f000 fe55 	bl	80020e4 <HAL_GPIO_WritePin>
			break;
 800143a:	e00b      	b.n	8001454 <TIM6_DAC_IRQHandler+0x84>
		case 2:
			HAL_GPIO_WritePin(PF2_GPIO_Port, PF2_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2102      	movs	r1, #2
 8001440:	488a      	ldr	r0, [pc, #552]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 8001442:	f000 fe4f 	bl	80020e4 <HAL_GPIO_WritePin>
			break;
 8001446:	e005      	b.n	8001454 <TIM6_DAC_IRQHandler+0x84>
		case 3:
			HAL_GPIO_WritePin(PF3_GPIO_Port, PF3_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2104      	movs	r1, #4
 800144c:	4887      	ldr	r0, [pc, #540]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 800144e:	f000 fe49 	bl	80020e4 <HAL_GPIO_WritePin>
			break;
 8001452:	bf00      	nop
		}
		if (elevator_direction == 'd') {
 8001454:	4b80      	ldr	r3, [pc, #512]	@ (8001658 <TIM6_DAC_IRQHandler+0x288>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b64      	cmp	r3, #100	@ 0x64
 800145a:	d106      	bne.n	800146a <TIM6_DAC_IRQHandler+0x9a>
			floor_position--;
 800145c:	4b7f      	ldr	r3, [pc, #508]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b7d      	ldr	r3, [pc, #500]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e005      	b.n	8001476 <TIM6_DAC_IRQHandler+0xa6>
		} else {
			floor_position++;
 800146a:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b7a      	ldr	r3, [pc, #488]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 8001474:	701a      	strb	r2, [r3, #0]
		}
		switch (floor_position) {
 8001476:	4b79      	ldr	r3, [pc, #484]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d012      	beq.n	80014a4 <TIM6_DAC_IRQHandler+0xd4>
 800147e:	2b03      	cmp	r3, #3
 8001480:	dc16      	bgt.n	80014b0 <TIM6_DAC_IRQHandler+0xe0>
 8001482:	2b01      	cmp	r3, #1
 8001484:	d002      	beq.n	800148c <TIM6_DAC_IRQHandler+0xbc>
 8001486:	2b02      	cmp	r3, #2
 8001488:	d006      	beq.n	8001498 <TIM6_DAC_IRQHandler+0xc8>
 800148a:	e011      	b.n	80014b0 <TIM6_DAC_IRQHandler+0xe0>
		case 1:
			HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2101      	movs	r1, #1
 8001490:	4876      	ldr	r0, [pc, #472]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 8001492:	f000 fe27 	bl	80020e4 <HAL_GPIO_WritePin>
			break;
 8001496:	e00b      	b.n	80014b0 <TIM6_DAC_IRQHandler+0xe0>
		case 2:
			HAL_GPIO_WritePin(PF2_GPIO_Port, PF2_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2102      	movs	r1, #2
 800149c:	4873      	ldr	r0, [pc, #460]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 800149e:	f000 fe21 	bl	80020e4 <HAL_GPIO_WritePin>
			break;
 80014a2:	e005      	b.n	80014b0 <TIM6_DAC_IRQHandler+0xe0>
		case 3:
			HAL_GPIO_WritePin(PF3_GPIO_Port, PF3_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2104      	movs	r1, #4
 80014a8:	4870      	ldr	r0, [pc, #448]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 80014aa:	f000 fe1b 	bl	80020e4 <HAL_GPIO_WritePin>
			break;
 80014ae:	bf00      	nop
		}


		elevator_moving_counter = 0;
 80014b0:	4b68      	ldr	r3, [pc, #416]	@ (8001654 <TIM6_DAC_IRQHandler+0x284>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
		sprintf(msgs, "ELEVATOR AT FLOOR %d\r\n", floor_position);
 80014b6:	4b69      	ldr	r3, [pc, #420]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	496c      	ldr	r1, [pc, #432]	@ (8001670 <TIM6_DAC_IRQHandler+0x2a0>)
 80014be:	4869      	ldr	r0, [pc, #420]	@ (8001664 <TIM6_DAC_IRQHandler+0x294>)
 80014c0:	f003 fada 	bl	8004a78 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 21, 100);
 80014c4:	2364      	movs	r3, #100	@ 0x64
 80014c6:	2215      	movs	r2, #21
 80014c8:	4966      	ldr	r1, [pc, #408]	@ (8001664 <TIM6_DAC_IRQHandler+0x294>)
 80014ca:	4867      	ldr	r0, [pc, #412]	@ (8001668 <TIM6_DAC_IRQHandler+0x298>)
 80014cc:	f002 fef8 	bl	80042c0 <HAL_UART_Transmit>

		if (floor_position == floor_destinations[0]) { // IF ELEVATOR HAS REACHED FIRST DESTINATION
 80014d0:	4b68      	ldr	r3, [pc, #416]	@ (8001674 <TIM6_DAC_IRQHandler+0x2a4>)
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	4b61      	ldr	r3, [pc, #388]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d158      	bne.n	800158e <TIM6_DAC_IRQHandler+0x1be>
			sprintf(msgs, "DESTINATION AT FLOOR %d REACHED\r\n", floor_position);
 80014dc:	4b5f      	ldr	r3, [pc, #380]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4965      	ldr	r1, [pc, #404]	@ (8001678 <TIM6_DAC_IRQHandler+0x2a8>)
 80014e4:	485f      	ldr	r0, [pc, #380]	@ (8001664 <TIM6_DAC_IRQHandler+0x294>)
 80014e6:	f003 fac7 	bl	8004a78 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 32, 100);
 80014ea:	2364      	movs	r3, #100	@ 0x64
 80014ec:	2220      	movs	r2, #32
 80014ee:	495d      	ldr	r1, [pc, #372]	@ (8001664 <TIM6_DAC_IRQHandler+0x294>)
 80014f0:	485d      	ldr	r0, [pc, #372]	@ (8001668 <TIM6_DAC_IRQHandler+0x298>)
 80014f2:	f002 fee5 	bl	80042c0 <HAL_UART_Transmit>

			switch(floor_position) {
 80014f6:	4b59      	ldr	r3, [pc, #356]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d012      	beq.n	8001524 <TIM6_DAC_IRQHandler+0x154>
 80014fe:	2b03      	cmp	r3, #3
 8001500:	dc16      	bgt.n	8001530 <TIM6_DAC_IRQHandler+0x160>
 8001502:	2b01      	cmp	r3, #1
 8001504:	d002      	beq.n	800150c <TIM6_DAC_IRQHandler+0x13c>
 8001506:	2b02      	cmp	r3, #2
 8001508:	d006      	beq.n	8001518 <TIM6_DAC_IRQHandler+0x148>
 800150a:	e011      	b.n	8001530 <TIM6_DAC_IRQHandler+0x160>
			case 1:
				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2108      	movs	r1, #8
 8001510:	4856      	ldr	r0, [pc, #344]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 8001512:	f000 fde7 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 8001516:	e00b      	b.n	8001530 <TIM6_DAC_IRQHandler+0x160>
			case 2:
				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	4853      	ldr	r0, [pc, #332]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 800151e:	f000 fde1 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 8001522:	e005      	b.n	8001530 <TIM6_DAC_IRQHandler+0x160>
			case 3:
				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2120      	movs	r1, #32
 8001528:	4850      	ldr	r0, [pc, #320]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 800152a:	f000 fddb 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 800152e:	bf00      	nop
			}

			HAL_GPIO_WritePin(elevator_direction == 'u' ? DU_GPIO_Port : DD_GPIO_Port, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 8001530:	4b49      	ldr	r3, [pc, #292]	@ (8001658 <TIM6_DAC_IRQHandler+0x288>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b75      	cmp	r3, #117	@ 0x75
 8001536:	d101      	bne.n	800153c <TIM6_DAC_IRQHandler+0x16c>
 8001538:	2340      	movs	r3, #64	@ 0x40
 800153a:	e000      	b.n	800153e <TIM6_DAC_IRQHandler+0x16e>
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	484a      	ldr	r0, [pc, #296]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 8001544:	f000 fdce 	bl	80020e4 <HAL_GPIO_WritePin>
			if (floor_destinations[1] == 0) { // IF THERE ARE NO OTHER FLOOR DESTINATION REQUESTS
 8001548:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <TIM6_DAC_IRQHandler+0x2a4>)
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <TIM6_DAC_IRQHandler+0x188>
				floor_destinations[0] = 0;
 8001550:	4b48      	ldr	r3, [pc, #288]	@ (8001674 <TIM6_DAC_IRQHandler+0x2a4>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	e006      	b.n	8001566 <TIM6_DAC_IRQHandler+0x196>

			} else { // IF THERE IS ANOTHER FLOOR DESTINATION REQUEST
				floor_destinations[0] = floor_destinations[1];
 8001558:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <TIM6_DAC_IRQHandler+0x2a4>)
 800155a:	785a      	ldrb	r2, [r3, #1]
 800155c:	4b45      	ldr	r3, [pc, #276]	@ (8001674 <TIM6_DAC_IRQHandler+0x2a4>)
 800155e:	701a      	strb	r2, [r3, #0]
				floor_destinations[1] = 0;
 8001560:	4b44      	ldr	r3, [pc, #272]	@ (8001674 <TIM6_DAC_IRQHandler+0x2a4>)
 8001562:	2200      	movs	r2, #0
 8001564:	705a      	strb	r2, [r3, #1]
				// CHECK FOR ANY INPUTS INSIDE ELEVATOR, ONLY ALLOW TO GO IN THE CURRENT DIRECTION
			}
//			HAL_TIM_Base_Stop_IT(&htim2);
//			start_timer = 0;
//			if (requests[0] || floor_destinations[0])		HAL_TIM_Base_Start_IT(&htim2);
			if (requests[0] || floor_destinations[0])	Reset_Timer(1, &htim2);
 8001566:	4b45      	ldr	r3, [pc, #276]	@ (800167c <TIM6_DAC_IRQHandler+0x2ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <TIM6_DAC_IRQHandler+0x1a6>
 800156e:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <TIM6_DAC_IRQHandler+0x2a4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <TIM6_DAC_IRQHandler+0x1ae>
 8001576:	4942      	ldr	r1, [pc, #264]	@ (8001680 <TIM6_DAC_IRQHandler+0x2b0>)
 8001578:	2001      	movs	r0, #1
 800157a:	f000 f93d 	bl	80017f8 <Reset_Timer>
			Reset_Timer(1, &htim15);
 800157e:	4941      	ldr	r1, [pc, #260]	@ (8001684 <TIM6_DAC_IRQHandler+0x2b4>)
 8001580:	2001      	movs	r0, #1
 8001582:	f000 f939 	bl	80017f8 <Reset_Timer>
			HAL_TIM_Base_Stop_IT(&htim6);
 8001586:	4840      	ldr	r0, [pc, #256]	@ (8001688 <TIM6_DAC_IRQHandler+0x2b8>)
 8001588:	f002 fa92 	bl	8003ab0 <HAL_TIM_Base_Stop_IT>
 800158c:	e11b      	b.n	80017c6 <TIM6_DAC_IRQHandler+0x3f6>

		} else if (floor_position == serving->floor_number && traveling) {
 800158e:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <TIM6_DAC_IRQHandler+0x2bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	785a      	ldrb	r2, [r3, #1]
 8001594:	4b31      	ldr	r3, [pc, #196]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d17d      	bne.n	8001698 <TIM6_DAC_IRQHandler+0x2c8>
 800159c:	4b3c      	ldr	r3, [pc, #240]	@ (8001690 <TIM6_DAC_IRQHandler+0x2c0>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d079      	beq.n	8001698 <TIM6_DAC_IRQHandler+0x2c8>
			sprintf(msgs, "REQUEST AT FLOOR %d REACHED\r\n", floor_position);
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <TIM6_DAC_IRQHandler+0x28c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	493a      	ldr	r1, [pc, #232]	@ (8001694 <TIM6_DAC_IRQHandler+0x2c4>)
 80015ac:	482d      	ldr	r0, [pc, #180]	@ (8001664 <TIM6_DAC_IRQHandler+0x294>)
 80015ae:	f003 fa63 	bl	8004a78 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 28, 100);
 80015b2:	2364      	movs	r3, #100	@ 0x64
 80015b4:	221c      	movs	r2, #28
 80015b6:	492b      	ldr	r1, [pc, #172]	@ (8001664 <TIM6_DAC_IRQHandler+0x294>)
 80015b8:	482b      	ldr	r0, [pc, #172]	@ (8001668 <TIM6_DAC_IRQHandler+0x298>)
 80015ba:	f002 fe81 	bl	80042c0 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(elevator_direction == 'u' ? DU_GPIO_Port : DD_GPIO_Port, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 80015be:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <TIM6_DAC_IRQHandler+0x288>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b75      	cmp	r3, #117	@ 0x75
 80015c4:	d101      	bne.n	80015ca <TIM6_DAC_IRQHandler+0x1fa>
 80015c6:	2340      	movs	r3, #64	@ 0x40
 80015c8:	e000      	b.n	80015cc <TIM6_DAC_IRQHandler+0x1fc>
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4826      	ldr	r0, [pc, #152]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 80015d2:	f000 fd87 	bl	80020e4 <HAL_GPIO_WritePin>
			traveling = 0;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <TIM6_DAC_IRQHandler+0x2c0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
			switch(serving->floor_number) {
 80015dc:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <TIM6_DAC_IRQHandler+0x2bc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	785b      	ldrb	r3, [r3, #1]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d01c      	beq.n	8001620 <TIM6_DAC_IRQHandler+0x250>
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	dc24      	bgt.n	8001634 <TIM6_DAC_IRQHandler+0x264>
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d002      	beq.n	80015f4 <TIM6_DAC_IRQHandler+0x224>
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d00a      	beq.n	8001608 <TIM6_DAC_IRQHandler+0x238>
 80015f2:	e01f      	b.n	8001634 <TIM6_DAC_IRQHandler+0x264>
			  case 1:
				  elevator_direction = 'u';
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <TIM6_DAC_IRQHandler+0x288>)
 80015f6:	2275      	movs	r2, #117	@ 0x75
 80015f8:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001600:	481a      	ldr	r0, [pc, #104]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 8001602:	f000 fd6f 	bl	80020e4 <HAL_GPIO_WritePin>
				  break;
 8001606:	e015      	b.n	8001634 <TIM6_DAC_IRQHandler+0x264>
			  case 2:
				  elevator_direction = serving->direction;
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <TIM6_DAC_IRQHandler+0x2bc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	789a      	ldrb	r2, [r3, #2]
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <TIM6_DAC_IRQHandler+0x288>)
 8001610:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001618:	4814      	ldr	r0, [pc, #80]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 800161a:	f000 fd63 	bl	80020e4 <HAL_GPIO_WritePin>
				  break;
 800161e:	e009      	b.n	8001634 <TIM6_DAC_IRQHandler+0x264>
			  case 3:
				  elevator_direction = 'd';
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <TIM6_DAC_IRQHandler+0x288>)
 8001622:	2264      	movs	r2, #100	@ 0x64
 8001624:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800162c:	480f      	ldr	r0, [pc, #60]	@ (800166c <TIM6_DAC_IRQHandler+0x29c>)
 800162e:	f000 fd59 	bl	80020e4 <HAL_GPIO_WritePin>
				  break;
 8001632:	bf00      	nop
			  }
//			HAL_TIM_Base_Stop_IT(&htim2);
//			start_timer = 0;
//			if (requests[0])		HAL_TIM_Base_Start_IT(&htim2);
			if (requests[0])	Reset_Timer(1, &htim2);
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <TIM6_DAC_IRQHandler+0x2ac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <TIM6_DAC_IRQHandler+0x274>
 800163c:	4910      	ldr	r1, [pc, #64]	@ (8001680 <TIM6_DAC_IRQHandler+0x2b0>)
 800163e:	2001      	movs	r0, #1
 8001640:	f000 f8da 	bl	80017f8 <Reset_Timer>
			Reset_Timer(1, &htim15);
 8001644:	490f      	ldr	r1, [pc, #60]	@ (8001684 <TIM6_DAC_IRQHandler+0x2b4>)
 8001646:	2001      	movs	r0, #1
 8001648:	f000 f8d6 	bl	80017f8 <Reset_Timer>
			HAL_TIM_Base_Stop_IT(&htim6);
 800164c:	480e      	ldr	r0, [pc, #56]	@ (8001688 <TIM6_DAC_IRQHandler+0x2b8>)
 800164e:	f002 fa2f 	bl	8003ab0 <HAL_TIM_Base_Stop_IT>
 8001652:	e0b8      	b.n	80017c6 <TIM6_DAC_IRQHandler+0x3f6>
 8001654:	2000023b 	.word	0x2000023b
 8001658:	20000218 	.word	0x20000218
 800165c:	20000219 	.word	0x20000219
 8001660:	080053fc 	.word	0x080053fc
 8001664:	2000023c 	.word	0x2000023c
 8001668:	2000015c 	.word	0x2000015c
 800166c:	48000800 	.word	0x48000800
 8001670:	08005420 	.word	0x08005420
 8001674:	2000021c 	.word	0x2000021c
 8001678:	08005438 	.word	0x08005438
 800167c:	20000220 	.word	0x20000220
 8001680:	20000078 	.word	0x20000078
 8001684:	20000110 	.word	0x20000110
 8001688:	200000c4 	.word	0x200000c4
 800168c:	20000234 	.word	0x20000234
 8001690:	20000239 	.word	0x20000239
 8001694:	0800545c 	.word	0x0800545c
		} else {
			// CHECK IF THERE ARE ANY REQUESTS AT THAT FLOOR GOING IN THE SAME DIRECTION AS THE ELEVATOR, AND SERVICE THEM IF SO
			int8_t floor_requested = -1;
 8001698:	23ff      	movs	r3, #255	@ 0xff
 800169a:	73fb      	strb	r3, [r7, #15]
			switch(floor_position) {
 800169c:	4b4d      	ldr	r3, [pc, #308]	@ (80017d4 <TIM6_DAC_IRQHandler+0x404>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d03e      	beq.n	8001722 <TIM6_DAC_IRQHandler+0x352>
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	dc51      	bgt.n	800174c <TIM6_DAC_IRQHandler+0x37c>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d002      	beq.n	80016b2 <TIM6_DAC_IRQHandler+0x2e2>
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d010      	beq.n	80016d2 <TIM6_DAC_IRQHandler+0x302>
 80016b0:	e04c      	b.n	800174c <TIM6_DAC_IRQHandler+0x37c>
			case 1:
				if (floor_requests[0].requested) {
 80016b2:	4b49      	ldr	r3, [pc, #292]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d043      	beq.n	8001742 <TIM6_DAC_IRQHandler+0x372>
					HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c0:	4846      	ldr	r0, [pc, #280]	@ (80017dc <TIM6_DAC_IRQHandler+0x40c>)
 80016c2:	f000 fd0f 	bl	80020e4 <HAL_GPIO_WritePin>
					floor_requests[0].requested = 0;
 80016c6:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
					floor_requested = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80016d0:	e037      	b.n	8001742 <TIM6_DAC_IRQHandler+0x372>
			case 2:
				if (floor_requests[1].requested && elevator_direction == 'd') {
 80016d2:	4b41      	ldr	r3, [pc, #260]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 80016d4:	78db      	ldrb	r3, [r3, #3]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00f      	beq.n	80016fa <TIM6_DAC_IRQHandler+0x32a>
 80016da:	4b41      	ldr	r3, [pc, #260]	@ (80017e0 <TIM6_DAC_IRQHandler+0x410>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d10b      	bne.n	80016fa <TIM6_DAC_IRQHandler+0x32a>
					HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016e8:	483c      	ldr	r0, [pc, #240]	@ (80017dc <TIM6_DAC_IRQHandler+0x40c>)
 80016ea:	f000 fcfb 	bl	80020e4 <HAL_GPIO_WritePin>
					floor_requests[1].requested = 0;
 80016ee:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	70da      	strb	r2, [r3, #3]
					floor_requested = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
				} else if (floor_requests[2].requested && elevator_direction == 'u') {
					HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
					floor_requests[2].requested = 0;
					floor_requested = 2;
				}
				break;
 80016f8:	e025      	b.n	8001746 <TIM6_DAC_IRQHandler+0x376>
				} else if (floor_requests[2].requested && elevator_direction == 'u') {
 80016fa:	4b37      	ldr	r3, [pc, #220]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 80016fc:	799b      	ldrb	r3, [r3, #6]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d021      	beq.n	8001746 <TIM6_DAC_IRQHandler+0x376>
 8001702:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <TIM6_DAC_IRQHandler+0x410>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b75      	cmp	r3, #117	@ 0x75
 8001708:	d11d      	bne.n	8001746 <TIM6_DAC_IRQHandler+0x376>
					HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001710:	4832      	ldr	r0, [pc, #200]	@ (80017dc <TIM6_DAC_IRQHandler+0x40c>)
 8001712:	f000 fce7 	bl	80020e4 <HAL_GPIO_WritePin>
					floor_requests[2].requested = 0;
 8001716:	4b30      	ldr	r3, [pc, #192]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 8001718:	2200      	movs	r2, #0
 800171a:	719a      	strb	r2, [r3, #6]
					floor_requested = 2;
 800171c:	2302      	movs	r3, #2
 800171e:	73fb      	strb	r3, [r7, #15]
				break;
 8001720:	e011      	b.n	8001746 <TIM6_DAC_IRQHandler+0x376>
			case 3:
				if (floor_requests[3].requested) {
 8001722:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 8001724:	7a5b      	ldrb	r3, [r3, #9]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00f      	beq.n	800174a <TIM6_DAC_IRQHandler+0x37a>
					HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001730:	482a      	ldr	r0, [pc, #168]	@ (80017dc <TIM6_DAC_IRQHandler+0x40c>)
 8001732:	f000 fcd7 	bl	80020e4 <HAL_GPIO_WritePin>
					floor_requests[3].requested = 0;
 8001736:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 8001738:	2200      	movs	r2, #0
 800173a:	725a      	strb	r2, [r3, #9]
					floor_requested = 3;
 800173c:	2303      	movs	r3, #3
 800173e:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001740:	e003      	b.n	800174a <TIM6_DAC_IRQHandler+0x37a>
				break;
 8001742:	bf00      	nop
 8001744:	e002      	b.n	800174c <TIM6_DAC_IRQHandler+0x37c>
				break;
 8001746:	bf00      	nop
 8001748:	e000      	b.n	800174c <TIM6_DAC_IRQHandler+0x37c>
				break;
 800174a:	bf00      	nop
			}

			if (floor_requested != -1) {
 800174c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d037      	beq.n	80017c6 <TIM6_DAC_IRQHandler+0x3f6>
				for (int i = 0; i < 4; i++) {
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	e026      	b.n	80017aa <TIM6_DAC_IRQHandler+0x3da>
					if (requests[i] == &floor_requests[floor_requested]) {
 800175c:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <TIM6_DAC_IRQHandler+0x414>)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001764:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	4a1a      	ldr	r2, [pc, #104]	@ (80017d8 <TIM6_DAC_IRQHandler+0x408>)
 8001770:	4413      	add	r3, r2
 8001772:	4299      	cmp	r1, r3
 8001774:	d116      	bne.n	80017a4 <TIM6_DAC_IRQHandler+0x3d4>
						for (int k = i; k < 3; k++) {
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	e00b      	b.n	8001794 <TIM6_DAC_IRQHandler+0x3c4>
							requests[k] = requests[k + 1];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3301      	adds	r3, #1
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <TIM6_DAC_IRQHandler+0x414>)
 8001782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001786:	4917      	ldr	r1, [pc, #92]	@ (80017e4 <TIM6_DAC_IRQHandler+0x414>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						for (int k = i; k < 3; k++) {
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3301      	adds	r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	ddf0      	ble.n	800177c <TIM6_DAC_IRQHandler+0x3ac>
						}
						requests[3] = NULL;
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <TIM6_DAC_IRQHandler+0x414>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
						i = 4;
 80017a0:	2304      	movs	r3, #4
 80017a2:	60bb      	str	r3, [r7, #8]
				for (int i = 0; i < 4; i++) {
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	ddd5      	ble.n	800175c <TIM6_DAC_IRQHandler+0x38c>
					}
				}
				count = 0;
 80017b0:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <TIM6_DAC_IRQHandler+0x418>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
//				HAL_TIM_Base_Stop_IT(&htim2);
//				start_timer = 0;
//				HAL_TIM_Base_Start_IT(&htim2);
//				HAL_TIM_Base_Start_IT(&htim15);
				Reset_Timer(2, &htim2, &htim15);
 80017b6:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <TIM6_DAC_IRQHandler+0x41c>)
 80017b8:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <TIM6_DAC_IRQHandler+0x420>)
 80017ba:	2002      	movs	r0, #2
 80017bc:	f000 f81c 	bl	80017f8 <Reset_Timer>
				HAL_TIM_Base_Stop_IT(&htim6);
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <TIM6_DAC_IRQHandler+0x424>)
 80017c2:	f002 f975 	bl	8003ab0 <HAL_TIM_Base_Stop_IT>
////				HAL_TIM_Base_Stop_IT(&htim6);
//			}
		}
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017c6:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <TIM6_DAC_IRQHandler+0x424>)
 80017c8:	f002 f9a1 	bl	8003b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000219 	.word	0x20000219
 80017d8:	2000020c 	.word	0x2000020c
 80017dc:	48000800 	.word	0x48000800
 80017e0:	20000218 	.word	0x20000218
 80017e4:	20000220 	.word	0x20000220
 80017e8:	2000023a 	.word	0x2000023a
 80017ec:	20000110 	.word	0x20000110
 80017f0:	20000078 	.word	0x20000078
 80017f4:	200000c4 	.word	0x200000c4

080017f8 <Reset_Timer>:
//	if (htim->Instance == TIM2) {
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	}
//}

void Reset_Timer(int num, ...) {
 80017f8:	b40f      	push	{r0, r1, r2, r3}
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
	va_list arg_list;
	va_start(arg_list, num);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < num; i++) {
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e024      	b.n	8001856 <Reset_Timer+0x5e>
		TIM_HandleTypeDef* temp = va_arg(arg_list, TIM_HandleTypeDef*);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	1d1a      	adds	r2, r3, #4
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60bb      	str	r3, [r7, #8]
		if (temp->Instance == TIM2) {
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800181e:	d109      	bne.n	8001834 <Reset_Timer+0x3c>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001820:	4813      	ldr	r0, [pc, #76]	@ (8001870 <Reset_Timer+0x78>)
 8001822:	f002 f945 	bl	8003ab0 <HAL_TIM_Base_Stop_IT>
			start_timer = 0;
 8001826:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <Reset_Timer+0x7c>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 800182c:	4810      	ldr	r0, [pc, #64]	@ (8001870 <Reset_Timer+0x78>)
 800182e:	f002 f8eb 	bl	8003a08 <HAL_TIM_Base_Start_IT>
 8001832:	e00d      	b.n	8001850 <Reset_Timer+0x58>
		} else if (temp->Instance == TIM15) {
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0f      	ldr	r2, [pc, #60]	@ (8001878 <Reset_Timer+0x80>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d108      	bne.n	8001850 <Reset_Timer+0x58>
			HAL_TIM_Base_Stop_IT(&htim15);
 800183e:	480f      	ldr	r0, [pc, #60]	@ (800187c <Reset_Timer+0x84>)
 8001840:	f002 f936 	bl	8003ab0 <HAL_TIM_Base_Stop_IT>
			count = 0;
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <Reset_Timer+0x88>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 800184a:	480c      	ldr	r0, [pc, #48]	@ (800187c <Reset_Timer+0x84>)
 800184c:	f002 f8dc 	bl	8003a08 <HAL_TIM_Base_Start_IT>
	for (int i = 0; i < num; i++) {
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3301      	adds	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbd6      	blt.n	800180c <Reset_Timer+0x14>
//		} else {
//			sprintf(msgs, "THIS\r\n");
//									HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 6, 100);
//		}
	}
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800186a:	b004      	add	sp, #16
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000078 	.word	0x20000078
 8001874:	20000238 	.word	0x20000238
 8001878:	40014000 	.word	0x40014000
 800187c:	20000110 	.word	0x20000110
 8001880:	2000023a 	.word	0x2000023a

08001884 <Choose_Floor_To_Service>:

void Choose_Floor_To_Service(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	// IF there is at least one floor requests and if we are not serving
	if (requests[0] && !serving) {
 800188a:	4b42      	ldr	r3, [pc, #264]	@ (8001994 <Choose_Floor_To_Service+0x110>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d07c      	beq.n	800198c <Choose_Floor_To_Service+0x108>
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <Choose_Floor_To_Service+0x114>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d178      	bne.n	800198c <Choose_Floor_To_Service+0x108>
		serving = requests[0];
 800189a:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <Choose_Floor_To_Service+0x110>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a3e      	ldr	r2, [pc, #248]	@ (8001998 <Choose_Floor_To_Service+0x114>)
 80018a0:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 3; i++) {
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	e00b      	b.n	80018c0 <Choose_Floor_To_Service+0x3c>
			requests[i] = requests[i + 1];
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3301      	adds	r3, #1
 80018ac:	4a39      	ldr	r2, [pc, #228]	@ (8001994 <Choose_Floor_To_Service+0x110>)
 80018ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018b2:	4938      	ldr	r1, [pc, #224]	@ (8001994 <Choose_Floor_To_Service+0x110>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 3; i++) {
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3301      	adds	r3, #1
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	ddf0      	ble.n	80018a8 <Choose_Floor_To_Service+0x24>
		}
		requests[3] = NULL;
 80018c6:	4b33      	ldr	r3, [pc, #204]	@ (8001994 <Choose_Floor_To_Service+0x110>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]

		// CASE 1
		// IF the elevator's floor position matches with the floor that we are serving
		if (floor_position == serving->floor_number) {
 80018cc:	4b32      	ldr	r3, [pc, #200]	@ (8001998 <Choose_Floor_To_Service+0x114>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	785a      	ldrb	r2, [r3, #1]
 80018d2:	4b32      	ldr	r3, [pc, #200]	@ (800199c <Choose_Floor_To_Service+0x118>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d12f      	bne.n	800193a <Choose_Floor_To_Service+0xb6>
			switch(serving->floor_number) { // CHANGE THIS SWITCH CASE
 80018da:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <Choose_Floor_To_Service+0x114>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	785b      	ldrb	r3, [r3, #1]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d01c      	beq.n	800191e <Choose_Floor_To_Service+0x9a>
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	dc24      	bgt.n	8001932 <Choose_Floor_To_Service+0xae>
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d002      	beq.n	80018f2 <Choose_Floor_To_Service+0x6e>
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d00a      	beq.n	8001906 <Choose_Floor_To_Service+0x82>
 80018f0:	e01f      	b.n	8001932 <Choose_Floor_To_Service+0xae>
			case 1:
				elevator_direction = 'u';
 80018f2:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <Choose_Floor_To_Service+0x11c>)
 80018f4:	2275      	movs	r2, #117	@ 0x75
 80018f6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018fe:	4829      	ldr	r0, [pc, #164]	@ (80019a4 <Choose_Floor_To_Service+0x120>)
 8001900:	f000 fbf0 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 8001904:	e015      	b.n	8001932 <Choose_Floor_To_Service+0xae>
			case 2:
				elevator_direction = serving->direction;
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <Choose_Floor_To_Service+0x114>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	789a      	ldrb	r2, [r3, #2]
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <Choose_Floor_To_Service+0x11c>)
 800190e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001916:	4823      	ldr	r0, [pc, #140]	@ (80019a4 <Choose_Floor_To_Service+0x120>)
 8001918:	f000 fbe4 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 800191c:	e009      	b.n	8001932 <Choose_Floor_To_Service+0xae>
			case 3:
				elevator_direction = 'd';
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <Choose_Floor_To_Service+0x11c>)
 8001920:	2264      	movs	r2, #100	@ 0x64
 8001922:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800192a:	481e      	ldr	r0, [pc, #120]	@ (80019a4 <Choose_Floor_To_Service+0x120>)
 800192c:	f000 fbda 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 8001930:	bf00      	nop
			}

			HAL_TIM_Base_Start_IT(&htim15);
 8001932:	481d      	ldr	r0, [pc, #116]	@ (80019a8 <Choose_Floor_To_Service+0x124>)
 8001934:	f002 f868 	bl	8003a08 <HAL_TIM_Base_Start_IT>
		  }
	}

//	// IF there is at least 1 floor request and if the elevator is either not serving or it is serving and the current floor position ma
//	if (requests[0] != 0 && (!serving || (serving && floor_position == requests[0]))) {
}
 8001938:	e028      	b.n	800198c <Choose_Floor_To_Service+0x108>
		  else if (!traveling && floor_position != serving->floor_number) {
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <Choose_Floor_To_Service+0x128>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d124      	bne.n	800198c <Choose_Floor_To_Service+0x108>
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <Choose_Floor_To_Service+0x114>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	785a      	ldrb	r2, [r3, #1]
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <Choose_Floor_To_Service+0x118>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d01d      	beq.n	800198c <Choose_Floor_To_Service+0x108>
			  traveling = 1;
 8001950:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <Choose_Floor_To_Service+0x128>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
			  elevator_direction = floor_position > serving->floor_number ? 'd' : 'u';
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <Choose_Floor_To_Service+0x114>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	785a      	ldrb	r2, [r3, #1]
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <Choose_Floor_To_Service+0x118>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d201      	bcs.n	8001968 <Choose_Floor_To_Service+0xe4>
 8001964:	2264      	movs	r2, #100	@ 0x64
 8001966:	e000      	b.n	800196a <Choose_Floor_To_Service+0xe6>
 8001968:	2275      	movs	r2, #117	@ 0x75
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <Choose_Floor_To_Service+0x11c>)
 800196c:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <Choose_Floor_To_Service+0x11c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b75      	cmp	r3, #117	@ 0x75
 8001974:	d101      	bne.n	800197a <Choose_Floor_To_Service+0xf6>
 8001976:	2340      	movs	r3, #64	@ 0x40
 8001978:	e000      	b.n	800197c <Choose_Floor_To_Service+0xf8>
 800197a:	2380      	movs	r3, #128	@ 0x80
 800197c:	2201      	movs	r2, #1
 800197e:	4619      	mov	r1, r3
 8001980:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <Choose_Floor_To_Service+0x120>)
 8001982:	f000 fbaf 	bl	80020e4 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim6);
 8001986:	480a      	ldr	r0, [pc, #40]	@ (80019b0 <Choose_Floor_To_Service+0x12c>)
 8001988:	f002 f83e 	bl	8003a08 <HAL_TIM_Base_Start_IT>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000220 	.word	0x20000220
 8001998:	20000234 	.word	0x20000234
 800199c:	20000219 	.word	0x20000219
 80019a0:	20000218 	.word	0x20000218
 80019a4:	48000800 	.word	0x48000800
 80019a8:	20000110 	.word	0x20000110
 80019ac:	20000239 	.word	0x20000239
 80019b0:	200000c4 	.word	0x200000c4

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f003 f870 	bl	8004ac8 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20004000 	.word	0x20004000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	20000270 	.word	0x20000270
 8001a1c:	200003c0 	.word	0x200003c0

08001a20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a7c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a48:	f7ff ffea 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4e:	490d      	ldr	r1, [pc, #52]	@ (8001a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a50:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <LoopForever+0xe>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a64:	4c0a      	ldr	r4, [pc, #40]	@ (8001a90 <LoopForever+0x16>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a72:	f003 f82f 	bl	8004ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a76:	f7fe fbfb 	bl	8000270 <main>

08001a7a <LoopForever>:

LoopForever:
    b LoopForever
 8001a7a:	e7fe      	b.n	8001a7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a7c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a88:	080054f8 	.word	0x080054f8
  ldr r2, =_sbss
 8001a8c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a90:	200003c0 	.word	0x200003c0

08001a94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC1_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_Init+0x28>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <HAL_Init+0x28>)
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 f94f 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f808 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab4:	f7ff f800 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f967 	bl	8001db6 <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 f92f 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000274 	.word	0x20000274

08001b4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000274 	.word	0x20000274

08001b64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff ffee 	bl	8001b4c <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d005      	beq.n	8001b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_Delay+0x44>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ffde 	bl	8001b4c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8f7      	bhi.n	8001b8c <HAL_Delay+0x28>
  {
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	@ (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff29 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff3e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff31 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	e14e      	b.n	800207e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8140 	beq.w	8002078 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d005      	beq.n	8001e10 <HAL_GPIO_Init+0x40>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d130      	bne.n	8001e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 0201 	and.w	r2, r3, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d017      	beq.n	8001eae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d123      	bne.n	8001f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	08da      	lsrs	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3208      	adds	r2, #8
 8001ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	6939      	ldr	r1, [r7, #16]
 8001efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0203 	and.w	r2, r3, #3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 809a 	beq.w	8002078 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f44:	4b55      	ldr	r3, [pc, #340]	@ (800209c <HAL_GPIO_Init+0x2cc>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a54      	ldr	r2, [pc, #336]	@ (800209c <HAL_GPIO_Init+0x2cc>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b52      	ldr	r3, [pc, #328]	@ (800209c <HAL_GPIO_Init+0x2cc>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f5c:	4a50      	ldr	r2, [pc, #320]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f86:	d013      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a46      	ldr	r2, [pc, #280]	@ (80020a4 <HAL_GPIO_Init+0x2d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_GPIO_Init+0x1dc>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a45      	ldr	r2, [pc, #276]	@ (80020a8 <HAL_GPIO_Init+0x2d8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_Init+0x1d8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a44      	ldr	r2, [pc, #272]	@ (80020ac <HAL_GPIO_Init+0x2dc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_GPIO_Init+0x1d4>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fc2:	4937      	ldr	r1, [pc, #220]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd0:	4b37      	ldr	r3, [pc, #220]	@ (80020b0 <HAL_GPIO_Init+0x2e0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80020b0 <HAL_GPIO_Init+0x2e0>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80020b0 <HAL_GPIO_Init+0x2e0>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800201e:	4a24      	ldr	r2, [pc, #144]	@ (80020b0 <HAL_GPIO_Init+0x2e0>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002024:	4b22      	ldr	r3, [pc, #136]	@ (80020b0 <HAL_GPIO_Init+0x2e0>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_GPIO_Init+0x2e0>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <HAL_GPIO_Init+0x2e0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002072:	4a0f      	ldr	r2, [pc, #60]	@ (80020b0 <HAL_GPIO_Init+0x2e0>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f aea9 	bne.w	8001de0 <HAL_GPIO_Init+0x10>
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	48000400 	.word	0x48000400
 80020a8:	48000800 	.word	0x48000800
 80020ac:	48000c00 	.word	0x48000c00
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e001      	b.n	80020d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002100:	e002      	b.n	8002108 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43d9      	mvns	r1, r3
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	400b      	ands	r3, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fbc8 	bl	80008fc <HAL_GPIO_EXTI_Callback>
  }
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800217e:	af00      	add	r7, sp, #0
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002188:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f001 b823 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 817d 	beq.w	80024ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021b4:	4bbc      	ldr	r3, [pc, #752]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d00c      	beq.n	80021da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c0:	4bb9      	ldr	r3, [pc, #740]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d15c      	bne.n	8002286 <HAL_RCC_OscConfig+0x10e>
 80021cc:	4bb6      	ldr	r3, [pc, #728]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d8:	d155      	bne.n	8002286 <HAL_RCC_OscConfig+0x10e>
 80021da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021de:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_RCC_OscConfig+0x94>
 8002206:	4ba8      	ldr	r3, [pc, #672]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	e015      	b.n	8002238 <HAL_RCC_OscConfig+0xc0>
 800220c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002210:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002220:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002224:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002228:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002234:	4b9c      	ldr	r3, [pc, #624]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800223c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002240:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800224c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f042 0220 	orr.w	r2, r2, #32
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f002 021f 	and.w	r2, r2, #31
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 811f 	beq.w	80024ac <HAL_RCC_OscConfig+0x334>
 800226e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8116 	bne.w	80024ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f000 bfaf 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x12e>
 8002298:	4b83      	ldr	r3, [pc, #524]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a82      	ldr	r2, [pc, #520]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e036      	b.n	8002314 <HAL_RCC_OscConfig+0x19c>
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x158>
 80022b6:	4b7c      	ldr	r3, [pc, #496]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7b      	ldr	r2, [pc, #492]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b79      	ldr	r3, [pc, #484]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a78      	ldr	r2, [pc, #480]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e021      	b.n	8002314 <HAL_RCC_OscConfig+0x19c>
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x184>
 80022e2:	4b71      	ldr	r3, [pc, #452]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a70      	ldr	r2, [pc, #448]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b6e      	ldr	r3, [pc, #440]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6d      	ldr	r2, [pc, #436]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0x19c>
 80022fc:	4b6a      	ldr	r3, [pc, #424]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a69      	ldr	r2, [pc, #420]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b67      	ldr	r3, [pc, #412]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a66      	ldr	r2, [pc, #408]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002312:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002314:	4b64      	ldr	r3, [pc, #400]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002318:	f023 020f 	bic.w	r2, r3, #15
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	495f      	ldr	r1, [pc, #380]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 800232a:	4313      	orrs	r3, r2
 800232c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d059      	beq.n	80023f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fc05 	bl	8001b4c <HAL_GetTick>
 8002342:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff fc00 	bl	8001b4c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	@ 0x64
 8002356:	d902      	bls.n	800235e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	f000 bf43 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 800235e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002362:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002372:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_RCC_OscConfig+0x218>
 800238a:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	e015      	b.n	80023bc <HAL_RCC_OscConfig+0x244>
 8002390:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002394:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80023a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023a8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80023ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80023b8:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023c0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80023c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80023c8:	fa92 f2a2 	rbit	r2, r2
 80023cc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80023d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ab      	beq.n	8002348 <HAL_RCC_OscConfig+0x1d0>
 80023f0:	e05d      	b.n	80024ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff fbab 	bl	8001b4c <HAL_GetTick>
 80023f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fba6 	bl	8001b4c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	@ 0x64
 800240a:	d902      	bls.n	8002412 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	f000 bee9 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002412:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002416:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002426:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d102      	bne.n	8002444 <HAL_RCC_OscConfig+0x2cc>
 800243e:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	e015      	b.n	8002470 <HAL_RCC_OscConfig+0x2f8>
 8002444:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002448:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002458:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800245c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002460:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_RCC_OscConfig+0x330>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002474:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002478:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800247c:	fa92 f2a2 	rbit	r2, r2
 8002480:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002484:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002488:	fab2 f282 	clz	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f042 0220 	orr.w	r2, r2, #32
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f002 021f 	and.w	r2, r2, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ab      	bne.n	80023fc <HAL_RCC_OscConfig+0x284>
 80024a4:	e003      	b.n	80024ae <HAL_RCC_OscConfig+0x336>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 817d 	beq.w	80027be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024c4:	4ba6      	ldr	r3, [pc, #664]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024d0:	4ba3      	ldr	r3, [pc, #652]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d172      	bne.n	80025c2 <HAL_RCC_OscConfig+0x44a>
 80024dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d16c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x44a>
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80024fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_RCC_OscConfig+0x3a0>
 8002512:	4b93      	ldr	r3, [pc, #588]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	e013      	b.n	8002540 <HAL_RCC_OscConfig+0x3c8>
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002530:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800253c:	4b88      	ldr	r3, [pc, #544]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	2202      	movs	r2, #2
 8002542:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002546:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800254a:	fa92 f2a2 	rbit	r2, r2
 800254e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002552:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002556:	fab2 f282 	clz	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f042 0220 	orr.w	r2, r2, #32
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f002 021f 	and.w	r2, r2, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCC_OscConfig+0x410>
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d002      	beq.n	8002588 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	f000 be2e 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b75      	ldr	r3, [pc, #468]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	21f8      	movs	r1, #248	@ 0xf8
 800259e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80025a6:	fa91 f1a1 	rbit	r1, r1
 80025aa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80025ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80025b2:	fab1 f181 	clz	r1, r1
 80025b6:	b2c9      	uxtb	r1, r1
 80025b8:	408b      	lsls	r3, r1
 80025ba:	4969      	ldr	r1, [pc, #420]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c0:	e0fd      	b.n	80027be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8088 	beq.w	80026e4 <HAL_RCC_OscConfig+0x56c>
 80025d4:	2301      	movs	r3, #1
 80025d6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80025e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	461a      	mov	r2, r3
 80025fc:	2301      	movs	r3, #1
 80025fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff faa4 	bl	8001b4c <HAL_GetTick>
 8002604:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260a:	f7ff fa9f 	bl	8001b4c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d902      	bls.n	8002620 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	f000 bde2 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002620:	2302      	movs	r3, #2
 8002622:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002632:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_RCC_OscConfig+0x4d8>
 800264a:	4b45      	ldr	r3, [pc, #276]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e013      	b.n	8002678 <HAL_RCC_OscConfig+0x500>
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002668:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002674:	4b3a      	ldr	r3, [pc, #232]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	2202      	movs	r2, #2
 800267a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800267e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800268a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0af      	beq.n	800260a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	21f8      	movs	r1, #248	@ 0xf8
 80026c0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80026c8:	fa91 f1a1 	rbit	r1, r1
 80026cc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80026d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80026d4:	fab1 f181 	clz	r1, r1
 80026d8:	b2c9      	uxtb	r1, r1
 80026da:	408b      	lsls	r3, r1
 80026dc:	4920      	ldr	r1, [pc, #128]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
 80026e2:	e06c      	b.n	80027be <HAL_RCC_OscConfig+0x646>
 80026e4:	2301      	movs	r3, #1
 80026e6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80026f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002704:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	461a      	mov	r2, r3
 800270c:	2300      	movs	r3, #0
 800270e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fa1c 	bl	8001b4c <HAL_GetTick>
 8002714:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7ff fa17 	bl	8001b4c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	f000 bd5a 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002730:	2302      	movs	r3, #2
 8002732:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002742:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d104      	bne.n	8002764 <HAL_RCC_OscConfig+0x5ec>
 800275a:	4b01      	ldr	r3, [pc, #4]	@ (8002760 <HAL_RCC_OscConfig+0x5e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e015      	b.n	800278c <HAL_RCC_OscConfig+0x614>
 8002760:	40021000 	.word	0x40021000
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800277c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002788:	4bc8      	ldr	r3, [pc, #800]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	2202      	movs	r2, #2
 800278e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002792:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002796:	fa92 f2a2 	rbit	r2, r2
 800279a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800279e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80027a2:	fab2 f282 	clz	r2, r2
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f002 021f 	and.w	r2, r2, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ad      	bne.n	800271a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8110 	beq.w	80029f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d079      	beq.n	80028d8 <HAL_RCC_OscConfig+0x760>
 80027e4:	2301      	movs	r3, #1
 80027e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80027f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4bab      	ldr	r3, [pc, #684]	@ (8002ab0 <HAL_RCC_OscConfig+0x938>)
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	461a      	mov	r2, r3
 800280a:	2301      	movs	r3, #1
 800280c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff f99d 	bl	8001b4c <HAL_GetTick>
 8002812:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff f998 	bl	8001b4c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	f000 bcdb 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 800282e:	2302      	movs	r3, #2
 8002830:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002848:	2202      	movs	r2, #2
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800286c:	2202      	movs	r2, #2
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002886:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002888:	4b88      	ldr	r3, [pc, #544]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 800288a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002894:	2102      	movs	r1, #2
 8002896:	6019      	str	r1, [r3, #0]
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f1a3 	rbit	r1, r3
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028ae:	6019      	str	r1, [r3, #0]
  return result;
 80028b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0a0      	beq.n	8002818 <HAL_RCC_OscConfig+0x6a0>
 80028d6:	e08d      	b.n	80029f4 <HAL_RCC_OscConfig+0x87c>
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002904:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	4b68      	ldr	r3, [pc, #416]	@ (8002ab0 <HAL_RCC_OscConfig+0x938>)
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	461a      	mov	r2, r3
 8002916:	2300      	movs	r3, #0
 8002918:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7ff f917 	bl	8001b4c <HAL_GetTick>
 800291e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002924:	f7ff f912 	bl	8001b4c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d902      	bls.n	800293a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	f000 bc55 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f2a3 	rbit	r2, r3
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002966:	2202      	movs	r2, #2
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002986:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800298a:	2202      	movs	r2, #2
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fa93 f2a3 	rbit	r2, r3
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a6:	4b41      	ldr	r3, [pc, #260]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 80029a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029b2:	2102      	movs	r1, #2
 80029b4:	6019      	str	r1, [r3, #0]
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f1a3 	rbit	r1, r3
 80029c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029cc:	6019      	str	r1, [r3, #0]
  return result;
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d197      	bne.n	8002924 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 81a1 	beq.w	8002d4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a10:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d116      	bne.n	8002a4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1c:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a22      	ldr	r2, [pc, #136]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	61d3      	str	r3, [r2, #28]
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a34:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <HAL_RCC_OscConfig+0x93c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <HAL_RCC_OscConfig+0x93c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a16      	ldr	r2, [pc, #88]	@ (8002ab4 <HAL_RCC_OscConfig+0x93c>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7ff f873 	bl	8001b4c <HAL_GetTick>
 8002a66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	e009      	b.n	8002a80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7ff f86e 	bl	8001b4c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	@ 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e3b1      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <HAL_RCC_OscConfig+0x93c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ef      	beq.n	8002a6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10d      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x940>
 8002a9c:	4b03      	ldr	r3, [pc, #12]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a02      	ldr	r2, [pc, #8]	@ (8002aac <HAL_RCC_OscConfig+0x934>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	e03c      	b.n	8002b24 <HAL_RCC_OscConfig+0x9ac>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	10908120 	.word	0x10908120
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x96a>
 8002ac8:	4bc1      	ldr	r3, [pc, #772]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4ac0      	ldr	r2, [pc, #768]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6213      	str	r3, [r2, #32]
 8002ad4:	4bbe      	ldr	r3, [pc, #760]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4abd      	ldr	r2, [pc, #756]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	e020      	b.n	8002b24 <HAL_RCC_OscConfig+0x9ac>
 8002ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x994>
 8002af2:	4bb7      	ldr	r3, [pc, #732]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4ab6      	ldr	r2, [pc, #728]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6213      	str	r3, [r2, #32]
 8002afe:	4bb4      	ldr	r3, [pc, #720]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4ab3      	ldr	r2, [pc, #716]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6213      	str	r3, [r2, #32]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x9ac>
 8002b0c:	4bb0      	ldr	r3, [pc, #704]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4aaf      	ldr	r2, [pc, #700]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	4bad      	ldr	r3, [pc, #692]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4aac      	ldr	r2, [pc, #688]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8081 	beq.w	8002c38 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7ff f809 	bl	8001b4c <HAL_GetTick>
 8002b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7ff f804 	bl	8001b4c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e345      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b60:	2202      	movs	r2, #2
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b84:	2202      	movs	r2, #2
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	fa93 f2a3 	rbit	r2, r3
 8002b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ba8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d102      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xa4c>
 8002bbe:	4b84      	ldr	r3, [pc, #528]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	e013      	b.n	8002bec <HAL_RCC_OscConfig+0xa74>
 8002bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002bcc:	2202      	movs	r2, #2
 8002bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4b79      	ldr	r3, [pc, #484]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bf0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	6011      	str	r1, [r2, #0]
 8002bf8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bfc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	fa92 f1a2 	rbit	r1, r2
 8002c06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c0a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c0e:	6011      	str	r1, [r2, #0]
  return result;
 8002c10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c14:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	fab2 f282 	clz	r2, r2
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f002 021f 	and.w	r2, r2, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d084      	beq.n	8002b40 <HAL_RCC_OscConfig+0x9c8>
 8002c36:	e07f      	b.n	8002d38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fe ff88 	bl	8001b4c <HAL_GetTick>
 8002c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	e00b      	b.n	8002c5a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe ff83 	bl	8001b4c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e2c4      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c62:	2202      	movs	r2, #2
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c86:	2202      	movs	r2, #2
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f2a3 	rbit	r2, r3
 8002c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ca0:	601a      	str	r2, [r3, #0]
  return result;
 8002ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002caa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xb4e>
 8002cc0:	4b43      	ldr	r3, [pc, #268]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	e013      	b.n	8002cee <HAL_RCC_OscConfig+0xb76>
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002cce:	2202      	movs	r2, #2
 8002cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f2a3 	rbit	r2, r3
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	4b39      	ldr	r3, [pc, #228]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cf2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	6011      	str	r1, [r2, #0]
 8002cfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cfe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fa92 f1a2 	rbit	r1, r2
 8002d08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d0c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d10:	6011      	str	r1, [r2, #0]
  return result;
 8002d12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d16:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d184      	bne.n	8002c42 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d38:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b23      	ldr	r3, [pc, #140]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4a22      	ldr	r2, [pc, #136]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8242 	beq.w	80031e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	f000 8213 	beq.w	8003192 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	f040 8162 	bne.w	8003042 <HAL_RCC_OscConfig+0xeca>
 8002d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d82:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002da2:	601a      	str	r2, [r3, #0]
  return result;
 8002da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002dac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002db8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fec2 	bl	8001b4c <HAL_GetTick>
 8002dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dcc:	e00c      	b.n	8002de8 <HAL_RCC_OscConfig+0xc70>
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe feba 	bl	8001b4c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e1fd      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002df0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e08:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e0c:	601a      	str	r2, [r3, #0]
  return result;
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_OscConfig+0xcba>
 8002e2c:	4bb0      	ldr	r3, [pc, #704]	@ (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	e027      	b.n	8002e82 <HAL_RCC_OscConfig+0xd0a>
 8002e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e36:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e44:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e52:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e78:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	4b9c      	ldr	r3, [pc, #624]	@ (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e86:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e8a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e8e:	6011      	str	r1, [r2, #0]
 8002e90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e94:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	fa92 f1a2 	rbit	r1, r2
 8002e9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ea2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ea6:	6011      	str	r1, [r2, #0]
  return result;
 8002ea8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	fab2 f282 	clz	r2, r2
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f042 0220 	orr.w	r2, r2, #32
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 021f 	and.w	r2, r2, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d182      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ece:	4b88      	ldr	r3, [pc, #544]	@ (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	497f      	ldr	r1, [pc, #508]	@ (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002efe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f16:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f1a:	601a      	str	r2, [r3, #0]
  return result;
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f24:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	461a      	mov	r2, r3
 8002f38:	2301      	movs	r3, #1
 8002f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fe06 	bl	8001b4c <HAL_GetTick>
 8002f40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f44:	e009      	b.n	8002f5a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe fe01 	bl	8001b4c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e144      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f2a3 	rbit	r2, r3
 8002f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f7e:	601a      	str	r2, [r3, #0]
  return result;
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xe2c>
 8002f9e:	4b54      	ldr	r3, [pc, #336]	@ (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e027      	b.n	8002ff4 <HAL_RCC_OscConfig+0xe7c>
 8002fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002fd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fdc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ff8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ffc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003000:	6011      	str	r1, [r2, #0]
 8003002:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003006:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	fa92 f1a2 	rbit	r1, r2
 8003010:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003014:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003018:	6011      	str	r1, [r2, #0]
  return result;
 800301a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	fab2 f282 	clz	r2, r2
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	f042 0220 	orr.w	r2, r2, #32
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f002 021f 	and.w	r2, r2, #31
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f202 	lsl.w	r2, r1, r2
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d082      	beq.n	8002f46 <HAL_RCC_OscConfig+0xdce>
 8003040:	e0cf      	b.n	80031e2 <HAL_RCC_OscConfig+0x106a>
 8003042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003046:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800304a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800304e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003054:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f2a3 	rbit	r2, r3
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003066:	601a      	str	r2, [r3, #0]
  return result;
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003070:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800307c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fd60 	bl	8001b4c <HAL_GetTick>
 800308c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003090:	e009      	b.n	80030a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003092:	f7fe fd5b 	bl	8001b4c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e09e      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 80030a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030aa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f2a3 	rbit	r2, r3
 80030c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030ca:	601a      	str	r2, [r3, #0]
  return result;
 80030cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d104      	bne.n	80030f4 <HAL_RCC_OscConfig+0xf7c>
 80030ea:	4b01      	ldr	r3, [pc, #4]	@ (80030f0 <HAL_RCC_OscConfig+0xf78>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	e029      	b.n	8003144 <HAL_RCC_OscConfig+0xfcc>
 80030f0:	40021000 	.word	0x40021000
 80030f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003106:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f2a3 	rbit	r2, r3
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003122:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fa93 f2a3 	rbit	r2, r3
 8003136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	4b2b      	ldr	r3, [pc, #172]	@ (80031f0 <HAL_RCC_OscConfig+0x1078>)
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003148:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800314c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003150:	6011      	str	r1, [r2, #0]
 8003152:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003156:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	fa92 f1a2 	rbit	r1, r2
 8003160:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003164:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003168:	6011      	str	r1, [r2, #0]
  return result;
 800316a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800316e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	fab2 f282 	clz	r2, r2
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	f042 0220 	orr.w	r2, r2, #32
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f002 021f 	and.w	r2, r2, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f202 	lsl.w	r2, r1, r2
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d180      	bne.n	8003092 <HAL_RCC_OscConfig+0xf1a>
 8003190:	e027      	b.n	80031e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e01e      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_RCC_OscConfig+0x1078>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031b2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10b      	bne.n	80031de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b09e      	sub	sp, #120	@ 0x78
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e162      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b90      	ldr	r3, [pc, #576]	@ (8003450 <HAL_RCC_ClockConfig+0x25c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d910      	bls.n	800323c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b8d      	ldr	r3, [pc, #564]	@ (8003450 <HAL_RCC_ClockConfig+0x25c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 0207 	bic.w	r2, r3, #7
 8003222:	498b      	ldr	r1, [pc, #556]	@ (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b89      	ldr	r3, [pc, #548]	@ (8003450 <HAL_RCC_ClockConfig+0x25c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e14a      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b82      	ldr	r3, [pc, #520]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	497f      	ldr	r1, [pc, #508]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80dc 	beq.w	8003420 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d13c      	bne.n	80032ea <HAL_RCC_ClockConfig+0xf6>
 8003270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003274:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800327e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_RCC_ClockConfig+0xa6>
 8003294:	4b6f      	ldr	r3, [pc, #444]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	e00f      	b.n	80032ba <HAL_RCC_ClockConfig+0xc6>
 800329a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800329e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80032a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032b6:	4b67      	ldr	r3, [pc, #412]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032c2:	fa92 f2a2 	rbit	r2, r2
 80032c6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80032c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f042 0220 	orr.w	r2, r2, #32
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f002 021f 	and.w	r2, r2, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d17b      	bne.n	80033de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0f3      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d13c      	bne.n	800336c <HAL_RCC_ClockConfig+0x178>
 80032f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_RCC_ClockConfig+0x128>
 8003316:	4b4f      	ldr	r3, [pc, #316]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	e00f      	b.n	800333c <HAL_RCC_ClockConfig+0x148>
 800331c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003320:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	647b      	str	r3, [r7, #68]	@ 0x44
 800332a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800332e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003338:	4b46      	ldr	r3, [pc, #280]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003340:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003342:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003344:	fa92 f2a2 	rbit	r2, r2
 8003348:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800334a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d13a      	bne.n	80033de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b2      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
 800336c:	2302      	movs	r3, #2
 800336e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <HAL_RCC_ClockConfig+0x1a0>
 800338e:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	e00d      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1bc>
 8003394:	2302      	movs	r3, #2
 8003396:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a0:	2302      	movs	r3, #2
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	2202      	movs	r2, #2
 80033b2:	61ba      	str	r2, [r7, #24]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	fa92 f2a2 	rbit	r2, r2
 80033ba:	617a      	str	r2, [r7, #20]
  return result;
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e079      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	491a      	ldr	r1, [pc, #104]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fbac 	bl	8001b4c <HAL_GetTick>
 80033f4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	e00a      	b.n	800340e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fe fba8 	bl	8001b4c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e061      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 020c 	and.w	r2, r3, #12
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1eb      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d214      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0207 	bic.w	r2, r3, #7
 8003436:	4906      	ldr	r1, [pc, #24]	@ (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e040      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
 8003450:	40022000 	.word	0x40022000
 8003454:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	491a      	ldr	r1, [pc, #104]	@ (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b16      	ldr	r3, [pc, #88]	@ (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4912      	ldr	r1, [pc, #72]	@ (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003496:	f000 f829 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 800349a:	4601      	mov	r1, r0
 800349c:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034a4:	22f0      	movs	r2, #240	@ 0xf0
 80034a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	fa92 f2a2 	rbit	r2, r2
 80034ae:	60fa      	str	r2, [r7, #12]
  return result;
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	40d3      	lsrs	r3, r2
 80034ba:	4a09      	ldr	r2, [pc, #36]	@ (80034e0 <HAL_RCC_ClockConfig+0x2ec>)
 80034bc:	5cd3      	ldrb	r3, [r2, r3]
 80034be:	fa21 f303 	lsr.w	r3, r1, r3
 80034c2:	4a08      	ldr	r2, [pc, #32]	@ (80034e4 <HAL_RCC_ClockConfig+0x2f0>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034c6:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <HAL_RCC_ClockConfig+0x2f4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fafa 	bl	8001ac4 <HAL_InitTick>
  
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3778      	adds	r7, #120	@ 0x78
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	0800547c 	.word	0x0800547c
 80034e4:	20000000 	.word	0x20000000
 80034e8:	20000004 	.word	0x20000004

080034ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	2300      	movs	r3, #0
 8003500:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003506:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x94>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d002      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x30>
 8003516:	2b08      	cmp	r3, #8
 8003518:	d003      	beq.n	8003522 <HAL_RCC_GetSysClockFreq+0x36>
 800351a:	e026      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800351c:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x98>)
 800351e:	613b      	str	r3, [r7, #16]
      break;
 8003520:	e026      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0c9b      	lsrs	r3, r3, #18
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x9c>)
 800352c:	5cd3      	ldrb	r3, [r2, r3]
 800352e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003530:	4b13      	ldr	r3, [pc, #76]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x94>)
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	4a14      	ldr	r2, [pc, #80]	@ (800358c <HAL_RCC_GetSysClockFreq+0xa0>)
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003548:	4a0e      	ldr	r2, [pc, #56]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x98>)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e004      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a0c      	ldr	r2, [pc, #48]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xa4>)
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	613b      	str	r3, [r7, #16]
      break;
 8003568:	e002      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x98>)
 800356c:	613b      	str	r3, [r7, #16]
      break;
 800356e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003570:	693b      	ldr	r3, [r7, #16]
}
 8003572:	4618      	mov	r0, r3
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	007a1200 	.word	0x007a1200
 8003588:	08005494 	.word	0x08005494
 800358c:	080054a4 	.word	0x080054a4
 8003590:	003d0900 	.word	0x003d0900

08003594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000000 	.word	0x20000000

080035ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035b2:	f7ff ffef 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035b6:	4601      	mov	r1, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80035c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	fa92 f2a2 	rbit	r2, r2
 80035cc:	603a      	str	r2, [r7, #0]
  return result;
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	fab2 f282 	clz	r2, r2
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	40d3      	lsrs	r3, r2
 80035d8:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	0800548c 	.word	0x0800548c

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035f6:	f7ff ffcd 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035fa:	4601      	mov	r1, r0
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003604:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003608:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	fa92 f2a2 	rbit	r2, r2
 8003610:	603a      	str	r2, [r7, #0]
  return result;
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	fab2 f282 	clz	r2, r2
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	40d3      	lsrs	r3, r2
 800361c:	4a04      	ldr	r2, [pc, #16]	@ (8003630 <HAL_RCC_GetPCLK2Freq+0x40>)
 800361e:	5cd3      	ldrb	r3, [r2, r3]
 8003620:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	0800548c 	.word	0x0800548c

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b092      	sub	sp, #72	@ 0x48
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80d4 	beq.w	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003658:	4b4e      	ldr	r3, [pc, #312]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10e      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003664:	4b4b      	ldr	r3, [pc, #300]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	4a4a      	ldr	r2, [pc, #296]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366e:	61d3      	str	r3, [r2, #28]
 8003670:	4b48      	ldr	r3, [pc, #288]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b45      	ldr	r3, [pc, #276]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d118      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368e:	4b42      	ldr	r3, [pc, #264]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a41      	ldr	r2, [pc, #260]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003698:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fe fa57 	bl	8001b4c <HAL_GetTick>
 800369e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	e008      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a2:	f7fe fa53 	bl	8001b4c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b64      	cmp	r3, #100	@ 0x64
 80036ae:	d901      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e14b      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	4b38      	ldr	r3, [pc, #224]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036c0:	4b34      	ldr	r3, [pc, #208]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8084 	beq.w	80037da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d07c      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	4b26      	ldr	r3, [pc, #152]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	461a      	mov	r2, r3
 800370a:	2301      	movs	r3, #1
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003712:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	4b1d      	ldr	r3, [pc, #116]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	461a      	mov	r2, r3
 800372e:	2300      	movs	r3, #0
 8003730:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003732:	4a18      	ldr	r2, [pc, #96]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003736:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04b      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fe fa03 	bl	8001b4c <HAL_GetTick>
 8003746:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe f9ff 	bl	8001b4c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0f5      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003760:	2302      	movs	r3, #2
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
 800376c:	2302      	movs	r3, #2
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	61fb      	str	r3, [r7, #28]
  return result;
 8003778:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d108      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800378e:	4b01      	ldr	r3, [pc, #4]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	e00d      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	10908100 	.word	0x10908100
 80037a0:	2302      	movs	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	4b69      	ldr	r3, [pc, #420]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	2202      	movs	r2, #2
 80037b2:	613a      	str	r2, [r7, #16]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	fa92 f2a2 	rbit	r2, r2
 80037ba:	60fa      	str	r2, [r7, #12]
  return result;
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	fab2 f282 	clz	r2, r2
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	f002 021f 	and.w	r2, r2, #31
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0b7      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037da:	4b5e      	ldr	r3, [pc, #376]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	495b      	ldr	r1, [pc, #364]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b57      	ldr	r3, [pc, #348]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4a56      	ldr	r2, [pc, #344]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800380c:	4b51      	ldr	r3, [pc, #324]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	f023 0203 	bic.w	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494e      	ldr	r1, [pc, #312]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800381a:	4313      	orrs	r3, r2
 800381c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382a:	4b4a      	ldr	r3, [pc, #296]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	f023 0210 	bic.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4947      	ldr	r1, [pc, #284]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003838:	4313      	orrs	r3, r2
 800383a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003848:	4b42      	ldr	r3, [pc, #264]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	493f      	ldr	r1, [pc, #252]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003866:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	f023 0220 	bic.w	r2, r3, #32
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	4938      	ldr	r1, [pc, #224]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003874:	4313      	orrs	r3, r2
 8003876:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003884:	4b33      	ldr	r3, [pc, #204]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	4930      	ldr	r1, [pc, #192]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003892:	4313      	orrs	r3, r2
 8003894:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	4929      	ldr	r1, [pc, #164]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80038c0:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	4921      	ldr	r1, [pc, #132]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038de:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	491a      	ldr	r1, [pc, #104]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038fc:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	4912      	ldr	r1, [pc, #72]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800390a:	4313      	orrs	r3, r2
 800390c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800391a:	4b0e      	ldr	r3, [pc, #56]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003926:	490b      	ldr	r1, [pc, #44]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003928:	4313      	orrs	r3, r2
 800392a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	4903      	ldr	r1, [pc, #12]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003946:	4313      	orrs	r3, r2
 8003948:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3748      	adds	r7, #72	@ 0x48
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e049      	b.n	80039fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd f8be 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 faac 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d001      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e03b      	b.n	8003a98 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIM_Base_Start_IT+0x4e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_Base_Start_IT+0x4e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a15      	ldr	r2, [pc, #84]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d115      	bne.n	8003a82 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <HAL_TIM_Base_Start_IT+0xa4>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d015      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x8c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6e:	d011      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a80:	e008      	b.n	8003a94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e000      	b.n	8003a96 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	00010007 	.word	0x00010007

08003ab0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <HAL_TIM_Base_Stop_IT+0x48>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d107      	bne.n	8003af8 <HAL_TIM_Base_Stop_IT+0x48>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01b      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0202 	mvn.w	r2, #2
 8003b42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f9ad 	bl	8003eb8 <HAL_TIM_IC_CaptureCallback>
 8003b5e:	e005      	b.n	8003b6c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f99f 	bl	8003ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f9b0 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01b      	beq.n	8003bbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0204 	mvn.w	r2, #4
 8003b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f987 	bl	8003eb8 <HAL_TIM_IC_CaptureCallback>
 8003baa:	e005      	b.n	8003bb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f979 	bl	8003ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f98a 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d020      	beq.n	8003c0a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01b      	beq.n	8003c0a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0208 	mvn.w	r2, #8
 8003bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2204      	movs	r2, #4
 8003be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f961 	bl	8003eb8 <HAL_TIM_IC_CaptureCallback>
 8003bf6:	e005      	b.n	8003c04 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f953 	bl	8003ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f964 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01b      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f06f 0210 	mvn.w	r2, #16
 8003c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f93b 	bl	8003eb8 <HAL_TIM_IC_CaptureCallback>
 8003c42:	e005      	b.n	8003c50 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f92d 	bl	8003ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f93e 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00c      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0201 	mvn.w	r2, #1
 8003c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fc fe5b 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 faaf 	bl	80041fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 faa7 	bl	8004210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00c      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f8fd 	bl	8003ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f06f 0220 	mvn.w	r2, #32
 8003d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa6f 	bl	80041e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_ConfigClockSource+0x1c>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0b6      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x18a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d4c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d58:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	d03e      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0xd8>
 8003d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d70:	f200 8087 	bhi.w	8003e82 <HAL_TIM_ConfigClockSource+0x170>
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d78:	f000 8086 	beq.w	8003e88 <HAL_TIM_ConfigClockSource+0x176>
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d80:	d87f      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x170>
 8003d82:	2b70      	cmp	r3, #112	@ 0x70
 8003d84:	d01a      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0xaa>
 8003d86:	2b70      	cmp	r3, #112	@ 0x70
 8003d88:	d87b      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x170>
 8003d8a:	2b60      	cmp	r3, #96	@ 0x60
 8003d8c:	d050      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0x11e>
 8003d8e:	2b60      	cmp	r3, #96	@ 0x60
 8003d90:	d877      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x170>
 8003d92:	2b50      	cmp	r3, #80	@ 0x50
 8003d94:	d03c      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0xfe>
 8003d96:	2b50      	cmp	r3, #80	@ 0x50
 8003d98:	d873      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x170>
 8003d9a:	2b40      	cmp	r3, #64	@ 0x40
 8003d9c:	d058      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x13e>
 8003d9e:	2b40      	cmp	r3, #64	@ 0x40
 8003da0:	d86f      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x170>
 8003da2:	2b30      	cmp	r3, #48	@ 0x30
 8003da4:	d064      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x15e>
 8003da6:	2b30      	cmp	r3, #48	@ 0x30
 8003da8:	d86b      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x170>
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d060      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x15e>
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d867      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x170>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d05c      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x15e>
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d05a      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x15e>
 8003dba:	e062      	b.n	8003e82 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dcc:	f000 f986 	bl	80040dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	609a      	str	r2, [r3, #8]
      break;
 8003de8:	e04f      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dfa:	f000 f96f 	bl	80040dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e0c:	609a      	str	r2, [r3, #8]
      break;
 8003e0e:	e03c      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f000 f8e3 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2150      	movs	r1, #80	@ 0x50
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f93c 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003e2e:	e02c      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f000 f902 	bl	8004046 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2160      	movs	r1, #96	@ 0x60
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f92c 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003e4e:	e01c      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f000 f8c3 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2140      	movs	r1, #64	@ 0x40
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f91c 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003e6e:	e00c      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 f913 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e003      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
      break;
 8003e86:	e000      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a34      	ldr	r2, [pc, #208]	@ (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0x20>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f12:	d108      	bne.n	8003f26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00f      	beq.n	8003f4e <TIM_Base_SetConfig+0x5a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f34:	d00b      	beq.n	8003f4e <TIM_Base_SetConfig+0x5a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a28      	ldr	r2, [pc, #160]	@ (8003fdc <TIM_Base_SetConfig+0xe8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <TIM_Base_SetConfig+0x5a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a27      	ldr	r2, [pc, #156]	@ (8003fe0 <TIM_Base_SetConfig+0xec>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0x5a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <TIM_Base_SetConfig+0xf0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_Base_SetConfig+0xb0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a13      	ldr	r2, [pc, #76]	@ (8003fdc <TIM_Base_SetConfig+0xe8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_Base_SetConfig+0xb0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a12      	ldr	r2, [pc, #72]	@ (8003fe0 <TIM_Base_SetConfig+0xec>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0xb0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a11      	ldr	r2, [pc, #68]	@ (8003fe4 <TIM_Base_SetConfig+0xf0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d103      	bne.n	8003fac <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d105      	bne.n	8003fca <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	611a      	str	r2, [r3, #16]
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800

08003fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 030a 	bic.w	r3, r3, #10
 8004024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004046:	b480      	push	{r7}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f023 0210 	bic.w	r2, r3, #16
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004082:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f043 0307 	orr.w	r3, r3, #7
 80040c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	021a      	lsls	r2, r3, #8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	431a      	orrs	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	609a      	str	r2, [r3, #8]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004130:	2302      	movs	r3, #2
 8004132:	e04f      	b.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a21      	ldr	r2, [pc, #132]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d108      	bne.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004164:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d009      	beq.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419c:	d004      	beq.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a10      	ldr	r2, [pc, #64]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d10c      	bne.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40014000 	.word	0x40014000

080041e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e040      	b.n	80042b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fc fcb6 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	@ 0x24
 8004250:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9e8 	bl	8004640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8af 	bl	80043d4 <UART_SetConfig>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e01b      	b.n	80042b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800428e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800429e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fa67 	bl	8004784 <UART_CheckIdleState>
 80042b6:	4603      	mov	r3, r0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	@ 0x28
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d177      	bne.n	80043c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_UART_Transmit+0x24>
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e070      	b.n	80043ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2221      	movs	r2, #33	@ 0x21
 80042f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f6:	f7fd fc29 	bl	8001b4c <HAL_GetTick>
 80042fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004314:	d108      	bne.n	8004328 <HAL_UART_Transmit+0x68>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d104      	bne.n	8004328 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e003      	b.n	8004330 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004330:	e02f      	b.n	8004392 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	2180      	movs	r1, #128	@ 0x80
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fac9 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e03b      	b.n	80043ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004364:	b292      	uxth	r2, r2
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	3302      	adds	r3, #2
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	e007      	b.n	8004380 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3301      	adds	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1c9      	bne.n	8004332 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2140      	movs	r1, #64	@ 0x40
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fa93 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e005      	b.n	80043ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b8a      	ldr	r3, [pc, #552]	@ (8004628 <UART_SetConfig+0x254>)
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	430b      	orrs	r3, r1
 800440a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a78      	ldr	r2, [pc, #480]	@ (800462c <UART_SetConfig+0x258>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d120      	bne.n	8004492 <UART_SetConfig+0xbe>
 8004450:	4b77      	ldr	r3, [pc, #476]	@ (8004630 <UART_SetConfig+0x25c>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b03      	cmp	r3, #3
 800445a:	d817      	bhi.n	800448c <UART_SetConfig+0xb8>
 800445c:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <UART_SetConfig+0x90>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004475 	.word	0x08004475
 8004468:	08004481 	.word	0x08004481
 800446c:	08004487 	.word	0x08004487
 8004470:	0800447b 	.word	0x0800447b
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e01d      	b.n	80044b6 <UART_SetConfig+0xe2>
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e01a      	b.n	80044b6 <UART_SetConfig+0xe2>
 8004480:	2304      	movs	r3, #4
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e017      	b.n	80044b6 <UART_SetConfig+0xe2>
 8004486:	2308      	movs	r3, #8
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e014      	b.n	80044b6 <UART_SetConfig+0xe2>
 800448c:	2310      	movs	r3, #16
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e011      	b.n	80044b6 <UART_SetConfig+0xe2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a67      	ldr	r2, [pc, #412]	@ (8004634 <UART_SetConfig+0x260>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d102      	bne.n	80044a2 <UART_SetConfig+0xce>
 800449c:	2300      	movs	r3, #0
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e009      	b.n	80044b6 <UART_SetConfig+0xe2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a64      	ldr	r2, [pc, #400]	@ (8004638 <UART_SetConfig+0x264>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d102      	bne.n	80044b2 <UART_SetConfig+0xde>
 80044ac:	2300      	movs	r3, #0
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e001      	b.n	80044b6 <UART_SetConfig+0xe2>
 80044b2:	2310      	movs	r3, #16
 80044b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044be:	d15a      	bne.n	8004576 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80044c0:	7ffb      	ldrb	r3, [r7, #31]
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d827      	bhi.n	8004516 <UART_SetConfig+0x142>
 80044c6:	a201      	add	r2, pc, #4	@ (adr r2, 80044cc <UART_SetConfig+0xf8>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	08004501 	.word	0x08004501
 80044d8:	08004517 	.word	0x08004517
 80044dc:	08004507 	.word	0x08004507
 80044e0:	08004517 	.word	0x08004517
 80044e4:	08004517 	.word	0x08004517
 80044e8:	08004517 	.word	0x08004517
 80044ec:	0800450f 	.word	0x0800450f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7ff f85c 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 80044f4:	61b8      	str	r0, [r7, #24]
        break;
 80044f6:	e013      	b.n	8004520 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f8:	f7ff f87a 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 80044fc:	61b8      	str	r0, [r7, #24]
        break;
 80044fe:	e00f      	b.n	8004520 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004500:	4b4e      	ldr	r3, [pc, #312]	@ (800463c <UART_SetConfig+0x268>)
 8004502:	61bb      	str	r3, [r7, #24]
        break;
 8004504:	e00c      	b.n	8004520 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004506:	f7fe fff1 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 800450a:	61b8      	str	r0, [r7, #24]
        break;
 800450c:	e008      	b.n	8004520 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004512:	61bb      	str	r3, [r7, #24]
        break;
 8004514:	e004      	b.n	8004520 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	77bb      	strb	r3, [r7, #30]
        break;
 800451e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d074      	beq.n	8004610 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	005a      	lsls	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	441a      	add	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	d916      	bls.n	8004570 <UART_SetConfig+0x19c>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004548:	d212      	bcs.n	8004570 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f023 030f 	bic.w	r3, r3, #15
 8004552:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	b29b      	uxth	r3, r3
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	b29a      	uxth	r2, r3
 8004560:	89fb      	ldrh	r3, [r7, #14]
 8004562:	4313      	orrs	r3, r2
 8004564:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	89fa      	ldrh	r2, [r7, #14]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	e04f      	b.n	8004610 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	77bb      	strb	r3, [r7, #30]
 8004574:	e04c      	b.n	8004610 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004576:	7ffb      	ldrb	r3, [r7, #31]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d828      	bhi.n	80045ce <UART_SetConfig+0x1fa>
 800457c:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <UART_SetConfig+0x1b0>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045a9 	.word	0x080045a9
 8004588:	080045b1 	.word	0x080045b1
 800458c:	080045b9 	.word	0x080045b9
 8004590:	080045cf 	.word	0x080045cf
 8004594:	080045bf 	.word	0x080045bf
 8004598:	080045cf 	.word	0x080045cf
 800459c:	080045cf 	.word	0x080045cf
 80045a0:	080045cf 	.word	0x080045cf
 80045a4:	080045c7 	.word	0x080045c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a8:	f7ff f800 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 80045ac:	61b8      	str	r0, [r7, #24]
        break;
 80045ae:	e013      	b.n	80045d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b0:	f7ff f81e 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 80045b4:	61b8      	str	r0, [r7, #24]
        break;
 80045b6:	e00f      	b.n	80045d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b8:	4b20      	ldr	r3, [pc, #128]	@ (800463c <UART_SetConfig+0x268>)
 80045ba:	61bb      	str	r3, [r7, #24]
        break;
 80045bc:	e00c      	b.n	80045d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045be:	f7fe ff95 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80045c2:	61b8      	str	r0, [r7, #24]
        break;
 80045c4:	e008      	b.n	80045d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ca:	61bb      	str	r3, [r7, #24]
        break;
 80045cc:	e004      	b.n	80045d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	77bb      	strb	r3, [r7, #30]
        break;
 80045d6:	bf00      	nop
    }

    if (pclk != 0U)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d018      	beq.n	8004610 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	085a      	lsrs	r2, r3, #1
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	441a      	add	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b0f      	cmp	r3, #15
 80045f6:	d909      	bls.n	800460c <UART_SetConfig+0x238>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fe:	d205      	bcs.n	800460c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	b29a      	uxth	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	e001      	b.n	8004610 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800461c:	7fbb      	ldrb	r3, [r7, #30]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	efff69f3 	.word	0xefff69f3
 800462c:	40013800 	.word	0x40013800
 8004630:	40021000 	.word	0x40021000
 8004634:	40004400 	.word	0x40004400
 8004638:	40004800 	.word	0x40004800
 800463c:	007a1200 	.word	0x007a1200

08004640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473e:	d10a      	bne.n	8004756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b098      	sub	sp, #96	@ 0x60
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004794:	f7fd f9da 	bl	8001b4c <HAL_GetTick>
 8004798:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d12e      	bne.n	8004806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f88c 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d021      	beq.n	8004806 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e6      	bne.n	80047c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e062      	b.n	80048cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d149      	bne.n	80048a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481c:	2200      	movs	r2, #0
 800481e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f856 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d03c      	beq.n	80048a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	623b      	str	r3, [r7, #32]
   return(result);
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
 800484e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004880:	61fa      	str	r2, [r7, #28]
 8004882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	617b      	str	r3, [r7, #20]
   return(result);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e011      	b.n	80048cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3758      	adds	r7, #88	@ 0x58
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e4:	e04f      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d04b      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fd f92d 	bl	8001b4c <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <UART_WaitOnFlagUntilTimeout+0x30>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e04e      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d037      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b80      	cmp	r3, #128	@ 0x80
 800491a:	d034      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b40      	cmp	r3, #64	@ 0x40
 8004920:	d031      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d110      	bne.n	8004952 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2208      	movs	r2, #8
 8004936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f838 	bl	80049ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2208      	movs	r2, #8
 8004942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e029      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800495c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004960:	d111      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800496a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f81e 	bl	80049ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e00f      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d0a0      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b095      	sub	sp, #84	@ 0x54
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d118      	bne.n	8004a56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f023 0310 	bic.w	r3, r3, #16
 8004a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6979      	ldr	r1, [r7, #20]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e6      	bne.n	8004a24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a6a:	bf00      	nop
 8004a6c:	3754      	adds	r7, #84	@ 0x54
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <siprintf>:
 8004a78:	b40e      	push	{r1, r2, r3}
 8004a7a:	b500      	push	{lr}
 8004a7c:	b09c      	sub	sp, #112	@ 0x70
 8004a7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a80:	9002      	str	r0, [sp, #8]
 8004a82:	9006      	str	r0, [sp, #24]
 8004a84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a88:	4809      	ldr	r0, [pc, #36]	@ (8004ab0 <siprintf+0x38>)
 8004a8a:	9107      	str	r1, [sp, #28]
 8004a8c:	9104      	str	r1, [sp, #16]
 8004a8e:	4909      	ldr	r1, [pc, #36]	@ (8004ab4 <siprintf+0x3c>)
 8004a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a94:	9105      	str	r1, [sp, #20]
 8004a96:	6800      	ldr	r0, [r0, #0]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	a902      	add	r1, sp, #8
 8004a9c:	f000 f994 	bl	8004dc8 <_svfiprintf_r>
 8004aa0:	9b02      	ldr	r3, [sp, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	b01c      	add	sp, #112	@ 0x70
 8004aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aac:	b003      	add	sp, #12
 8004aae:	4770      	bx	lr
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	ffff0208 	.word	0xffff0208

08004ab8 <memset>:
 8004ab8:	4402      	add	r2, r0
 8004aba:	4603      	mov	r3, r0
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d100      	bne.n	8004ac2 <memset+0xa>
 8004ac0:	4770      	bx	lr
 8004ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ac6:	e7f9      	b.n	8004abc <memset+0x4>

08004ac8 <__errno>:
 8004ac8:	4b01      	ldr	r3, [pc, #4]	@ (8004ad0 <__errno+0x8>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	2000000c 	.word	0x2000000c

08004ad4 <__libc_init_array>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8004b0c <__libc_init_array+0x38>)
 8004ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8004b10 <__libc_init_array+0x3c>)
 8004ada:	1b64      	subs	r4, r4, r5
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	2600      	movs	r6, #0
 8004ae0:	42a6      	cmp	r6, r4
 8004ae2:	d109      	bne.n	8004af8 <__libc_init_array+0x24>
 8004ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8004b14 <__libc_init_array+0x40>)
 8004ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8004b18 <__libc_init_array+0x44>)
 8004ae8:	f000 fc66 	bl	80053b8 <_init>
 8004aec:	1b64      	subs	r4, r4, r5
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	2600      	movs	r6, #0
 8004af2:	42a6      	cmp	r6, r4
 8004af4:	d105      	bne.n	8004b02 <__libc_init_array+0x2e>
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afc:	4798      	blx	r3
 8004afe:	3601      	adds	r6, #1
 8004b00:	e7ee      	b.n	8004ae0 <__libc_init_array+0xc>
 8004b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b06:	4798      	blx	r3
 8004b08:	3601      	adds	r6, #1
 8004b0a:	e7f2      	b.n	8004af2 <__libc_init_array+0x1e>
 8004b0c:	080054f0 	.word	0x080054f0
 8004b10:	080054f0 	.word	0x080054f0
 8004b14:	080054f0 	.word	0x080054f0
 8004b18:	080054f4 	.word	0x080054f4

08004b1c <__retarget_lock_acquire_recursive>:
 8004b1c:	4770      	bx	lr

08004b1e <__retarget_lock_release_recursive>:
 8004b1e:	4770      	bx	lr

08004b20 <_free_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4605      	mov	r5, r0
 8004b24:	2900      	cmp	r1, #0
 8004b26:	d041      	beq.n	8004bac <_free_r+0x8c>
 8004b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2c:	1f0c      	subs	r4, r1, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfb8      	it	lt
 8004b32:	18e4      	addlt	r4, r4, r3
 8004b34:	f000 f8e0 	bl	8004cf8 <__malloc_lock>
 8004b38:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <_free_r+0x90>)
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	b933      	cbnz	r3, 8004b4c <_free_r+0x2c>
 8004b3e:	6063      	str	r3, [r4, #4]
 8004b40:	6014      	str	r4, [r2, #0]
 8004b42:	4628      	mov	r0, r5
 8004b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b48:	f000 b8dc 	b.w	8004d04 <__malloc_unlock>
 8004b4c:	42a3      	cmp	r3, r4
 8004b4e:	d908      	bls.n	8004b62 <_free_r+0x42>
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	1821      	adds	r1, r4, r0
 8004b54:	428b      	cmp	r3, r1
 8004b56:	bf01      	itttt	eq
 8004b58:	6819      	ldreq	r1, [r3, #0]
 8004b5a:	685b      	ldreq	r3, [r3, #4]
 8004b5c:	1809      	addeq	r1, r1, r0
 8004b5e:	6021      	streq	r1, [r4, #0]
 8004b60:	e7ed      	b.n	8004b3e <_free_r+0x1e>
 8004b62:	461a      	mov	r2, r3
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b10b      	cbz	r3, 8004b6c <_free_r+0x4c>
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d9fa      	bls.n	8004b62 <_free_r+0x42>
 8004b6c:	6811      	ldr	r1, [r2, #0]
 8004b6e:	1850      	adds	r0, r2, r1
 8004b70:	42a0      	cmp	r0, r4
 8004b72:	d10b      	bne.n	8004b8c <_free_r+0x6c>
 8004b74:	6820      	ldr	r0, [r4, #0]
 8004b76:	4401      	add	r1, r0
 8004b78:	1850      	adds	r0, r2, r1
 8004b7a:	4283      	cmp	r3, r0
 8004b7c:	6011      	str	r1, [r2, #0]
 8004b7e:	d1e0      	bne.n	8004b42 <_free_r+0x22>
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	6053      	str	r3, [r2, #4]
 8004b86:	4408      	add	r0, r1
 8004b88:	6010      	str	r0, [r2, #0]
 8004b8a:	e7da      	b.n	8004b42 <_free_r+0x22>
 8004b8c:	d902      	bls.n	8004b94 <_free_r+0x74>
 8004b8e:	230c      	movs	r3, #12
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	e7d6      	b.n	8004b42 <_free_r+0x22>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	1821      	adds	r1, r4, r0
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	bf04      	itt	eq
 8004b9c:	6819      	ldreq	r1, [r3, #0]
 8004b9e:	685b      	ldreq	r3, [r3, #4]
 8004ba0:	6063      	str	r3, [r4, #4]
 8004ba2:	bf04      	itt	eq
 8004ba4:	1809      	addeq	r1, r1, r0
 8004ba6:	6021      	streq	r1, [r4, #0]
 8004ba8:	6054      	str	r4, [r2, #4]
 8004baa:	e7ca      	b.n	8004b42 <_free_r+0x22>
 8004bac:	bd38      	pop	{r3, r4, r5, pc}
 8004bae:	bf00      	nop
 8004bb0:	200003bc 	.word	0x200003bc

08004bb4 <sbrk_aligned>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8004bf4 <sbrk_aligned+0x40>)
 8004bb8:	460c      	mov	r4, r1
 8004bba:	6831      	ldr	r1, [r6, #0]
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	b911      	cbnz	r1, 8004bc6 <sbrk_aligned+0x12>
 8004bc0:	f000 fba6 	bl	8005310 <_sbrk_r>
 8004bc4:	6030      	str	r0, [r6, #0]
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 fba1 	bl	8005310 <_sbrk_r>
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	d103      	bne.n	8004bda <sbrk_aligned+0x26>
 8004bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
 8004bda:	1cc4      	adds	r4, r0, #3
 8004bdc:	f024 0403 	bic.w	r4, r4, #3
 8004be0:	42a0      	cmp	r0, r4
 8004be2:	d0f8      	beq.n	8004bd6 <sbrk_aligned+0x22>
 8004be4:	1a21      	subs	r1, r4, r0
 8004be6:	4628      	mov	r0, r5
 8004be8:	f000 fb92 	bl	8005310 <_sbrk_r>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d1f2      	bne.n	8004bd6 <sbrk_aligned+0x22>
 8004bf0:	e7ef      	b.n	8004bd2 <sbrk_aligned+0x1e>
 8004bf2:	bf00      	nop
 8004bf4:	200003b8 	.word	0x200003b8

08004bf8 <_malloc_r>:
 8004bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bfc:	1ccd      	adds	r5, r1, #3
 8004bfe:	f025 0503 	bic.w	r5, r5, #3
 8004c02:	3508      	adds	r5, #8
 8004c04:	2d0c      	cmp	r5, #12
 8004c06:	bf38      	it	cc
 8004c08:	250c      	movcc	r5, #12
 8004c0a:	2d00      	cmp	r5, #0
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	db01      	blt.n	8004c14 <_malloc_r+0x1c>
 8004c10:	42a9      	cmp	r1, r5
 8004c12:	d904      	bls.n	8004c1e <_malloc_r+0x26>
 8004c14:	230c      	movs	r3, #12
 8004c16:	6033      	str	r3, [r6, #0]
 8004c18:	2000      	movs	r0, #0
 8004c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004cf4 <_malloc_r+0xfc>
 8004c22:	f000 f869 	bl	8004cf8 <__malloc_lock>
 8004c26:	f8d8 3000 	ldr.w	r3, [r8]
 8004c2a:	461c      	mov	r4, r3
 8004c2c:	bb44      	cbnz	r4, 8004c80 <_malloc_r+0x88>
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4630      	mov	r0, r6
 8004c32:	f7ff ffbf 	bl	8004bb4 <sbrk_aligned>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	4604      	mov	r4, r0
 8004c3a:	d158      	bne.n	8004cee <_malloc_r+0xf6>
 8004c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c40:	4627      	mov	r7, r4
 8004c42:	2f00      	cmp	r7, #0
 8004c44:	d143      	bne.n	8004cce <_malloc_r+0xd6>
 8004c46:	2c00      	cmp	r4, #0
 8004c48:	d04b      	beq.n	8004ce2 <_malloc_r+0xea>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	4639      	mov	r1, r7
 8004c4e:	4630      	mov	r0, r6
 8004c50:	eb04 0903 	add.w	r9, r4, r3
 8004c54:	f000 fb5c 	bl	8005310 <_sbrk_r>
 8004c58:	4581      	cmp	r9, r0
 8004c5a:	d142      	bne.n	8004ce2 <_malloc_r+0xea>
 8004c5c:	6821      	ldr	r1, [r4, #0]
 8004c5e:	1a6d      	subs	r5, r5, r1
 8004c60:	4629      	mov	r1, r5
 8004c62:	4630      	mov	r0, r6
 8004c64:	f7ff ffa6 	bl	8004bb4 <sbrk_aligned>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d03a      	beq.n	8004ce2 <_malloc_r+0xea>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	442b      	add	r3, r5
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	f8d8 3000 	ldr.w	r3, [r8]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	bb62      	cbnz	r2, 8004cd4 <_malloc_r+0xdc>
 8004c7a:	f8c8 7000 	str.w	r7, [r8]
 8004c7e:	e00f      	b.n	8004ca0 <_malloc_r+0xa8>
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	1b52      	subs	r2, r2, r5
 8004c84:	d420      	bmi.n	8004cc8 <_malloc_r+0xd0>
 8004c86:	2a0b      	cmp	r2, #11
 8004c88:	d917      	bls.n	8004cba <_malloc_r+0xc2>
 8004c8a:	1961      	adds	r1, r4, r5
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	6025      	str	r5, [r4, #0]
 8004c90:	bf18      	it	ne
 8004c92:	6059      	strne	r1, [r3, #4]
 8004c94:	6863      	ldr	r3, [r4, #4]
 8004c96:	bf08      	it	eq
 8004c98:	f8c8 1000 	streq.w	r1, [r8]
 8004c9c:	5162      	str	r2, [r4, r5]
 8004c9e:	604b      	str	r3, [r1, #4]
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f000 f82f 	bl	8004d04 <__malloc_unlock>
 8004ca6:	f104 000b 	add.w	r0, r4, #11
 8004caa:	1d23      	adds	r3, r4, #4
 8004cac:	f020 0007 	bic.w	r0, r0, #7
 8004cb0:	1ac2      	subs	r2, r0, r3
 8004cb2:	bf1c      	itt	ne
 8004cb4:	1a1b      	subne	r3, r3, r0
 8004cb6:	50a3      	strne	r3, [r4, r2]
 8004cb8:	e7af      	b.n	8004c1a <_malloc_r+0x22>
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	42a3      	cmp	r3, r4
 8004cbe:	bf0c      	ite	eq
 8004cc0:	f8c8 2000 	streq.w	r2, [r8]
 8004cc4:	605a      	strne	r2, [r3, #4]
 8004cc6:	e7eb      	b.n	8004ca0 <_malloc_r+0xa8>
 8004cc8:	4623      	mov	r3, r4
 8004cca:	6864      	ldr	r4, [r4, #4]
 8004ccc:	e7ae      	b.n	8004c2c <_malloc_r+0x34>
 8004cce:	463c      	mov	r4, r7
 8004cd0:	687f      	ldr	r7, [r7, #4]
 8004cd2:	e7b6      	b.n	8004c42 <_malloc_r+0x4a>
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	d1fb      	bne.n	8004cd4 <_malloc_r+0xdc>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6053      	str	r3, [r2, #4]
 8004ce0:	e7de      	b.n	8004ca0 <_malloc_r+0xa8>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	6033      	str	r3, [r6, #0]
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f000 f80c 	bl	8004d04 <__malloc_unlock>
 8004cec:	e794      	b.n	8004c18 <_malloc_r+0x20>
 8004cee:	6005      	str	r5, [r0, #0]
 8004cf0:	e7d6      	b.n	8004ca0 <_malloc_r+0xa8>
 8004cf2:	bf00      	nop
 8004cf4:	200003bc 	.word	0x200003bc

08004cf8 <__malloc_lock>:
 8004cf8:	4801      	ldr	r0, [pc, #4]	@ (8004d00 <__malloc_lock+0x8>)
 8004cfa:	f7ff bf0f 	b.w	8004b1c <__retarget_lock_acquire_recursive>
 8004cfe:	bf00      	nop
 8004d00:	200003b4 	.word	0x200003b4

08004d04 <__malloc_unlock>:
 8004d04:	4801      	ldr	r0, [pc, #4]	@ (8004d0c <__malloc_unlock+0x8>)
 8004d06:	f7ff bf0a 	b.w	8004b1e <__retarget_lock_release_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	200003b4 	.word	0x200003b4

08004d10 <__ssputs_r>:
 8004d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	688e      	ldr	r6, [r1, #8]
 8004d16:	461f      	mov	r7, r3
 8004d18:	42be      	cmp	r6, r7
 8004d1a:	680b      	ldr	r3, [r1, #0]
 8004d1c:	4682      	mov	sl, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	4690      	mov	r8, r2
 8004d22:	d82d      	bhi.n	8004d80 <__ssputs_r+0x70>
 8004d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d2c:	d026      	beq.n	8004d7c <__ssputs_r+0x6c>
 8004d2e:	6965      	ldr	r5, [r4, #20]
 8004d30:	6909      	ldr	r1, [r1, #16]
 8004d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d36:	eba3 0901 	sub.w	r9, r3, r1
 8004d3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d3e:	1c7b      	adds	r3, r7, #1
 8004d40:	444b      	add	r3, r9
 8004d42:	106d      	asrs	r5, r5, #1
 8004d44:	429d      	cmp	r5, r3
 8004d46:	bf38      	it	cc
 8004d48:	461d      	movcc	r5, r3
 8004d4a:	0553      	lsls	r3, r2, #21
 8004d4c:	d527      	bpl.n	8004d9e <__ssputs_r+0x8e>
 8004d4e:	4629      	mov	r1, r5
 8004d50:	f7ff ff52 	bl	8004bf8 <_malloc_r>
 8004d54:	4606      	mov	r6, r0
 8004d56:	b360      	cbz	r0, 8004db2 <__ssputs_r+0xa2>
 8004d58:	6921      	ldr	r1, [r4, #16]
 8004d5a:	464a      	mov	r2, r9
 8004d5c:	f000 fae8 	bl	8005330 <memcpy>
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	6126      	str	r6, [r4, #16]
 8004d6e:	6165      	str	r5, [r4, #20]
 8004d70:	444e      	add	r6, r9
 8004d72:	eba5 0509 	sub.w	r5, r5, r9
 8004d76:	6026      	str	r6, [r4, #0]
 8004d78:	60a5      	str	r5, [r4, #8]
 8004d7a:	463e      	mov	r6, r7
 8004d7c:	42be      	cmp	r6, r7
 8004d7e:	d900      	bls.n	8004d82 <__ssputs_r+0x72>
 8004d80:	463e      	mov	r6, r7
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	4632      	mov	r2, r6
 8004d86:	4641      	mov	r1, r8
 8004d88:	f000 faa8 	bl	80052dc <memmove>
 8004d8c:	68a3      	ldr	r3, [r4, #8]
 8004d8e:	1b9b      	subs	r3, r3, r6
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	4433      	add	r3, r6
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9e:	462a      	mov	r2, r5
 8004da0:	f000 fad4 	bl	800534c <_realloc_r>
 8004da4:	4606      	mov	r6, r0
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d1e0      	bne.n	8004d6c <__ssputs_r+0x5c>
 8004daa:	6921      	ldr	r1, [r4, #16]
 8004dac:	4650      	mov	r0, sl
 8004dae:	f7ff feb7 	bl	8004b20 <_free_r>
 8004db2:	230c      	movs	r3, #12
 8004db4:	f8ca 3000 	str.w	r3, [sl]
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	e7e9      	b.n	8004d9a <__ssputs_r+0x8a>
	...

08004dc8 <_svfiprintf_r>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	4698      	mov	r8, r3
 8004dce:	898b      	ldrh	r3, [r1, #12]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	b09d      	sub	sp, #116	@ 0x74
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	460d      	mov	r5, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	d510      	bpl.n	8004dfe <_svfiprintf_r+0x36>
 8004ddc:	690b      	ldr	r3, [r1, #16]
 8004dde:	b973      	cbnz	r3, 8004dfe <_svfiprintf_r+0x36>
 8004de0:	2140      	movs	r1, #64	@ 0x40
 8004de2:	f7ff ff09 	bl	8004bf8 <_malloc_r>
 8004de6:	6028      	str	r0, [r5, #0]
 8004de8:	6128      	str	r0, [r5, #16]
 8004dea:	b930      	cbnz	r0, 8004dfa <_svfiprintf_r+0x32>
 8004dec:	230c      	movs	r3, #12
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	b01d      	add	sp, #116	@ 0x74
 8004df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfa:	2340      	movs	r3, #64	@ 0x40
 8004dfc:	616b      	str	r3, [r5, #20]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e02:	2320      	movs	r3, #32
 8004e04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e0c:	2330      	movs	r3, #48	@ 0x30
 8004e0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004fac <_svfiprintf_r+0x1e4>
 8004e12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e16:	f04f 0901 	mov.w	r9, #1
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	469a      	mov	sl, r3
 8004e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e22:	b10a      	cbz	r2, 8004e28 <_svfiprintf_r+0x60>
 8004e24:	2a25      	cmp	r2, #37	@ 0x25
 8004e26:	d1f9      	bne.n	8004e1c <_svfiprintf_r+0x54>
 8004e28:	ebba 0b04 	subs.w	fp, sl, r4
 8004e2c:	d00b      	beq.n	8004e46 <_svfiprintf_r+0x7e>
 8004e2e:	465b      	mov	r3, fp
 8004e30:	4622      	mov	r2, r4
 8004e32:	4629      	mov	r1, r5
 8004e34:	4638      	mov	r0, r7
 8004e36:	f7ff ff6b 	bl	8004d10 <__ssputs_r>
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f000 80a7 	beq.w	8004f8e <_svfiprintf_r+0x1c6>
 8004e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e42:	445a      	add	r2, fp
 8004e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e46:	f89a 3000 	ldrb.w	r3, [sl]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 809f 	beq.w	8004f8e <_svfiprintf_r+0x1c6>
 8004e50:	2300      	movs	r3, #0
 8004e52:	f04f 32ff 	mov.w	r2, #4294967295
 8004e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e5a:	f10a 0a01 	add.w	sl, sl, #1
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	9307      	str	r3, [sp, #28]
 8004e62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e68:	4654      	mov	r4, sl
 8004e6a:	2205      	movs	r2, #5
 8004e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e70:	484e      	ldr	r0, [pc, #312]	@ (8004fac <_svfiprintf_r+0x1e4>)
 8004e72:	f7fb f9ad 	bl	80001d0 <memchr>
 8004e76:	9a04      	ldr	r2, [sp, #16]
 8004e78:	b9d8      	cbnz	r0, 8004eb2 <_svfiprintf_r+0xea>
 8004e7a:	06d0      	lsls	r0, r2, #27
 8004e7c:	bf44      	itt	mi
 8004e7e:	2320      	movmi	r3, #32
 8004e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e84:	0711      	lsls	r1, r2, #28
 8004e86:	bf44      	itt	mi
 8004e88:	232b      	movmi	r3, #43	@ 0x2b
 8004e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e94:	d015      	beq.n	8004ec2 <_svfiprintf_r+0xfa>
 8004e96:	9a07      	ldr	r2, [sp, #28]
 8004e98:	4654      	mov	r4, sl
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f04f 0c0a 	mov.w	ip, #10
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ea6:	3b30      	subs	r3, #48	@ 0x30
 8004ea8:	2b09      	cmp	r3, #9
 8004eaa:	d94b      	bls.n	8004f44 <_svfiprintf_r+0x17c>
 8004eac:	b1b0      	cbz	r0, 8004edc <_svfiprintf_r+0x114>
 8004eae:	9207      	str	r2, [sp, #28]
 8004eb0:	e014      	b.n	8004edc <_svfiprintf_r+0x114>
 8004eb2:	eba0 0308 	sub.w	r3, r0, r8
 8004eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	9304      	str	r3, [sp, #16]
 8004ebe:	46a2      	mov	sl, r4
 8004ec0:	e7d2      	b.n	8004e68 <_svfiprintf_r+0xa0>
 8004ec2:	9b03      	ldr	r3, [sp, #12]
 8004ec4:	1d19      	adds	r1, r3, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	9103      	str	r1, [sp, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfbb      	ittet	lt
 8004ece:	425b      	neglt	r3, r3
 8004ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ed4:	9307      	strge	r3, [sp, #28]
 8004ed6:	9307      	strlt	r3, [sp, #28]
 8004ed8:	bfb8      	it	lt
 8004eda:	9204      	strlt	r2, [sp, #16]
 8004edc:	7823      	ldrb	r3, [r4, #0]
 8004ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ee0:	d10a      	bne.n	8004ef8 <_svfiprintf_r+0x130>
 8004ee2:	7863      	ldrb	r3, [r4, #1]
 8004ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ee6:	d132      	bne.n	8004f4e <_svfiprintf_r+0x186>
 8004ee8:	9b03      	ldr	r3, [sp, #12]
 8004eea:	1d1a      	adds	r2, r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	9203      	str	r2, [sp, #12]
 8004ef0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ef4:	3402      	adds	r4, #2
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004fbc <_svfiprintf_r+0x1f4>
 8004efc:	7821      	ldrb	r1, [r4, #0]
 8004efe:	2203      	movs	r2, #3
 8004f00:	4650      	mov	r0, sl
 8004f02:	f7fb f965 	bl	80001d0 <memchr>
 8004f06:	b138      	cbz	r0, 8004f18 <_svfiprintf_r+0x150>
 8004f08:	9b04      	ldr	r3, [sp, #16]
 8004f0a:	eba0 000a 	sub.w	r0, r0, sl
 8004f0e:	2240      	movs	r2, #64	@ 0x40
 8004f10:	4082      	lsls	r2, r0
 8004f12:	4313      	orrs	r3, r2
 8004f14:	3401      	adds	r4, #1
 8004f16:	9304      	str	r3, [sp, #16]
 8004f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1c:	4824      	ldr	r0, [pc, #144]	@ (8004fb0 <_svfiprintf_r+0x1e8>)
 8004f1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f22:	2206      	movs	r2, #6
 8004f24:	f7fb f954 	bl	80001d0 <memchr>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d036      	beq.n	8004f9a <_svfiprintf_r+0x1d2>
 8004f2c:	4b21      	ldr	r3, [pc, #132]	@ (8004fb4 <_svfiprintf_r+0x1ec>)
 8004f2e:	bb1b      	cbnz	r3, 8004f78 <_svfiprintf_r+0x1b0>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	3307      	adds	r3, #7
 8004f34:	f023 0307 	bic.w	r3, r3, #7
 8004f38:	3308      	adds	r3, #8
 8004f3a:	9303      	str	r3, [sp, #12]
 8004f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f3e:	4433      	add	r3, r6
 8004f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f42:	e76a      	b.n	8004e1a <_svfiprintf_r+0x52>
 8004f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f48:	460c      	mov	r4, r1
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	e7a8      	b.n	8004ea0 <_svfiprintf_r+0xd8>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	3401      	adds	r4, #1
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	4619      	mov	r1, r3
 8004f56:	f04f 0c0a 	mov.w	ip, #10
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f60:	3a30      	subs	r2, #48	@ 0x30
 8004f62:	2a09      	cmp	r2, #9
 8004f64:	d903      	bls.n	8004f6e <_svfiprintf_r+0x1a6>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0c6      	beq.n	8004ef8 <_svfiprintf_r+0x130>
 8004f6a:	9105      	str	r1, [sp, #20]
 8004f6c:	e7c4      	b.n	8004ef8 <_svfiprintf_r+0x130>
 8004f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f72:	4604      	mov	r4, r0
 8004f74:	2301      	movs	r3, #1
 8004f76:	e7f0      	b.n	8004f5a <_svfiprintf_r+0x192>
 8004f78:	ab03      	add	r3, sp, #12
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb8 <_svfiprintf_r+0x1f0>)
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	4638      	mov	r0, r7
 8004f84:	f3af 8000 	nop.w
 8004f88:	1c42      	adds	r2, r0, #1
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	d1d6      	bne.n	8004f3c <_svfiprintf_r+0x174>
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	065b      	lsls	r3, r3, #25
 8004f92:	f53f af2d 	bmi.w	8004df0 <_svfiprintf_r+0x28>
 8004f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f98:	e72c      	b.n	8004df4 <_svfiprintf_r+0x2c>
 8004f9a:	ab03      	add	r3, sp, #12
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <_svfiprintf_r+0x1f0>)
 8004fa2:	a904      	add	r1, sp, #16
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f000 f879 	bl	800509c <_printf_i>
 8004faa:	e7ed      	b.n	8004f88 <_svfiprintf_r+0x1c0>
 8004fac:	080054b4 	.word	0x080054b4
 8004fb0:	080054be 	.word	0x080054be
 8004fb4:	00000000 	.word	0x00000000
 8004fb8:	08004d11 	.word	0x08004d11
 8004fbc:	080054ba 	.word	0x080054ba

08004fc0 <_printf_common>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	4698      	mov	r8, r3
 8004fc8:	688a      	ldr	r2, [r1, #8]
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	bfb8      	it	lt
 8004fd4:	4613      	movlt	r3, r2
 8004fd6:	6033      	str	r3, [r6, #0]
 8004fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fdc:	4607      	mov	r7, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	b10a      	cbz	r2, 8004fe6 <_printf_common+0x26>
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	0699      	lsls	r1, r3, #26
 8004fea:	bf42      	ittt	mi
 8004fec:	6833      	ldrmi	r3, [r6, #0]
 8004fee:	3302      	addmi	r3, #2
 8004ff0:	6033      	strmi	r3, [r6, #0]
 8004ff2:	6825      	ldr	r5, [r4, #0]
 8004ff4:	f015 0506 	ands.w	r5, r5, #6
 8004ff8:	d106      	bne.n	8005008 <_printf_common+0x48>
 8004ffa:	f104 0a19 	add.w	sl, r4, #25
 8004ffe:	68e3      	ldr	r3, [r4, #12]
 8005000:	6832      	ldr	r2, [r6, #0]
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	42ab      	cmp	r3, r5
 8005006:	dc26      	bgt.n	8005056 <_printf_common+0x96>
 8005008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800500c:	6822      	ldr	r2, [r4, #0]
 800500e:	3b00      	subs	r3, #0
 8005010:	bf18      	it	ne
 8005012:	2301      	movne	r3, #1
 8005014:	0692      	lsls	r2, r2, #26
 8005016:	d42b      	bmi.n	8005070 <_printf_common+0xb0>
 8005018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800501c:	4641      	mov	r1, r8
 800501e:	4638      	mov	r0, r7
 8005020:	47c8      	blx	r9
 8005022:	3001      	adds	r0, #1
 8005024:	d01e      	beq.n	8005064 <_printf_common+0xa4>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	6922      	ldr	r2, [r4, #16]
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	2b04      	cmp	r3, #4
 8005030:	bf02      	ittt	eq
 8005032:	68e5      	ldreq	r5, [r4, #12]
 8005034:	6833      	ldreq	r3, [r6, #0]
 8005036:	1aed      	subeq	r5, r5, r3
 8005038:	68a3      	ldr	r3, [r4, #8]
 800503a:	bf0c      	ite	eq
 800503c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005040:	2500      	movne	r5, #0
 8005042:	4293      	cmp	r3, r2
 8005044:	bfc4      	itt	gt
 8005046:	1a9b      	subgt	r3, r3, r2
 8005048:	18ed      	addgt	r5, r5, r3
 800504a:	2600      	movs	r6, #0
 800504c:	341a      	adds	r4, #26
 800504e:	42b5      	cmp	r5, r6
 8005050:	d11a      	bne.n	8005088 <_printf_common+0xc8>
 8005052:	2000      	movs	r0, #0
 8005054:	e008      	b.n	8005068 <_printf_common+0xa8>
 8005056:	2301      	movs	r3, #1
 8005058:	4652      	mov	r2, sl
 800505a:	4641      	mov	r1, r8
 800505c:	4638      	mov	r0, r7
 800505e:	47c8      	blx	r9
 8005060:	3001      	adds	r0, #1
 8005062:	d103      	bne.n	800506c <_printf_common+0xac>
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506c:	3501      	adds	r5, #1
 800506e:	e7c6      	b.n	8004ffe <_printf_common+0x3e>
 8005070:	18e1      	adds	r1, r4, r3
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	2030      	movs	r0, #48	@ 0x30
 8005076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800507a:	4422      	add	r2, r4
 800507c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005084:	3302      	adds	r3, #2
 8005086:	e7c7      	b.n	8005018 <_printf_common+0x58>
 8005088:	2301      	movs	r3, #1
 800508a:	4622      	mov	r2, r4
 800508c:	4641      	mov	r1, r8
 800508e:	4638      	mov	r0, r7
 8005090:	47c8      	blx	r9
 8005092:	3001      	adds	r0, #1
 8005094:	d0e6      	beq.n	8005064 <_printf_common+0xa4>
 8005096:	3601      	adds	r6, #1
 8005098:	e7d9      	b.n	800504e <_printf_common+0x8e>
	...

0800509c <_printf_i>:
 800509c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	7e0f      	ldrb	r7, [r1, #24]
 80050a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050a4:	2f78      	cmp	r7, #120	@ 0x78
 80050a6:	4691      	mov	r9, r2
 80050a8:	4680      	mov	r8, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	469a      	mov	sl, r3
 80050ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050b2:	d807      	bhi.n	80050c4 <_printf_i+0x28>
 80050b4:	2f62      	cmp	r7, #98	@ 0x62
 80050b6:	d80a      	bhi.n	80050ce <_printf_i+0x32>
 80050b8:	2f00      	cmp	r7, #0
 80050ba:	f000 80d2 	beq.w	8005262 <_printf_i+0x1c6>
 80050be:	2f58      	cmp	r7, #88	@ 0x58
 80050c0:	f000 80b9 	beq.w	8005236 <_printf_i+0x19a>
 80050c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050cc:	e03a      	b.n	8005144 <_printf_i+0xa8>
 80050ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050d2:	2b15      	cmp	r3, #21
 80050d4:	d8f6      	bhi.n	80050c4 <_printf_i+0x28>
 80050d6:	a101      	add	r1, pc, #4	@ (adr r1, 80050dc <_printf_i+0x40>)
 80050d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050dc:	08005135 	.word	0x08005135
 80050e0:	08005149 	.word	0x08005149
 80050e4:	080050c5 	.word	0x080050c5
 80050e8:	080050c5 	.word	0x080050c5
 80050ec:	080050c5 	.word	0x080050c5
 80050f0:	080050c5 	.word	0x080050c5
 80050f4:	08005149 	.word	0x08005149
 80050f8:	080050c5 	.word	0x080050c5
 80050fc:	080050c5 	.word	0x080050c5
 8005100:	080050c5 	.word	0x080050c5
 8005104:	080050c5 	.word	0x080050c5
 8005108:	08005249 	.word	0x08005249
 800510c:	08005173 	.word	0x08005173
 8005110:	08005203 	.word	0x08005203
 8005114:	080050c5 	.word	0x080050c5
 8005118:	080050c5 	.word	0x080050c5
 800511c:	0800526b 	.word	0x0800526b
 8005120:	080050c5 	.word	0x080050c5
 8005124:	08005173 	.word	0x08005173
 8005128:	080050c5 	.word	0x080050c5
 800512c:	080050c5 	.word	0x080050c5
 8005130:	0800520b 	.word	0x0800520b
 8005134:	6833      	ldr	r3, [r6, #0]
 8005136:	1d1a      	adds	r2, r3, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6032      	str	r2, [r6, #0]
 800513c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005144:	2301      	movs	r3, #1
 8005146:	e09d      	b.n	8005284 <_printf_i+0x1e8>
 8005148:	6833      	ldr	r3, [r6, #0]
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	1d19      	adds	r1, r3, #4
 800514e:	6031      	str	r1, [r6, #0]
 8005150:	0606      	lsls	r6, r0, #24
 8005152:	d501      	bpl.n	8005158 <_printf_i+0xbc>
 8005154:	681d      	ldr	r5, [r3, #0]
 8005156:	e003      	b.n	8005160 <_printf_i+0xc4>
 8005158:	0645      	lsls	r5, r0, #25
 800515a:	d5fb      	bpl.n	8005154 <_printf_i+0xb8>
 800515c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005160:	2d00      	cmp	r5, #0
 8005162:	da03      	bge.n	800516c <_printf_i+0xd0>
 8005164:	232d      	movs	r3, #45	@ 0x2d
 8005166:	426d      	negs	r5, r5
 8005168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800516c:	4859      	ldr	r0, [pc, #356]	@ (80052d4 <_printf_i+0x238>)
 800516e:	230a      	movs	r3, #10
 8005170:	e011      	b.n	8005196 <_printf_i+0xfa>
 8005172:	6821      	ldr	r1, [r4, #0]
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	0608      	lsls	r0, r1, #24
 8005178:	f853 5b04 	ldr.w	r5, [r3], #4
 800517c:	d402      	bmi.n	8005184 <_printf_i+0xe8>
 800517e:	0649      	lsls	r1, r1, #25
 8005180:	bf48      	it	mi
 8005182:	b2ad      	uxthmi	r5, r5
 8005184:	2f6f      	cmp	r7, #111	@ 0x6f
 8005186:	4853      	ldr	r0, [pc, #332]	@ (80052d4 <_printf_i+0x238>)
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	bf14      	ite	ne
 800518c:	230a      	movne	r3, #10
 800518e:	2308      	moveq	r3, #8
 8005190:	2100      	movs	r1, #0
 8005192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005196:	6866      	ldr	r6, [r4, #4]
 8005198:	60a6      	str	r6, [r4, #8]
 800519a:	2e00      	cmp	r6, #0
 800519c:	bfa2      	ittt	ge
 800519e:	6821      	ldrge	r1, [r4, #0]
 80051a0:	f021 0104 	bicge.w	r1, r1, #4
 80051a4:	6021      	strge	r1, [r4, #0]
 80051a6:	b90d      	cbnz	r5, 80051ac <_printf_i+0x110>
 80051a8:	2e00      	cmp	r6, #0
 80051aa:	d04b      	beq.n	8005244 <_printf_i+0x1a8>
 80051ac:	4616      	mov	r6, r2
 80051ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80051b2:	fb03 5711 	mls	r7, r3, r1, r5
 80051b6:	5dc7      	ldrb	r7, [r0, r7]
 80051b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051bc:	462f      	mov	r7, r5
 80051be:	42bb      	cmp	r3, r7
 80051c0:	460d      	mov	r5, r1
 80051c2:	d9f4      	bls.n	80051ae <_printf_i+0x112>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d10b      	bne.n	80051e0 <_printf_i+0x144>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	07df      	lsls	r7, r3, #31
 80051cc:	d508      	bpl.n	80051e0 <_printf_i+0x144>
 80051ce:	6923      	ldr	r3, [r4, #16]
 80051d0:	6861      	ldr	r1, [r4, #4]
 80051d2:	4299      	cmp	r1, r3
 80051d4:	bfde      	ittt	le
 80051d6:	2330      	movle	r3, #48	@ 0x30
 80051d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051e0:	1b92      	subs	r2, r2, r6
 80051e2:	6122      	str	r2, [r4, #16]
 80051e4:	f8cd a000 	str.w	sl, [sp]
 80051e8:	464b      	mov	r3, r9
 80051ea:	aa03      	add	r2, sp, #12
 80051ec:	4621      	mov	r1, r4
 80051ee:	4640      	mov	r0, r8
 80051f0:	f7ff fee6 	bl	8004fc0 <_printf_common>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d14a      	bne.n	800528e <_printf_i+0x1f2>
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	b004      	add	sp, #16
 80051fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f043 0320 	orr.w	r3, r3, #32
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	4833      	ldr	r0, [pc, #204]	@ (80052d8 <_printf_i+0x23c>)
 800520c:	2778      	movs	r7, #120	@ 0x78
 800520e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	6831      	ldr	r1, [r6, #0]
 8005216:	061f      	lsls	r7, r3, #24
 8005218:	f851 5b04 	ldr.w	r5, [r1], #4
 800521c:	d402      	bmi.n	8005224 <_printf_i+0x188>
 800521e:	065f      	lsls	r7, r3, #25
 8005220:	bf48      	it	mi
 8005222:	b2ad      	uxthmi	r5, r5
 8005224:	6031      	str	r1, [r6, #0]
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	bf44      	itt	mi
 800522a:	f043 0320 	orrmi.w	r3, r3, #32
 800522e:	6023      	strmi	r3, [r4, #0]
 8005230:	b11d      	cbz	r5, 800523a <_printf_i+0x19e>
 8005232:	2310      	movs	r3, #16
 8005234:	e7ac      	b.n	8005190 <_printf_i+0xf4>
 8005236:	4827      	ldr	r0, [pc, #156]	@ (80052d4 <_printf_i+0x238>)
 8005238:	e7e9      	b.n	800520e <_printf_i+0x172>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f023 0320 	bic.w	r3, r3, #32
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	e7f6      	b.n	8005232 <_printf_i+0x196>
 8005244:	4616      	mov	r6, r2
 8005246:	e7bd      	b.n	80051c4 <_printf_i+0x128>
 8005248:	6833      	ldr	r3, [r6, #0]
 800524a:	6825      	ldr	r5, [r4, #0]
 800524c:	6961      	ldr	r1, [r4, #20]
 800524e:	1d18      	adds	r0, r3, #4
 8005250:	6030      	str	r0, [r6, #0]
 8005252:	062e      	lsls	r6, r5, #24
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	d501      	bpl.n	800525c <_printf_i+0x1c0>
 8005258:	6019      	str	r1, [r3, #0]
 800525a:	e002      	b.n	8005262 <_printf_i+0x1c6>
 800525c:	0668      	lsls	r0, r5, #25
 800525e:	d5fb      	bpl.n	8005258 <_printf_i+0x1bc>
 8005260:	8019      	strh	r1, [r3, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	6123      	str	r3, [r4, #16]
 8005266:	4616      	mov	r6, r2
 8005268:	e7bc      	b.n	80051e4 <_printf_i+0x148>
 800526a:	6833      	ldr	r3, [r6, #0]
 800526c:	1d1a      	adds	r2, r3, #4
 800526e:	6032      	str	r2, [r6, #0]
 8005270:	681e      	ldr	r6, [r3, #0]
 8005272:	6862      	ldr	r2, [r4, #4]
 8005274:	2100      	movs	r1, #0
 8005276:	4630      	mov	r0, r6
 8005278:	f7fa ffaa 	bl	80001d0 <memchr>
 800527c:	b108      	cbz	r0, 8005282 <_printf_i+0x1e6>
 800527e:	1b80      	subs	r0, r0, r6
 8005280:	6060      	str	r0, [r4, #4]
 8005282:	6863      	ldr	r3, [r4, #4]
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	2300      	movs	r3, #0
 8005288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800528c:	e7aa      	b.n	80051e4 <_printf_i+0x148>
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	4632      	mov	r2, r6
 8005292:	4649      	mov	r1, r9
 8005294:	4640      	mov	r0, r8
 8005296:	47d0      	blx	sl
 8005298:	3001      	adds	r0, #1
 800529a:	d0ad      	beq.n	80051f8 <_printf_i+0x15c>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	079b      	lsls	r3, r3, #30
 80052a0:	d413      	bmi.n	80052ca <_printf_i+0x22e>
 80052a2:	68e0      	ldr	r0, [r4, #12]
 80052a4:	9b03      	ldr	r3, [sp, #12]
 80052a6:	4298      	cmp	r0, r3
 80052a8:	bfb8      	it	lt
 80052aa:	4618      	movlt	r0, r3
 80052ac:	e7a6      	b.n	80051fc <_printf_i+0x160>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4632      	mov	r2, r6
 80052b2:	4649      	mov	r1, r9
 80052b4:	4640      	mov	r0, r8
 80052b6:	47d0      	blx	sl
 80052b8:	3001      	adds	r0, #1
 80052ba:	d09d      	beq.n	80051f8 <_printf_i+0x15c>
 80052bc:	3501      	adds	r5, #1
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	9903      	ldr	r1, [sp, #12]
 80052c2:	1a5b      	subs	r3, r3, r1
 80052c4:	42ab      	cmp	r3, r5
 80052c6:	dcf2      	bgt.n	80052ae <_printf_i+0x212>
 80052c8:	e7eb      	b.n	80052a2 <_printf_i+0x206>
 80052ca:	2500      	movs	r5, #0
 80052cc:	f104 0619 	add.w	r6, r4, #25
 80052d0:	e7f5      	b.n	80052be <_printf_i+0x222>
 80052d2:	bf00      	nop
 80052d4:	080054c5 	.word	0x080054c5
 80052d8:	080054d6 	.word	0x080054d6

080052dc <memmove>:
 80052dc:	4288      	cmp	r0, r1
 80052de:	b510      	push	{r4, lr}
 80052e0:	eb01 0402 	add.w	r4, r1, r2
 80052e4:	d902      	bls.n	80052ec <memmove+0x10>
 80052e6:	4284      	cmp	r4, r0
 80052e8:	4623      	mov	r3, r4
 80052ea:	d807      	bhi.n	80052fc <memmove+0x20>
 80052ec:	1e43      	subs	r3, r0, #1
 80052ee:	42a1      	cmp	r1, r4
 80052f0:	d008      	beq.n	8005304 <memmove+0x28>
 80052f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052fa:	e7f8      	b.n	80052ee <memmove+0x12>
 80052fc:	4402      	add	r2, r0
 80052fe:	4601      	mov	r1, r0
 8005300:	428a      	cmp	r2, r1
 8005302:	d100      	bne.n	8005306 <memmove+0x2a>
 8005304:	bd10      	pop	{r4, pc}
 8005306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800530a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800530e:	e7f7      	b.n	8005300 <memmove+0x24>

08005310 <_sbrk_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d06      	ldr	r5, [pc, #24]	@ (800532c <_sbrk_r+0x1c>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fc fb4a 	bl	80019b4 <_sbrk>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_sbrk_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_sbrk_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	200003b0 	.word	0x200003b0

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005346:	4291      	cmp	r1, r2
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <_realloc_r>:
 800534c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005350:	4680      	mov	r8, r0
 8005352:	4615      	mov	r5, r2
 8005354:	460c      	mov	r4, r1
 8005356:	b921      	cbnz	r1, 8005362 <_realloc_r+0x16>
 8005358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800535c:	4611      	mov	r1, r2
 800535e:	f7ff bc4b 	b.w	8004bf8 <_malloc_r>
 8005362:	b92a      	cbnz	r2, 8005370 <_realloc_r+0x24>
 8005364:	f7ff fbdc 	bl	8004b20 <_free_r>
 8005368:	2400      	movs	r4, #0
 800536a:	4620      	mov	r0, r4
 800536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005370:	f000 f81a 	bl	80053a8 <_malloc_usable_size_r>
 8005374:	4285      	cmp	r5, r0
 8005376:	4606      	mov	r6, r0
 8005378:	d802      	bhi.n	8005380 <_realloc_r+0x34>
 800537a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800537e:	d8f4      	bhi.n	800536a <_realloc_r+0x1e>
 8005380:	4629      	mov	r1, r5
 8005382:	4640      	mov	r0, r8
 8005384:	f7ff fc38 	bl	8004bf8 <_malloc_r>
 8005388:	4607      	mov	r7, r0
 800538a:	2800      	cmp	r0, #0
 800538c:	d0ec      	beq.n	8005368 <_realloc_r+0x1c>
 800538e:	42b5      	cmp	r5, r6
 8005390:	462a      	mov	r2, r5
 8005392:	4621      	mov	r1, r4
 8005394:	bf28      	it	cs
 8005396:	4632      	movcs	r2, r6
 8005398:	f7ff ffca 	bl	8005330 <memcpy>
 800539c:	4621      	mov	r1, r4
 800539e:	4640      	mov	r0, r8
 80053a0:	f7ff fbbe 	bl	8004b20 <_free_r>
 80053a4:	463c      	mov	r4, r7
 80053a6:	e7e0      	b.n	800536a <_realloc_r+0x1e>

080053a8 <_malloc_usable_size_r>:
 80053a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ac:	1f18      	subs	r0, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfbc      	itt	lt
 80053b2:	580b      	ldrlt	r3, [r1, r0]
 80053b4:	18c0      	addlt	r0, r0, r3
 80053b6:	4770      	bx	lr

080053b8 <_init>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr

080053c4 <_fini>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr
