
Elevator Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005184  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005314  08005314  00006314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005434  08005434  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005434  08005434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800543c  0800543c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800543c  0800543c  0000643c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005440  08005440  00006440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005444  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  080054a0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  080054a0  000073a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5d3  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d53  00000000  00000000  0001565f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000173b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c1  00000000  00000000  00018018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdfb  00000000  00000000  000189d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe6a  00000000  00000000  000347d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6467  00000000  00000000  0004463e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eaaa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003924  00000000  00000000  000eaae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ee40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052fc 	.word	0x080052fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080052fc 	.word	0x080052fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f001 fbb2 	bl	80019dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f810 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f968 	bl	8000550 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f85e 	bl	8000340 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f934 	bl	80004f0 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8000288:	f000 f8e0 	bl	800044c <MX_TIM15_Init>
  MX_TIM6_Init();
 800028c:	f000 f8a6 	bl	80003dc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Program_Start_Light_Up();
 8000290:	f000 fa8e 	bl	80007b0 <Program_Start_Light_Up>
  Elevator_Simulator_Init();
 8000294:	f000 fa12 	bl	80006bc <Elevator_Simulator_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <main+0x28>

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b09c      	sub	sp, #112	@ 0x70
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002a6:	2228      	movs	r2, #40	@ 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 fba6 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2234      	movs	r2, #52	@ 0x34
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 fb98 	bl	80049fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	2302      	movs	r3, #2
 80002ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	2301      	movs	r3, #1
 80002d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	2310      	movs	r3, #16
 80002d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	2300      	movs	r3, #0
 80002da:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 feeb 	bl	80020bc <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002ec:	f000 fb84 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f4:	2300      	movs	r3, #0
 80002f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000304:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 ff14 	bl	8003138 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000316:	f000 fb6f 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 800031a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800031e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000320:	2300      	movs	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4618      	mov	r0, r3
 8000328:	f003 f926 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000332:	f000 fb61 	bl	80009f8 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3770      	adds	r7, #112	@ 0x70
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800035e:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000364:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000366:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000368:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800036c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b1a      	ldr	r3, [pc, #104]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9995;
 8000374:	4b18      	ldr	r3, [pc, #96]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000376:	f242 720b 	movw	r2, #9995	@ 0x270b
 800037a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_TIM2_Init+0x98>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000382:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <MX_TIM2_Init+0x98>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000388:	4813      	ldr	r0, [pc, #76]	@ (80003d8 <MX_TIM2_Init+0x98>)
 800038a:	f003 fa87 	bl	800389c <HAL_TIM_Base_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000394:	f000 fb30 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800039c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <MX_TIM2_Init+0x98>)
 80003a6:	f003 fc56 	bl	8003c56 <HAL_TIM_ConfigClockSource>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003b0:	f000 fb22 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	@ (80003d8 <MX_TIM2_Init+0x98>)
 80003c2:	f003 fe4d 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003cc:	f000 fb14 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000078 	.word	0x20000078

080003dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003ec:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003ee:	4a16      	ldr	r2, [pc, #88]	@ (8000448 <MX_TIM6_Init+0x6c>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 80003f2:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003f4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80003f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <MX_TIM6_Init+0x68>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8000400:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <MX_TIM6_Init+0x68>)
 8000402:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000406:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000408:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_TIM6_Init+0x68>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800040e:	480d      	ldr	r0, [pc, #52]	@ (8000444 <MX_TIM6_Init+0x68>)
 8000410:	f003 fa44 	bl	800389c <HAL_TIM_Base_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800041a:	f000 faed 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4806      	ldr	r0, [pc, #24]	@ (8000444 <MX_TIM6_Init+0x68>)
 800042c:	f003 fe18 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000436:	f000 fadf 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	200000c4 	.word	0x200000c4
 8000448:	40001000 	.word	0x40001000

0800044c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800046a:	4b1f      	ldr	r3, [pc, #124]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800046c:	4a1f      	ldr	r2, [pc, #124]	@ (80004ec <MX_TIM15_Init+0xa0>)
 800046e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 8000470:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000472:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000476:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 111;
 800047e:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000480:	226f      	movs	r2, #111	@ 0x6f
 8000482:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000496:	4814      	ldr	r0, [pc, #80]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 8000498:	f003 fa00 	bl	800389c <HAL_TIM_Base_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80004a2:	f000 faa9 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 80004b4:	f003 fbcf 	bl	8003c56 <HAL_TIM_ConfigClockSource>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80004be:	f000 fa9b 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4619      	mov	r1, r3
 80004ce:	4806      	ldr	r0, [pc, #24]	@ (80004e8 <MX_TIM15_Init+0x9c>)
 80004d0:	f003 fdc6 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80004da:	f000 fa8d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000110 	.word	0x20000110
 80004ec:	40014000 	.word	0x40014000

080004f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f4:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 80004f6:	4a15      	ldr	r2, [pc, #84]	@ (800054c <MX_USART2_UART_Init+0x5c>)
 80004f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004fa:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 80004fc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000516:	220c      	movs	r2, #12
 8000518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000526:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <MX_USART2_UART_Init+0x58>)
 8000534:	f003 fe18 	bl	8004168 <HAL_UART_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800053e:	f000 fa5b 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000015c 	.word	0x2000015c
 800054c:	40004400 	.word	0x40004400

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b52      	ldr	r3, [pc, #328]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a51      	ldr	r2, [pc, #324]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800056c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b4f      	ldr	r3, [pc, #316]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b4c      	ldr	r3, [pc, #304]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a4b      	ldr	r2, [pc, #300]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b49      	ldr	r3, [pc, #292]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b46      	ldr	r3, [pc, #280]	@ (80006b0 <MX_GPIO_Init+0x160>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a45      	ldr	r2, [pc, #276]	@ (80006b0 <MX_GPIO_Init+0x160>)
 800059c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b43      	ldr	r3, [pc, #268]	@ (80006b0 <MX_GPIO_Init+0x160>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PF1_Pin|PF2_Pin|PF3_Pin|DF1_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80005b4:	483f      	ldr	r0, [pc, #252]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005b6:	f001 fd37 	bl	8002028 <HAL_GPIO_WritePin>
                          |DF2_Pin|DF3_Pin|DU_Pin|DD_Pin
                          |FR1_Pin|FR2_Pin|FR3_Pin|BCDI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c0:	483d      	ldr	r0, [pc, #244]	@ (80006b8 <MX_GPIO_Init+0x168>)
 80005c2:	f001 fd31 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4835      	ldr	r0, [pc, #212]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005de:	f001 fb99 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1_Pin PF2_Pin PF3_Pin DF1_Pin
                           DF2_Pin DF3_Pin DU_Pin DD_Pin
                           FR1_Pin FR2_Pin FR3_Pin BCDI_Pin */
  GPIO_InitStruct.Pin = PF1_Pin|PF2_Pin|PF3_Pin|DF1_Pin
 80005e2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005e6:	60fb      	str	r3, [r7, #12]
                          |DF2_Pin|DF3_Pin|DU_Pin|DD_Pin
                          |FR1_Pin|FR2_Pin|FR3_Pin|BCDI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	482e      	ldr	r0, [pc, #184]	@ (80006b4 <MX_GPIO_Init+0x164>)
 80005fc:	f001 fb8a 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : II1_Pin II2_Pin II3_Pin OI1U_Pin
                           OI2D_Pin OI2U_Pin OI3D_Pin */
  GPIO_InitStruct.Pin = II1_Pin|II2_Pin|II3_Pin|OI1U_Pin
 8000600:	237f      	movs	r3, #127	@ 0x7f
 8000602:	60fb      	str	r3, [r7, #12]
                          |OI2D_Pin|OI2U_Pin|OI3D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000604:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	4828      	ldr	r0, [pc, #160]	@ (80006b8 <MX_GPIO_Init+0x168>)
 8000616:	f001 fb7d 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0x168>)
 8000634:	f001 fb6e 	bl	8001d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	2006      	movs	r0, #6
 800063e:	f001 fb32 	bl	8001ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000642:	2006      	movs	r0, #6
 8000644:	f001 fb4b 	bl	8001cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2007      	movs	r0, #7
 800064e:	f001 fb2a 	bl	8001ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000652:	2007      	movs	r0, #7
 8000654:	f001 fb43 	bl	8001cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2008      	movs	r0, #8
 800065e:	f001 fb22 	bl	8001ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000662:	2008      	movs	r0, #8
 8000664:	f001 fb3b 	bl	8001cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2009      	movs	r0, #9
 800066e:	f001 fb1a 	bl	8001ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000672:	2009      	movs	r0, #9
 8000674:	f001 fb33 	bl	8001cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	200a      	movs	r0, #10
 800067e:	f001 fb12 	bl	8001ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000682:	200a      	movs	r0, #10
 8000684:	f001 fb2b 	bl	8001cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2017      	movs	r0, #23
 800068e:	f001 fb0a 	bl	8001ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000692:	2017      	movs	r0, #23
 8000694:	f001 fb23 	bl	8001cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2028      	movs	r0, #40	@ 0x28
 800069e:	f001 fb02 	bl	8001ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a2:	2028      	movs	r0, #40	@ 0x28
 80006a4:	f001 fb1b 	bl	8001cde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000800 	.word	0x48000800
 80006b8:	48000400 	.word	0x48000400

080006bc <Elevator_Simulator_Init>:
//		sprintf(msg, "YIPPEE\r\n");
//		HAL_UART_Transmit(&huart2, (uint8_t*) msg, 10, 100);
//	}
//}

void Elevator_Simulator_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	201c      	movs	r0, #28
 80006c8:	f001 faed 	bl	8001ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006cc:	201c      	movs	r0, #28
 80006ce:	f001 fb06 	bl	8001cde <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	2036      	movs	r0, #54	@ 0x36
 80006d8:	f001 fae5 	bl	8001ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006dc:	2036      	movs	r0, #54	@ 0x36
 80006de:	f001 fafe 	bl	8001cde <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	2018      	movs	r0, #24
 80006e8:	f001 fadd 	bl	8001ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80006ec:	2018      	movs	r0, #24
 80006ee:	f001 faf6 	bl	8001cde <HAL_NVIC_EnableIRQ>

	for (int i = 0; i < 3; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e00d      	b.n	8000714 <Elevator_Simulator_Init+0x58>
		floor_requests[i].requested = 0;
 80006f8:	4a23      	ldr	r2, [pc, #140]	@ (8000788 <Elevator_Simulator_Init+0xcc>)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2100      	movs	r1, #0
 80006fe:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		floor_requests[i].direction = 'n';
 8000702:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <Elevator_Simulator_Init+0xcc>)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	226e      	movs	r2, #110	@ 0x6e
 800070c:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 3; i++) {
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b02      	cmp	r3, #2
 8000718:	ddee      	ble.n	80006f8 <Elevator_Simulator_Init+0x3c>
	}

	elevator_direction = 'n';
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <Elevator_Simulator_Init+0xd0>)
 800071c:	226e      	movs	r2, #110	@ 0x6e
 800071e:	701a      	strb	r2, [r3, #0]
	floor_position = 1; // The elevator always begins in the first floor
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <Elevator_Simulator_Init+0xd4>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 2; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	e007      	b.n	800073c <Elevator_Simulator_Init+0x80>
		floor_destinations[i] = 0;
 800072c:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <Elevator_Simulator_Init+0xd8>)
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	4413      	add	r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	3301      	adds	r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b01      	cmp	r3, #1
 8000740:	ddf4      	ble.n	800072c <Elevator_Simulator_Init+0x70>
	}

	for (int i =  0; i < 3; i++) {
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	e007      	b.n	8000758 <Elevator_Simulator_Init+0x9c>
			requests[i] = 0;
 8000748:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <Elevator_Simulator_Init+0xdc>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
	for (int i =  0; i < 3; i++) {
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3301      	adds	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b02      	cmp	r3, #2
 800075c:	ddf4      	ble.n	8000748 <Elevator_Simulator_Init+0x8c>
		}

	pin_num = 0;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <Elevator_Simulator_Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	serving = 0;
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <Elevator_Simulator_Init+0xe4>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
	start_timer = 0;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <Elevator_Simulator_Init+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	traveling = 0;
 8000770:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <Elevator_Simulator_Init+0xec>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2101      	movs	r1, #1
 800077a:	480c      	ldr	r0, [pc, #48]	@ (80007ac <Elevator_Simulator_Init+0xf0>)
 800077c:	f001 fc54 	bl	8002028 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000020c 	.word	0x2000020c
 800078c:	20000212 	.word	0x20000212
 8000790:	20000213 	.word	0x20000213
 8000794:	20000214 	.word	0x20000214
 8000798:	20000218 	.word	0x20000218
 800079c:	2000021b 	.word	0x2000021b
 80007a0:	2000021c 	.word	0x2000021c
 80007a4:	2000021d 	.word	0x2000021d
 80007a8:	2000021e 	.word	0x2000021e
 80007ac:	48000800 	.word	0x48000800

080007b0 <Program_Start_Light_Up>:

void Program_Start_Light_Up(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
 80007b4:	2101      	movs	r1, #1
 80007b6:	4842      	ldr	r0, [pc, #264]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 80007b8:	f001 fc4e 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007bc:	20fa      	movs	r0, #250	@ 0xfa
 80007be:	f001 f973 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(PF2_GPIO_Port, PF2_Pin);
 80007c2:	2102      	movs	r1, #2
 80007c4:	483e      	ldr	r0, [pc, #248]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 80007c6:	f001 fc47 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
 80007ca:	2101      	movs	r1, #1
 80007cc:	483c      	ldr	r0, [pc, #240]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 80007ce:	f001 fc43 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007d2:	20fa      	movs	r0, #250	@ 0xfa
 80007d4:	f001 f968 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(PF3_GPIO_Port, PF3_Pin);
 80007d8:	2104      	movs	r1, #4
 80007da:	4839      	ldr	r0, [pc, #228]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 80007dc:	f001 fc3c 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF2_GPIO_Port, PF2_Pin);
 80007e0:	2102      	movs	r1, #2
 80007e2:	4837      	ldr	r0, [pc, #220]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 80007e4:	f001 fc38 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007e8:	20fa      	movs	r0, #250	@ 0xfa
 80007ea:	f001 f95d 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(DF1_GPIO_Port, DF1_Pin);
 80007ee:	2108      	movs	r1, #8
 80007f0:	4833      	ldr	r0, [pc, #204]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 80007f2:	f001 fc31 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PF3_GPIO_Port, PF3_Pin);
 80007f6:	2104      	movs	r1, #4
 80007f8:	4831      	ldr	r0, [pc, #196]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 80007fa:	f001 fc2d 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007fe:	20fa      	movs	r0, #250	@ 0xfa
 8000800:	f001 f952 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(DF2_GPIO_Port, DF2_Pin);
 8000804:	2110      	movs	r1, #16
 8000806:	482e      	ldr	r0, [pc, #184]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 8000808:	f001 fc26 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF1_GPIO_Port, DF1_Pin);
 800080c:	2108      	movs	r1, #8
 800080e:	482c      	ldr	r0, [pc, #176]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 8000810:	f001 fc22 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000814:	20fa      	movs	r0, #250	@ 0xfa
 8000816:	f001 f947 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(DF3_GPIO_Port, DF3_Pin);
 800081a:	2120      	movs	r1, #32
 800081c:	4828      	ldr	r0, [pc, #160]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 800081e:	f001 fc1b 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF2_GPIO_Port, DF2_Pin);
 8000822:	2110      	movs	r1, #16
 8000824:	4826      	ldr	r0, [pc, #152]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 8000826:	f001 fc17 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800082a:	20fa      	movs	r0, #250	@ 0xfa
 800082c:	f001 f93c 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(DU_GPIO_Port, DU_Pin);
 8000830:	2140      	movs	r1, #64	@ 0x40
 8000832:	4823      	ldr	r0, [pc, #140]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 8000834:	f001 fc10 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DF3_GPIO_Port, DF3_Pin);
 8000838:	2120      	movs	r1, #32
 800083a:	4821      	ldr	r0, [pc, #132]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 800083c:	f001 fc0c 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000840:	20fa      	movs	r0, #250	@ 0xfa
 8000842:	f001 f931 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(DD_GPIO_Port, DD_Pin);
 8000846:	2180      	movs	r1, #128	@ 0x80
 8000848:	481d      	ldr	r0, [pc, #116]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 800084a:	f001 fc05 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DU_GPIO_Port, DU_Pin);
 800084e:	2140      	movs	r1, #64	@ 0x40
 8000850:	481b      	ldr	r0, [pc, #108]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 8000852:	f001 fc01 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000856:	20fa      	movs	r0, #250	@ 0xfa
 8000858:	f001 f926 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(FR1_GPIO_Port, FR1_Pin);
 800085c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000860:	4817      	ldr	r0, [pc, #92]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 8000862:	f001 fbf9 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DD_GPIO_Port, DD_Pin);
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	4815      	ldr	r0, [pc, #84]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 800086a:	f001 fbf5 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800086e:	20fa      	movs	r0, #250	@ 0xfa
 8000870:	f001 f91a 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(FR2_GPIO_Port, FR2_Pin);
 8000874:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 800087a:	f001 fbed 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR1_GPIO_Port, FR1_Pin);
 800087e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000882:	480f      	ldr	r0, [pc, #60]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 8000884:	f001 fbe8 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000888:	20fa      	movs	r0, #250	@ 0xfa
 800088a:	f001 f90d 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(FR3_GPIO_Port, FR3_Pin);
 800088e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000892:	480b      	ldr	r0, [pc, #44]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 8000894:	f001 fbe0 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FR2_GPIO_Port, FR2_Pin);
 8000898:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089c:	4808      	ldr	r0, [pc, #32]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 800089e:	f001 fbdb 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80008a2:	20fa      	movs	r0, #250	@ 0xfa
 80008a4:	f001 f900 	bl	8001aa8 <HAL_Delay>

	HAL_GPIO_TogglePin(FR3_GPIO_Port, FR3_Pin);
 80008a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <Program_Start_Light_Up+0x110>)
 80008ae:	f001 fbd3 	bl	8002058 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80008b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b6:	f001 f8f7 	bl	8001aa8 <HAL_Delay>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	48000800 	.word	0x48000800

080008c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OI2U_Pin) {
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	2b20      	cmp	r3, #32
 80008d2:	d103      	bne.n	80008dc <HAL_GPIO_EXTI_Callback+0x18>
		pin_num = 2;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == OI3D_Pin) {
		pin_num = 3;
	}
}
 80008da:	e005      	b.n	80008e8 <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == OI3D_Pin) {
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	2b40      	cmp	r3, #64	@ 0x40
 80008e0:	d102      	bne.n	80008e8 <HAL_GPIO_EXTI_Callback+0x24>
		pin_num = 3;
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80008e4:	2203      	movs	r2, #3
 80008e6:	701a      	strb	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	2000021b 	.word	0x2000021b

080008f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	// IF htim2 has fully run once, it will check if there are any destination
	if (htim->Instance == TIM2 && start_timer == 1) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000908:	d15e      	bne.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0xd0>
 800090a:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d15a      	bne.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0xd0>
		// IF no destinations, the elevator has finished serving the floor in the serving variable
		if (!floor_destinations[0]) {
 8000912:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d123      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x6a>
			// IF there are no other requests, stop moving the elevator
			if (!requests[0] && !serving) {
 800091a:	4b2f      	ldr	r3, [pc, #188]	@ (80009d8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10d      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x46>
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d109      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x46>
				sprintf(msg, "NOTHING TO DO\r\n");
 800092a:	492d      	ldr	r1, [pc, #180]	@ (80009e0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800092c:	482d      	ldr	r0, [pc, #180]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800092e:	f004 f845 	bl	80049bc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, 15, 100);
 8000932:	2364      	movs	r3, #100	@ 0x64
 8000934:	220f      	movs	r2, #15
 8000936:	492b      	ldr	r1, [pc, #172]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000938:	482b      	ldr	r0, [pc, #172]	@ (80009e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800093a:	f003 fc63 	bl	8004204 <HAL_UART_Transmit>
			}

			// reset the serving variable and the LED corresponding to the elevator_direction variable
			serving = 0;
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
			Choose_Floor_To_Service();
 8000944:	f000 ff42 	bl	80017cc <Choose_Floor_To_Service>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 8000948:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b75      	cmp	r3, #117	@ 0x75
 800094e:	d101      	bne.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8000950:	2340      	movs	r3, #64	@ 0x40
 8000952:	e000      	b.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	2200      	movs	r2, #0
 8000958:	4619      	mov	r1, r3
 800095a:	4825      	ldr	r0, [pc, #148]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800095c:	f001 fb64 	bl	8002028 <HAL_GPIO_WritePin>
				floor_destinations[1] = temp;
			}
			HAL_TIM_Base_Start_IT(&htim6);
		}
	}
}
 8000960:	e032      	b.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0xd0>
		  else if (floor_destinations[1] == 0) {
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10f      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x92>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b75      	cmp	r3, #117	@ 0x75
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8000972:	2340      	movs	r3, #64	@ 0x40
 8000974:	e000      	b.n	8000978 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	481c      	ldr	r0, [pc, #112]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800097e:	f001 fb53 	bl	8002028 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Start_IT(&htim6);
 8000982:	481c      	ldr	r0, [pc, #112]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000984:	f002 ffe2 	bl	800394c <HAL_TIM_Base_Start_IT>
}
 8000988:	e01e      	b.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0xd0>
			HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b75      	cmp	r3, #117	@ 0x75
 8000990:	d101      	bne.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8000992:	2340      	movs	r3, #64	@ 0x40
 8000994:	e000      	b.n	8000998 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000996:	2380      	movs	r3, #128	@ 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4619      	mov	r1, r3
 800099c:	4814      	ldr	r0, [pc, #80]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800099e:	f001 fb43 	bl	8002028 <HAL_GPIO_WritePin>
			if (floor_destinations[0] - floor_position > floor_destinations[1] - floor_position) {
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d909      	bls.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0xca>
				uint8_t temp = floor_destinations[0];
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	73fb      	strb	r3, [r7, #15]
				floor_destinations[0] = floor_destinations[1];
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80009b6:	785a      	ldrb	r2, [r3, #1]
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80009ba:	701a      	strb	r2, [r3, #0]
				floor_destinations[1] = temp;
 80009bc:	4a05      	ldr	r2, [pc, #20]	@ (80009d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	7053      	strb	r3, [r2, #1]
			HAL_TIM_Base_Start_IT(&htim6);
 80009c2:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80009c4:	f002 ffc2 	bl	800394c <HAL_TIM_Base_Start_IT>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000021d 	.word	0x2000021d
 80009d4:	20000214 	.word	0x20000214
 80009d8:	20000218 	.word	0x20000218
 80009dc:	2000021c 	.word	0x2000021c
 80009e0:	08005314 	.word	0x08005314
 80009e4:	200001e4 	.word	0x200001e4
 80009e8:	2000015c 	.word	0x2000015c
 80009ec:	20000212 	.word	0x20000212
 80009f0:	48000800 	.word	0x48000800
 80009f4:	200000c4 	.word	0x200000c4

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a5c:	d114      	bne.n	8000a88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a25      	ldr	r2, [pc, #148]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b23      	ldr	r3, [pc, #140]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	201c      	movs	r0, #28
 8000a7c:	f001 f913 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a80:	201c      	movs	r0, #28
 8000a82:	f001 f92c 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000a86:	e032      	b.n	8000aee <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000afc <HAL_TIM_Base_MspInit+0xb0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d114      	bne.n	8000abc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2036      	movs	r0, #54	@ 0x36
 8000ab0:	f001 f8f9 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ab4:	2036      	movs	r0, #54	@ 0x36
 8000ab6:	f001 f912 	bl	8001cde <HAL_NVIC_EnableIRQ>
}
 8000aba:	e018      	b.n	8000aee <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM15)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <HAL_TIM_Base_MspInit+0xb4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d113      	bne.n	8000aee <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_TIM_Base_MspInit+0xac>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2018      	movs	r0, #24
 8000ae4:	f001 f8df 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ae8:	2018      	movs	r0, #24
 8000aea:	f001 f8f8 	bl	8001cde <HAL_NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40001000 	.word	0x40001000
 8000b00:	40014000 	.word	0x40014000

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a17      	ldr	r2, [pc, #92]	@ (8000b80 <HAL_UART_MspInit+0x7c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d128      	bne.n	8000b78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <HAL_UART_MspInit+0x80>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <HAL_UART_MspInit+0x80>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <HAL_UART_MspInit+0x80>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_UART_MspInit+0x80>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <HAL_UART_MspInit+0x80>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <HAL_UART_MspInit+0x80>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b56:	230c      	movs	r3, #12
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b74:	f001 f8ce 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 ff43 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	// FUNCTION SETS FLOOR 1 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	e002      	b.n	8000bfa <EXTI0_IRQHandler+0x12>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c00:	4293      	cmp	r3, r2
 8000c02:	ddf7      	ble.n	8000bf4 <EXTI0_IRQHandler+0xc>
	// IF button for choosing floor 1 as a destination is pressed
	if(HAL_GPIO_ReadPin(II1_GPIO_Port, II1_Pin)) {
 8000c04:	2101      	movs	r1, #1
 8000c06:	481d      	ldr	r0, [pc, #116]	@ (8000c7c <EXTI0_IRQHandler+0x94>)
 8000c08:	f001 f9f6 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d02c      	beq.n	8000c6c <EXTI0_IRQHandler+0x84>
		// IF the current floor_position is not 1 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 1 && serving && !traveling) {
 8000c12:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <EXTI0_IRQHandler+0x98>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d028      	beq.n	8000c6c <EXTI0_IRQHandler+0x84>
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <EXTI0_IRQHandler+0x9c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d024      	beq.n	8000c6c <EXTI0_IRQHandler+0x84>
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <EXTI0_IRQHandler+0xa0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d120      	bne.n	8000c6c <EXTI0_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <EXTI0_IRQHandler+0xa4>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d110      	bne.n	8000c54 <EXTI0_IRQHandler+0x6c>
				floor_destinations[0] = 1;
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <EXTI0_IRQHandler+0xa4>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	4814      	ldr	r0, [pc, #80]	@ (8000c90 <EXTI0_IRQHandler+0xa8>)
 8000c3e:	f001 f9f3 	bl	8002028 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <EXTI0_IRQHandler+0xac>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d110      	bne.n	8000c6c <EXTI0_IRQHandler+0x84>
 8000c4a:	4913      	ldr	r1, [pc, #76]	@ (8000c98 <EXTI0_IRQHandler+0xb0>)
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f000 fd77 	bl	8001740 <Reset_Timer>
 8000c52:	e00b      	b.n	8000c6c <EXTI0_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  // (There are only at most 2 possible floors to set as a destination, overwriting can never occur)
			  else if (floor_destinations[0] != 1 /* !floor_destinations[1] */) {
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <EXTI0_IRQHandler+0xa4>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d007      	beq.n	8000c6c <EXTI0_IRQHandler+0x84>
				floor_destinations[1] = 1;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <EXTI0_IRQHandler+0xa4>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2108      	movs	r1, #8
 8000c66:	480a      	ldr	r0, [pc, #40]	@ (8000c90 <EXTI0_IRQHandler+0xa8>)
 8000c68:	f001 f9de 	bl	8002028 <HAL_GPIO_WritePin>
//				return;
//			}
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II1_Pin);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f001 fa0d 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	20000213 	.word	0x20000213
 8000c84:	2000021c 	.word	0x2000021c
 8000c88:	2000021e 	.word	0x2000021e
 8000c8c:	20000214 	.word	0x20000214
 8000c90:	48000800 	.word	0x48000800
 8000c94:	20000218 	.word	0x20000218
 8000c98:	20000078 	.word	0x20000078

08000c9c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// FUNCTION SETS FLOOR 2 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	e002      	b.n	8000cae <EXTI1_IRQHandler+0x12>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	ddf7      	ble.n	8000ca8 <EXTI1_IRQHandler+0xc>
	// IF button for choosing floor 2 as a destination is pressed
	if(HAL_GPIO_ReadPin(II2_GPIO_Port, II2_Pin)) {
 8000cb8:	2102      	movs	r1, #2
 8000cba:	481d      	ldr	r0, [pc, #116]	@ (8000d30 <EXTI1_IRQHandler+0x94>)
 8000cbc:	f001 f99c 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d02c      	beq.n	8000d20 <EXTI1_IRQHandler+0x84>
		// IF the current floor_position is not 2 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 2 && serving && !traveling) {
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <EXTI1_IRQHandler+0x98>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d028      	beq.n	8000d20 <EXTI1_IRQHandler+0x84>
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <EXTI1_IRQHandler+0x9c>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d024      	beq.n	8000d20 <EXTI1_IRQHandler+0x84>
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <EXTI1_IRQHandler+0xa0>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d120      	bne.n	8000d20 <EXTI1_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <EXTI1_IRQHandler+0xa4>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d110      	bne.n	8000d08 <EXTI1_IRQHandler+0x6c>
				floor_destinations[0] = 2;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <EXTI1_IRQHandler+0xa4>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <EXTI1_IRQHandler+0xa8>)
 8000cf2:	f001 f999 	bl	8002028 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <EXTI1_IRQHandler+0xac>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d110      	bne.n	8000d20 <EXTI1_IRQHandler+0x84>
 8000cfe:	4913      	ldr	r1, [pc, #76]	@ (8000d4c <EXTI1_IRQHandler+0xb0>)
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fd1d 	bl	8001740 <Reset_Timer>
 8000d06:	e00b      	b.n	8000d20 <EXTI1_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  else if (floor_destinations[0] != 2){
 8000d08:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <EXTI1_IRQHandler+0xa4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d007      	beq.n	8000d20 <EXTI1_IRQHandler+0x84>
				floor_destinations[1] = 2;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <EXTI1_IRQHandler+0xa4>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2110      	movs	r1, #16
 8000d1a:	480a      	ldr	r0, [pc, #40]	@ (8000d44 <EXTI1_IRQHandler+0xa8>)
 8000d1c:	f001 f984 	bl	8002028 <HAL_GPIO_WritePin>
//				  return;
//			  }
		}
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II2_Pin);
 8000d20:	2002      	movs	r0, #2
 8000d22:	f001 f9b3 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	48000400 	.word	0x48000400
 8000d34:	20000213 	.word	0x20000213
 8000d38:	2000021c 	.word	0x2000021c
 8000d3c:	2000021e 	.word	0x2000021e
 8000d40:	20000214 	.word	0x20000214
 8000d44:	48000800 	.word	0x48000800
 8000d48:	20000218 	.word	0x20000218
 8000d4c:	20000078 	.word	0x20000078

08000d50 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
	// FUNCTION SET FLOOR 3 AS A DESTINATION

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	e002      	b.n	8000d62 <EXTI2_TSC_IRQHandler+0x12>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	ddf7      	ble.n	8000d5c <EXTI2_TSC_IRQHandler+0xc>
	// IF button for choosing floor 3 as a destination is pressed
	if(HAL_GPIO_ReadPin(II3_GPIO_Port, II3_Pin)) {
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	481d      	ldr	r0, [pc, #116]	@ (8000de4 <EXTI2_TSC_IRQHandler+0x94>)
 8000d70:	f001 f942 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d02c      	beq.n	8000dd4 <EXTI2_TSC_IRQHandler+0x84>
		// IF the current floor_position is not 2 and elevator is not empty (currently serving an elevator) and elevator not traveling to a floor to serve it
		if (floor_position != 3 && serving && !traveling) {
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <EXTI2_TSC_IRQHandler+0x98>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d028      	beq.n	8000dd4 <EXTI2_TSC_IRQHandler+0x84>
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <EXTI2_TSC_IRQHandler+0x9c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d024      	beq.n	8000dd4 <EXTI2_TSC_IRQHandler+0x84>
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <EXTI2_TSC_IRQHandler+0xa0>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d120      	bne.n	8000dd4 <EXTI2_TSC_IRQHandler+0x84>
			// IF no destination has been chosen yet, put the corresponding value in the first element of the array
			if (!floor_destinations[0]) {
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <EXTI2_TSC_IRQHandler+0xa4>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d110      	bne.n	8000dbc <EXTI2_TSC_IRQHandler+0x6c>
				floor_destinations[0] = 3;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <EXTI2_TSC_IRQHandler+0xa4>)
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2120      	movs	r1, #32
 8000da4:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <EXTI2_TSC_IRQHandler+0xa8>)
 8000da6:	f001 f93f 	bl	8002028 <HAL_GPIO_WritePin>

				// IF there are no more floor requests, begin timer to countdown time left to choose destinations
				if (!requests[0])	Reset_Timer(1, &htim2); // htim2 is reset every time a the first destination is set to give more time to choose another destination
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <EXTI2_TSC_IRQHandler+0xac>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d110      	bne.n	8000dd4 <EXTI2_TSC_IRQHandler+0x84>
 8000db2:	4913      	ldr	r1, [pc, #76]	@ (8000e00 <EXTI2_TSC_IRQHandler+0xb0>)
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 fcc3 	bl	8001740 <Reset_Timer>
 8000dba:	e00b      	b.n	8000dd4 <EXTI2_TSC_IRQHandler+0x84>
			} // ELSE IF the previously chosen destination is not the same as this new destination
			  else if (floor_destinations[0] != 3) {
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <EXTI2_TSC_IRQHandler+0xa4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d007      	beq.n	8000dd4 <EXTI2_TSC_IRQHandler+0x84>
				floor_destinations[1] = 3;
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <EXTI2_TSC_IRQHandler+0xa4>)
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	705a      	strb	r2, [r3, #1]

				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2120      	movs	r1, #32
 8000dce:	480a      	ldr	r0, [pc, #40]	@ (8000df8 <EXTI2_TSC_IRQHandler+0xa8>)
 8000dd0:	f001 f92a 	bl	8002028 <HAL_GPIO_WritePin>
//				  return;
//			  }
		}
	}
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(II3_Pin);
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	f001 f959 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	48000400 	.word	0x48000400
 8000de8:	20000213 	.word	0x20000213
 8000dec:	2000021c 	.word	0x2000021c
 8000df0:	2000021e 	.word	0x2000021e
 8000df4:	20000214 	.word	0x20000214
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	20000218 	.word	0x20000218
 8000e00:	20000078 	.word	0x20000078

08000e04 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	// FUNCTION REQUESTS FLOOR 1

	for (int i = 0; i < 65535; i++);
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	e002      	b.n	8000e16 <EXTI3_IRQHandler+0x12>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3301      	adds	r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	ddf7      	ble.n	8000e10 <EXTI3_IRQHandler+0xc>
	// IF button for choosing floor 1 as a request is pressed
	if(HAL_GPIO_ReadPin(OI1U_GPIO_Port, OI1U_Pin)) {
 8000e20:	2108      	movs	r1, #8
 8000e22:	4838      	ldr	r0, [pc, #224]	@ (8000f04 <EXTI3_IRQHandler+0x100>)
 8000e24:	f001 f8e8 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d062      	beq.n	8000ef4 <EXTI3_IRQHandler+0xf0>
		uint8_t i = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	70fb      	strb	r3, [r7, #3]
		while (requests[i]) i++;
 8000e32:	e002      	b.n	8000e3a <EXTI3_IRQHandler+0x36>
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	3301      	adds	r3, #1
 8000e38:	70fb      	strb	r3, [r7, #3]
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	4a32      	ldr	r2, [pc, #200]	@ (8000f08 <EXTI3_IRQHandler+0x104>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f7      	bne.n	8000e34 <EXTI3_IRQHandler+0x30>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving == 1) {
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d11e      	bne.n	8000e88 <EXTI3_IRQHandler+0x84>
 8000e4a:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <EXTI3_IRQHandler+0x108>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d11a      	bne.n	8000e88 <EXTI3_IRQHandler+0x84>
			if (floor_position != serving) {
 8000e52:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <EXTI3_IRQHandler+0x10c>)
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <EXTI3_IRQHandler+0x108>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d04a      	beq.n	8000ef4 <EXTI3_IRQHandler+0xf0>
				floor_requests[0].requested = 1;
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <EXTI3_IRQHandler+0x110>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
				floor_requests[0].direction = 'u';
 8000e64:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <EXTI3_IRQHandler+0x110>)
 8000e66:	2275      	movs	r2, #117	@ 0x75
 8000e68:	705a      	strb	r2, [r3, #1]
				requests[i] = 1;
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	4a26      	ldr	r2, [pc, #152]	@ (8000f08 <EXTI3_IRQHandler+0x104>)
 8000e6e:	2101      	movs	r1, #1
 8000e70:	54d1      	strb	r1, [r2, r3]
				Reset_Timer(1, &htim2);
 8000e72:	4929      	ldr	r1, [pc, #164]	@ (8000f18 <EXTI3_IRQHandler+0x114>)
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 fc63 	bl	8001740 <Reset_Timer>
				HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e80:	4826      	ldr	r0, [pc, #152]	@ (8000f1c <EXTI3_IRQHandler+0x118>)
 8000e82:	f001 f8d1 	bl	8002028 <HAL_GPIO_WritePin>
			if (floor_position != serving) {
 8000e86:	e035      	b.n	8000ef4 <EXTI3_IRQHandler+0xf0>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[0].requested || serving == 1) && (!(i == 0 && serving == 1) && !(i > 0 && requests[i - 1] == 1))) {
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <EXTI3_IRQHandler+0x110>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <EXTI3_IRQHandler+0x94>
 8000e90:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <EXTI3_IRQHandler+0x108>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d12d      	bne.n	8000ef4 <EXTI3_IRQHandler+0xf0>
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <EXTI3_IRQHandler+0xa2>
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <EXTI3_IRQHandler+0x108>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d026      	beq.n	8000ef4 <EXTI3_IRQHandler+0xf0>
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d005      	beq.n	8000eb8 <EXTI3_IRQHandler+0xb4>
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	4a15      	ldr	r2, [pc, #84]	@ (8000f08 <EXTI3_IRQHandler+0x104>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d01d      	beq.n	8000ef4 <EXTI3_IRQHandler+0xf0>
			floor_requests[0].requested = 1;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <EXTI3_IRQHandler+0x110>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
			floor_requests[0].direction = 'u';
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <EXTI3_IRQHandler+0x110>)
 8000ec0:	2275      	movs	r2, #117	@ 0x75
 8000ec2:	705a      	strb	r2, [r3, #1]
			requests[i] = 1;
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	4a10      	ldr	r2, [pc, #64]	@ (8000f08 <EXTI3_IRQHandler+0x104>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	54d1      	strb	r1, [r2, r3]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <EXTI3_IRQHandler+0x108>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d007      	beq.n	8000ee4 <EXTI3_IRQHandler+0xe0>
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <EXTI3_IRQHandler+0x11c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <EXTI3_IRQHandler+0xe0>
				Reset_Timer(1, &htim2);
 8000edc:	490e      	ldr	r1, [pc, #56]	@ (8000f18 <EXTI3_IRQHandler+0x114>)
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f000 fc2e 	bl	8001740 <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eea:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <EXTI3_IRQHandler+0x118>)
 8000eec:	f001 f89c 	bl	8002028 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 8000ef0:	f000 fc6c 	bl	80017cc <Choose_Floor_To_Service>
		}
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI1U_Pin);
 8000ef4:	2008      	movs	r0, #8
 8000ef6:	f001 f8c9 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	48000400 	.word	0x48000400
 8000f08:	20000218 	.word	0x20000218
 8000f0c:	2000021c 	.word	0x2000021c
 8000f10:	20000213 	.word	0x20000213
 8000f14:	2000020c 	.word	0x2000020c
 8000f18:	20000078 	.word	0x20000078
 8000f1c:	48000800 	.word	0x48000800
 8000f20:	20000214 	.word	0x20000214

08000f24 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// FUNCTION REQUESTS FLOOR 2

	for (int i = 0; i < 65535; i++);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e002      	b.n	8000f36 <EXTI4_IRQHandler+0x12>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3301      	adds	r3, #1
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	ddf7      	ble.n	8000f30 <EXTI4_IRQHandler+0xc>
	// IF button for choosing floor 2 as a request is pressed
	if(HAL_GPIO_ReadPin(OI2D_GPIO_Port, OI2D_Pin)) {
 8000f40:	2110      	movs	r1, #16
 8000f42:	4838      	ldr	r0, [pc, #224]	@ (8001024 <EXTI4_IRQHandler+0x100>)
 8000f44:	f001 f858 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d062      	beq.n	8001014 <EXTI4_IRQHandler+0xf0>
		uint8_t i = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	70fb      	strb	r3, [r7, #3]
		while (requests[i]) i++;
 8000f52:	e002      	b.n	8000f5a <EXTI4_IRQHandler+0x36>
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	3301      	adds	r3, #1
 8000f58:	70fb      	strb	r3, [r7, #3]
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	4a32      	ldr	r2, [pc, #200]	@ (8001028 <EXTI4_IRQHandler+0x104>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1f7      	bne.n	8000f54 <EXTI4_IRQHandler+0x30>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving == 2) {
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11e      	bne.n	8000fa8 <EXTI4_IRQHandler+0x84>
 8000f6a:	4b30      	ldr	r3, [pc, #192]	@ (800102c <EXTI4_IRQHandler+0x108>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d11a      	bne.n	8000fa8 <EXTI4_IRQHandler+0x84>
			if (floor_position != serving) {
 8000f72:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <EXTI4_IRQHandler+0x10c>)
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <EXTI4_IRQHandler+0x108>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d04a      	beq.n	8001014 <EXTI4_IRQHandler+0xf0>
				floor_requests[1].requested = 1;
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <EXTI4_IRQHandler+0x110>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	709a      	strb	r2, [r3, #2]
				floor_requests[1].direction = 'd';
 8000f84:	4b2b      	ldr	r3, [pc, #172]	@ (8001034 <EXTI4_IRQHandler+0x110>)
 8000f86:	2264      	movs	r2, #100	@ 0x64
 8000f88:	70da      	strb	r2, [r3, #3]
				requests[i] = 2;
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	4a26      	ldr	r2, [pc, #152]	@ (8001028 <EXTI4_IRQHandler+0x104>)
 8000f8e:	2102      	movs	r1, #2
 8000f90:	54d1      	strb	r1, [r2, r3]
				Reset_Timer(1, &htim2);
 8000f92:	4929      	ldr	r1, [pc, #164]	@ (8001038 <EXTI4_IRQHandler+0x114>)
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 fbd3 	bl	8001740 <Reset_Timer>
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa0:	4826      	ldr	r0, [pc, #152]	@ (800103c <EXTI4_IRQHandler+0x118>)
 8000fa2:	f001 f841 	bl	8002028 <HAL_GPIO_WritePin>
			if (floor_position != serving) {
 8000fa6:	e035      	b.n	8001014 <EXTI4_IRQHandler+0xf0>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[1].requested || serving == 2) && (!(i == 0 && serving == 2) && !(i > 0 && requests[i - 1] == 2))) {
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <EXTI4_IRQHandler+0x110>)
 8000faa:	789b      	ldrb	r3, [r3, #2]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <EXTI4_IRQHandler+0x94>
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <EXTI4_IRQHandler+0x108>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d12d      	bne.n	8001014 <EXTI4_IRQHandler+0xf0>
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <EXTI4_IRQHandler+0xa2>
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <EXTI4_IRQHandler+0x108>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d026      	beq.n	8001014 <EXTI4_IRQHandler+0xf0>
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <EXTI4_IRQHandler+0xb4>
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	4a15      	ldr	r2, [pc, #84]	@ (8001028 <EXTI4_IRQHandler+0x104>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d01d      	beq.n	8001014 <EXTI4_IRQHandler+0xf0>
			floor_requests[1].requested = 1;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <EXTI4_IRQHandler+0x110>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	709a      	strb	r2, [r3, #2]
			floor_requests[1].direction = 'd';
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <EXTI4_IRQHandler+0x110>)
 8000fe0:	2264      	movs	r2, #100	@ 0x64
 8000fe2:	70da      	strb	r2, [r3, #3]
			requests[i] = 2;
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	4a10      	ldr	r2, [pc, #64]	@ (8001028 <EXTI4_IRQHandler+0x104>)
 8000fe8:	2102      	movs	r1, #2
 8000fea:	54d1      	strb	r1, [r2, r3]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <EXTI4_IRQHandler+0x108>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <EXTI4_IRQHandler+0xe0>
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <EXTI4_IRQHandler+0x11c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d103      	bne.n	8001004 <EXTI4_IRQHandler+0xe0>
				Reset_Timer(1, &htim2);
 8000ffc:	490e      	ldr	r1, [pc, #56]	@ (8001038 <EXTI4_IRQHandler+0x114>)
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 fb9e 	bl	8001740 <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100a:	480c      	ldr	r0, [pc, #48]	@ (800103c <EXTI4_IRQHandler+0x118>)
 800100c:	f001 f80c 	bl	8002028 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 8001010:	f000 fbdc 	bl	80017cc <Choose_Floor_To_Service>
		}
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI2D_Pin);
 8001014:	2010      	movs	r0, #16
 8001016:	f001 f839 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	48000400 	.word	0x48000400
 8001028:	20000218 	.word	0x20000218
 800102c:	2000021c 	.word	0x2000021c
 8001030:	20000213 	.word	0x20000213
 8001034:	2000020c 	.word	0x2000020c
 8001038:	20000078 	.word	0x20000078
 800103c:	48000800 	.word	0x48000800
 8001040:	20000214 	.word	0x20000214

08001044 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OI2U_Pin);
 800104a:	2020      	movs	r0, #32
 800104c:	f001 f81e 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OI3D_Pin);
 8001050:	2040      	movs	r0, #64	@ 0x40
 8001052:	f001 f81b 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  // FUNCTION REQUESTS FLOOR 2 AND FLOOR 3

  // IF button for choosing floor 2 is pressed
    if(pin_num == 2) {
 8001056:	4b6b      	ldr	r3, [pc, #428]	@ (8001204 <EXTI9_5_IRQHandler+0x1c0>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d167      	bne.n	800112e <EXTI9_5_IRQHandler+0xea>
	    uint8_t i = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	71fb      	strb	r3, [r7, #7]
		while (requests[i]) i++;
 8001062:	e002      	b.n	800106a <EXTI9_5_IRQHandler+0x26>
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	3301      	adds	r3, #1
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4a66      	ldr	r2, [pc, #408]	@ (8001208 <EXTI9_5_IRQHandler+0x1c4>)
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f7      	bne.n	8001064 <EXTI9_5_IRQHandler+0x20>

		// IF the floor being serviced is the same the floor being requested
		if (i == 0 && serving == 2) {
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11f      	bne.n	80010ba <EXTI9_5_IRQHandler+0x76>
 800107a:	4b64      	ldr	r3, [pc, #400]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d11b      	bne.n	80010ba <EXTI9_5_IRQHandler+0x76>
			if (floor_position != serving) {
 8001082:	4b63      	ldr	r3, [pc, #396]	@ (8001210 <EXTI9_5_IRQHandler+0x1cc>)
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	4b61      	ldr	r3, [pc, #388]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	f000 80b6 	beq.w	80011fc <EXTI9_5_IRQHandler+0x1b8>
				floor_requests[1].requested = 1;
 8001090:	4b60      	ldr	r3, [pc, #384]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 8001092:	2201      	movs	r2, #1
 8001094:	709a      	strb	r2, [r3, #2]
				floor_requests[1].direction = 'u';
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 8001098:	2275      	movs	r2, #117	@ 0x75
 800109a:	70da      	strb	r2, [r3, #3]
				requests[i] = 2;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a5a      	ldr	r2, [pc, #360]	@ (8001208 <EXTI9_5_IRQHandler+0x1c4>)
 80010a0:	2102      	movs	r1, #2
 80010a2:	54d1      	strb	r1, [r2, r3]
				Reset_Timer(1, &htim2);
 80010a4:	495c      	ldr	r1, [pc, #368]	@ (8001218 <EXTI9_5_IRQHandler+0x1d4>)
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 fb4a 	bl	8001740 <Reset_Timer>
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b2:	485a      	ldr	r0, [pc, #360]	@ (800121c <EXTI9_5_IRQHandler+0x1d8>)
 80010b4:	f000 ffb8 	bl	8002028 <HAL_GPIO_WritePin>
			if (floor_position != serving) {
 80010b8:	e0a0      	b.n	80011fc <EXTI9_5_IRQHandler+0x1b8>
			}
		} // ELSE IF the floor is not currently being requested or if it is being served, AND if the most recent requested floor is not the same as this floor
		  else if ((!floor_requests[1].requested || serving == 2) && (!(i == 0 && serving == 2) && !(i > 0 && requests[i - 1] == 2))) {
 80010ba:	4b56      	ldr	r3, [pc, #344]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 80010bc:	789b      	ldrb	r3, [r3, #2]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d004      	beq.n	80010cc <EXTI9_5_IRQHandler+0x88>
 80010c2:	4b52      	ldr	r3, [pc, #328]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	f040 8098 	bne.w	80011fc <EXTI9_5_IRQHandler+0x1b8>
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d104      	bne.n	80010dc <EXTI9_5_IRQHandler+0x98>
 80010d2:	4b4e      	ldr	r3, [pc, #312]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	f000 8090 	beq.w	80011fc <EXTI9_5_IRQHandler+0x1b8>
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <EXTI9_5_IRQHandler+0xac>
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	4a48      	ldr	r2, [pc, #288]	@ (8001208 <EXTI9_5_IRQHandler+0x1c4>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	f000 8086 	beq.w	80011fc <EXTI9_5_IRQHandler+0x1b8>
			floor_requests[1].requested = 1;
 80010f0:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	709a      	strb	r2, [r3, #2]
			floor_requests[1].direction = 'u';
 80010f6:	4b47      	ldr	r3, [pc, #284]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 80010f8:	2275      	movs	r2, #117	@ 0x75
 80010fa:	70da      	strb	r2, [r3, #3]
			requests[i] = 2;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	4a42      	ldr	r2, [pc, #264]	@ (8001208 <EXTI9_5_IRQHandler+0x1c4>)
 8001100:	2102      	movs	r1, #2
 8001102:	54d1      	strb	r1, [r2, r3]

			// IF the elevator is already serving a floor but no destination has been set yet, start the timer so that the new floor request can have a chance to be serviced
			if (serving && !floor_destinations[0]) {
 8001104:	4b41      	ldr	r3, [pc, #260]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <EXTI9_5_IRQHandler+0xd8>
 800110c:	4b44      	ldr	r3, [pc, #272]	@ (8001220 <EXTI9_5_IRQHandler+0x1dc>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d103      	bne.n	800111c <EXTI9_5_IRQHandler+0xd8>
				Reset_Timer(1, &htim2);
 8001114:	4940      	ldr	r1, [pc, #256]	@ (8001218 <EXTI9_5_IRQHandler+0x1d4>)
 8001116:	2001      	movs	r0, #1
 8001118:	f000 fb12 	bl	8001740 <Reset_Timer>
			}

			HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001122:	483e      	ldr	r0, [pc, #248]	@ (800121c <EXTI9_5_IRQHandler+0x1d8>)
 8001124:	f000 ff80 	bl	8002028 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 8001128:	f000 fb50 	bl	80017cc <Choose_Floor_To_Service>
			HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
			Choose_Floor_To_Service();
		}
	}
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800112c:	e066      	b.n	80011fc <EXTI9_5_IRQHandler+0x1b8>
      else if (pin_num == 3) {
 800112e:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <EXTI9_5_IRQHandler+0x1c0>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d162      	bne.n	80011fc <EXTI9_5_IRQHandler+0x1b8>
		uint8_t i = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	71bb      	strb	r3, [r7, #6]
		while (requests[i]) i++;
 800113a:	e002      	b.n	8001142 <EXTI9_5_IRQHandler+0xfe>
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	3301      	adds	r3, #1
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	4a30      	ldr	r2, [pc, #192]	@ (8001208 <EXTI9_5_IRQHandler+0x1c4>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f7      	bne.n	800113c <EXTI9_5_IRQHandler+0xf8>
		if (i == 0 && serving == 3) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d11d      	bne.n	800118e <EXTI9_5_IRQHandler+0x14a>
 8001152:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d119      	bne.n	800118e <EXTI9_5_IRQHandler+0x14a>
			if (floor_position != serving) {
 800115a:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <EXTI9_5_IRQHandler+0x1cc>)
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d013      	beq.n	800118e <EXTI9_5_IRQHandler+0x14a>
				floor_requests[2].requested = 1;
 8001166:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 8001168:	2201      	movs	r2, #1
 800116a:	711a      	strb	r2, [r3, #4]
				floor_requests[2].direction = 'u';
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 800116e:	2275      	movs	r2, #117	@ 0x75
 8001170:	715a      	strb	r2, [r3, #5]
				requests[i] = 3;
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	4a24      	ldr	r2, [pc, #144]	@ (8001208 <EXTI9_5_IRQHandler+0x1c4>)
 8001176:	2103      	movs	r1, #3
 8001178:	54d1      	strb	r1, [r2, r3]
				Reset_Timer(1, &htim2);
 800117a:	4927      	ldr	r1, [pc, #156]	@ (8001218 <EXTI9_5_IRQHandler+0x1d4>)
 800117c:	2001      	movs	r0, #1
 800117e:	f000 fadf 	bl	8001740 <Reset_Timer>
				HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001188:	4824      	ldr	r0, [pc, #144]	@ (800121c <EXTI9_5_IRQHandler+0x1d8>)
 800118a:	f000 ff4d 	bl	8002028 <HAL_GPIO_WritePin>
		if ((!floor_requests[2].requested || serving == 3) && (!(i == 0 && serving == 3) && !(i > 0 && requests[i - 1] == 3))) {
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <EXTI9_5_IRQHandler+0x15a>
 8001196:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d12e      	bne.n	80011fc <EXTI9_5_IRQHandler+0x1b8>
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <EXTI9_5_IRQHandler+0x168>
 80011a4:	4b19      	ldr	r3, [pc, #100]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d027      	beq.n	80011fc <EXTI9_5_IRQHandler+0x1b8>
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <EXTI9_5_IRQHandler+0x17a>
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <EXTI9_5_IRQHandler+0x1c4>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d01e      	beq.n	80011fc <EXTI9_5_IRQHandler+0x1b8>
			floor_requests[2].requested = 1;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	711a      	strb	r2, [r3, #4]
			floor_requests[2].direction = 'u';
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <EXTI9_5_IRQHandler+0x1d0>)
 80011c6:	2275      	movs	r2, #117	@ 0x75
 80011c8:	715a      	strb	r2, [r3, #5]
			requests[i] = 3;
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <EXTI9_5_IRQHandler+0x1c4>)
 80011ce:	2103      	movs	r1, #3
 80011d0:	54d1      	strb	r1, [r2, r3]
			if (serving && !floor_destinations[0]) {
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <EXTI9_5_IRQHandler+0x1c8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <EXTI9_5_IRQHandler+0x1a6>
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <EXTI9_5_IRQHandler+0x1dc>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <EXTI9_5_IRQHandler+0x1a6>
				Reset_Timer(1, &htim2);
 80011e2:	490d      	ldr	r1, [pc, #52]	@ (8001218 <EXTI9_5_IRQHandler+0x1d4>)
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 faab 	bl	8001740 <Reset_Timer>
			HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011f0:	480a      	ldr	r0, [pc, #40]	@ (800121c <EXTI9_5_IRQHandler+0x1d8>)
 80011f2:	f000 ff19 	bl	8002028 <HAL_GPIO_WritePin>
			Choose_Floor_To_Service();
 80011f6:	f000 fae9 	bl	80017cc <Choose_Floor_To_Service>
}
 80011fa:	e7ff      	b.n	80011fc <EXTI9_5_IRQHandler+0x1b8>
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2000021b 	.word	0x2000021b
 8001208:	20000218 	.word	0x20000218
 800120c:	2000021c 	.word	0x2000021c
 8001210:	20000213 	.word	0x20000213
 8001214:	2000020c 	.word	0x2000020c
 8001218:	20000078 	.word	0x20000078
 800121c:	48000800 	.word	0x48000800
 8001220:	20000214 	.word	0x20000214

08001224 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	count++;
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001232:	701a      	strb	r2, [r3, #0]
	if (count == 15 || (count < 10 && count % 2 == 1)) {
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d00a      	beq.n	8001252 <TIM1_BRK_TIM15_IRQHandler+0x2e>
 800123c:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b09      	cmp	r3, #9
 8001242:	d80b      	bhi.n	800125c <TIM1_BRK_TIM15_IRQHandler+0x38>
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <TIM1_BRK_TIM15_IRQHandler+0x38>
		HAL_GPIO_TogglePin(BCDI_GPIO_Port, BCDI_Pin);
 8001252:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001256:	4808      	ldr	r0, [pc, #32]	@ (8001278 <TIM1_BRK_TIM15_IRQHandler+0x54>)
 8001258:	f000 fefe 	bl	8002058 <HAL_GPIO_TogglePin>
	}

	if (count == 18) 	count = 0;
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b12      	cmp	r3, #18
 8001262:	d102      	bne.n	800126a <TIM1_BRK_TIM15_IRQHandler+0x46>
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800126a:	4804      	ldr	r0, [pc, #16]	@ (800127c <TIM1_BRK_TIM15_IRQHandler+0x58>)
 800126c:	f002 fbf1 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000021f 	.word	0x2000021f
 8001278:	48000800 	.word	0x48000800
 800127c:	20000110 	.word	0x20000110

08001280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001284:	4812      	ldr	r0, [pc, #72]	@ (80012d0 <TIM2_IRQHandler+0x50>)
 8001286:	f002 fbe4 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (start_timer) {
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <TIM2_IRQHandler+0x54>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00f      	beq.n	80012b2 <TIM2_IRQHandler+0x32>
  		start_timer = 0;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <TIM2_IRQHandler+0x54>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
  		HAL_TIM_Base_Stop_IT(&htim2);
 8001298:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <TIM2_IRQHandler+0x50>)
 800129a:	f002 fbab 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
  		HAL_TIM_Base_Stop_IT(&htim15);
 800129e:	480e      	ldr	r0, [pc, #56]	@ (80012d8 <TIM2_IRQHandler+0x58>)
 80012a0:	f002 fba8 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
  		HAL_GPIO_WritePin(BCDI_GPIO_Port, BCDI_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012aa:	480c      	ldr	r0, [pc, #48]	@ (80012dc <TIM2_IRQHandler+0x5c>)
 80012ac:	f000 febc 	bl	8002028 <HAL_GPIO_WritePin>
  		start_timer = 1;
  		sprintf(msgs, "HURRY UP TIMER STARTING\r\n");
  		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 25, 100);
  	}
  /* USER CODE END TIM2_IRQn 1 */
}
 80012b0:	e00c      	b.n	80012cc <TIM2_IRQHandler+0x4c>
  		start_timer = 1;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <TIM2_IRQHandler+0x54>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
  		sprintf(msgs, "HURRY UP TIMER STARTING\r\n");
 80012b8:	4909      	ldr	r1, [pc, #36]	@ (80012e0 <TIM2_IRQHandler+0x60>)
 80012ba:	480a      	ldr	r0, [pc, #40]	@ (80012e4 <TIM2_IRQHandler+0x64>)
 80012bc:	f003 fb7e 	bl	80049bc <siprintf>
  		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 25, 100);
 80012c0:	2364      	movs	r3, #100	@ 0x64
 80012c2:	2219      	movs	r2, #25
 80012c4:	4907      	ldr	r1, [pc, #28]	@ (80012e4 <TIM2_IRQHandler+0x64>)
 80012c6:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <TIM2_IRQHandler+0x68>)
 80012c8:	f002 ff9c 	bl	8004204 <HAL_UART_Transmit>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000078 	.word	0x20000078
 80012d4:	2000021d 	.word	0x2000021d
 80012d8:	20000110 	.word	0x20000110
 80012dc:	48000800 	.word	0x48000800
 80012e0:	08005324 	.word	0x08005324
 80012e4:	20000224 	.word	0x20000224
 80012e8:	2000015c 	.word	0x2000015c

080012ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
//	for (int i = 0; i < 65535; i++);
//	if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
//		on = 1;
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012f4:	f000 feca 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (elevator_moving_counter < 3) {
 8001302:	4b93      	ldr	r3, [pc, #588]	@ (8001550 <TIM6_DAC_IRQHandler+0x254>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d81d      	bhi.n	8001346 <TIM6_DAC_IRQHandler+0x4a>
//			case 2:
//				HAL_GPIO_TogglePin(PF1_GPIO_Port, PF1_Pin);
//				break;
//			}
//		}
		sprintf(msgs, "MOVING TO FLOOR %d FROM FLOOR %d\r\n", elevator_direction == 'u' ? floor_position + 1 : floor_position - 1, floor_position);
 800130a:	4b92      	ldr	r3, [pc, #584]	@ (8001554 <TIM6_DAC_IRQHandler+0x258>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b75      	cmp	r3, #117	@ 0x75
 8001310:	d103      	bne.n	800131a <TIM6_DAC_IRQHandler+0x1e>
 8001312:	4b91      	ldr	r3, [pc, #580]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	e002      	b.n	8001320 <TIM6_DAC_IRQHandler+0x24>
 800131a:	4b8f      	ldr	r3, [pc, #572]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	4b8d      	ldr	r3, [pc, #564]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	498d      	ldr	r1, [pc, #564]	@ (800155c <TIM6_DAC_IRQHandler+0x260>)
 8001326:	488e      	ldr	r0, [pc, #568]	@ (8001560 <TIM6_DAC_IRQHandler+0x264>)
 8001328:	f003 fb48 	bl	80049bc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 32, 100);
 800132c:	2364      	movs	r3, #100	@ 0x64
 800132e:	2220      	movs	r2, #32
 8001330:	498b      	ldr	r1, [pc, #556]	@ (8001560 <TIM6_DAC_IRQHandler+0x264>)
 8001332:	488c      	ldr	r0, [pc, #560]	@ (8001564 <TIM6_DAC_IRQHandler+0x268>)
 8001334:	f002 ff66 	bl	8004204 <HAL_UART_Transmit>
		elevator_moving_counter++;
 8001338:	4b85      	ldr	r3, [pc, #532]	@ (8001550 <TIM6_DAC_IRQHandler+0x254>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b83      	ldr	r3, [pc, #524]	@ (8001550 <TIM6_DAC_IRQHandler+0x254>)
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e1d8      	b.n	80016f8 <TIM6_DAC_IRQHandler+0x3fc>
	} else {
		switch (floor_position) {
 8001346:	4b84      	ldr	r3, [pc, #528]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d012      	beq.n	8001374 <TIM6_DAC_IRQHandler+0x78>
 800134e:	2b03      	cmp	r3, #3
 8001350:	dc16      	bgt.n	8001380 <TIM6_DAC_IRQHandler+0x84>
 8001352:	2b01      	cmp	r3, #1
 8001354:	d002      	beq.n	800135c <TIM6_DAC_IRQHandler+0x60>
 8001356:	2b02      	cmp	r3, #2
 8001358:	d006      	beq.n	8001368 <TIM6_DAC_IRQHandler+0x6c>
 800135a:	e011      	b.n	8001380 <TIM6_DAC_IRQHandler+0x84>
		case 1:
			HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2101      	movs	r1, #1
 8001360:	4881      	ldr	r0, [pc, #516]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 8001362:	f000 fe61 	bl	8002028 <HAL_GPIO_WritePin>
			break;
 8001366:	e00b      	b.n	8001380 <TIM6_DAC_IRQHandler+0x84>
		case 2:
			HAL_GPIO_WritePin(PF2_GPIO_Port, PF2_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2102      	movs	r1, #2
 800136c:	487e      	ldr	r0, [pc, #504]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 800136e:	f000 fe5b 	bl	8002028 <HAL_GPIO_WritePin>
			break;
 8001372:	e005      	b.n	8001380 <TIM6_DAC_IRQHandler+0x84>
		case 3:
			HAL_GPIO_WritePin(PF3_GPIO_Port, PF3_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2104      	movs	r1, #4
 8001378:	487b      	ldr	r0, [pc, #492]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 800137a:	f000 fe55 	bl	8002028 <HAL_GPIO_WritePin>
			break;
 800137e:	bf00      	nop
		}
		if (elevator_direction == 'd') {
 8001380:	4b74      	ldr	r3, [pc, #464]	@ (8001554 <TIM6_DAC_IRQHandler+0x258>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b64      	cmp	r3, #100	@ 0x64
 8001386:	d106      	bne.n	8001396 <TIM6_DAC_IRQHandler+0x9a>
			floor_position--;
 8001388:	4b73      	ldr	r3, [pc, #460]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b71      	ldr	r3, [pc, #452]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e005      	b.n	80013a2 <TIM6_DAC_IRQHandler+0xa6>
		} else {
			floor_position++;
 8001396:	4b70      	ldr	r3, [pc, #448]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b6e      	ldr	r3, [pc, #440]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 80013a0:	701a      	strb	r2, [r3, #0]
		}
		switch (floor_position) {
 80013a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d012      	beq.n	80013d0 <TIM6_DAC_IRQHandler+0xd4>
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	dc16      	bgt.n	80013dc <TIM6_DAC_IRQHandler+0xe0>
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d002      	beq.n	80013b8 <TIM6_DAC_IRQHandler+0xbc>
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d006      	beq.n	80013c4 <TIM6_DAC_IRQHandler+0xc8>
 80013b6:	e011      	b.n	80013dc <TIM6_DAC_IRQHandler+0xe0>
		case 1:
			HAL_GPIO_WritePin(PF1_GPIO_Port, PF1_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2101      	movs	r1, #1
 80013bc:	486a      	ldr	r0, [pc, #424]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 80013be:	f000 fe33 	bl	8002028 <HAL_GPIO_WritePin>
			break;
 80013c2:	e00b      	b.n	80013dc <TIM6_DAC_IRQHandler+0xe0>
		case 2:
			HAL_GPIO_WritePin(PF2_GPIO_Port, PF2_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2102      	movs	r1, #2
 80013c8:	4867      	ldr	r0, [pc, #412]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 80013ca:	f000 fe2d 	bl	8002028 <HAL_GPIO_WritePin>
			break;
 80013ce:	e005      	b.n	80013dc <TIM6_DAC_IRQHandler+0xe0>
		case 3:
			HAL_GPIO_WritePin(PF3_GPIO_Port, PF3_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2104      	movs	r1, #4
 80013d4:	4864      	ldr	r0, [pc, #400]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 80013d6:	f000 fe27 	bl	8002028 <HAL_GPIO_WritePin>
			break;
 80013da:	bf00      	nop
		}


		elevator_moving_counter = 0;
 80013dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001550 <TIM6_DAC_IRQHandler+0x254>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
		sprintf(msgs, "ELEVATOR AT FLOOR %d\r\n", floor_position);
 80013e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4960      	ldr	r1, [pc, #384]	@ (800156c <TIM6_DAC_IRQHandler+0x270>)
 80013ea:	485d      	ldr	r0, [pc, #372]	@ (8001560 <TIM6_DAC_IRQHandler+0x264>)
 80013ec:	f003 fae6 	bl	80049bc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 21, 100);
 80013f0:	2364      	movs	r3, #100	@ 0x64
 80013f2:	2215      	movs	r2, #21
 80013f4:	495a      	ldr	r1, [pc, #360]	@ (8001560 <TIM6_DAC_IRQHandler+0x264>)
 80013f6:	485b      	ldr	r0, [pc, #364]	@ (8001564 <TIM6_DAC_IRQHandler+0x268>)
 80013f8:	f002 ff04 	bl	8004204 <HAL_UART_Transmit>

		if (floor_position == floor_destinations[0]) { // IF ELEVATOR HAS REACHED FIRST DESTINATION
 80013fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001570 <TIM6_DAC_IRQHandler+0x274>)
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	4b55      	ldr	r3, [pc, #340]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d15a      	bne.n	80014be <TIM6_DAC_IRQHandler+0x1c2>
			sprintf(msgs, "DESTINATION AT FLOOR %d REACHED\r\n", floor_position);
 8001408:	4b53      	ldr	r3, [pc, #332]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4959      	ldr	r1, [pc, #356]	@ (8001574 <TIM6_DAC_IRQHandler+0x278>)
 8001410:	4853      	ldr	r0, [pc, #332]	@ (8001560 <TIM6_DAC_IRQHandler+0x264>)
 8001412:	f003 fad3 	bl	80049bc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 32, 100);
 8001416:	2364      	movs	r3, #100	@ 0x64
 8001418:	2220      	movs	r2, #32
 800141a:	4951      	ldr	r1, [pc, #324]	@ (8001560 <TIM6_DAC_IRQHandler+0x264>)
 800141c:	4851      	ldr	r0, [pc, #324]	@ (8001564 <TIM6_DAC_IRQHandler+0x268>)
 800141e:	f002 fef1 	bl	8004204 <HAL_UART_Transmit>

			switch(floor_position) {
 8001422:	4b4d      	ldr	r3, [pc, #308]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d012      	beq.n	8001450 <TIM6_DAC_IRQHandler+0x154>
 800142a:	2b03      	cmp	r3, #3
 800142c:	dc16      	bgt.n	800145c <TIM6_DAC_IRQHandler+0x160>
 800142e:	2b01      	cmp	r3, #1
 8001430:	d002      	beq.n	8001438 <TIM6_DAC_IRQHandler+0x13c>
 8001432:	2b02      	cmp	r3, #2
 8001434:	d006      	beq.n	8001444 <TIM6_DAC_IRQHandler+0x148>
 8001436:	e011      	b.n	800145c <TIM6_DAC_IRQHandler+0x160>
			case 1:
				HAL_GPIO_WritePin(DF1_GPIO_Port, DF1_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2108      	movs	r1, #8
 800143c:	484a      	ldr	r0, [pc, #296]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 800143e:	f000 fdf3 	bl	8002028 <HAL_GPIO_WritePin>
				break;
 8001442:	e00b      	b.n	800145c <TIM6_DAC_IRQHandler+0x160>
			case 2:
				HAL_GPIO_WritePin(DF2_GPIO_Port, DF2_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2110      	movs	r1, #16
 8001448:	4847      	ldr	r0, [pc, #284]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 800144a:	f000 fded 	bl	8002028 <HAL_GPIO_WritePin>
				break;
 800144e:	e005      	b.n	800145c <TIM6_DAC_IRQHandler+0x160>
			case 3:
				HAL_GPIO_WritePin(DF3_GPIO_Port, DF3_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2120      	movs	r1, #32
 8001454:	4844      	ldr	r0, [pc, #272]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 8001456:	f000 fde7 	bl	8002028 <HAL_GPIO_WritePin>
				break;
 800145a:	bf00      	nop
			}

			HAL_GPIO_WritePin(elevator_direction == 'u' ? DU_GPIO_Port : DD_GPIO_Port, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 800145c:	4b3d      	ldr	r3, [pc, #244]	@ (8001554 <TIM6_DAC_IRQHandler+0x258>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b75      	cmp	r3, #117	@ 0x75
 8001462:	d101      	bne.n	8001468 <TIM6_DAC_IRQHandler+0x16c>
 8001464:	2340      	movs	r3, #64	@ 0x40
 8001466:	e000      	b.n	800146a <TIM6_DAC_IRQHandler+0x16e>
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	483e      	ldr	r0, [pc, #248]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 8001470:	f000 fdda 	bl	8002028 <HAL_GPIO_WritePin>
			if (floor_destinations[1] == 0) { // IF THERE ARE NO OTHER FLOOR DESTINATION REQUESTS
 8001474:	4b3e      	ldr	r3, [pc, #248]	@ (8001570 <TIM6_DAC_IRQHandler+0x274>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <TIM6_DAC_IRQHandler+0x188>
				floor_destinations[0] = 0;
 800147c:	4b3c      	ldr	r3, [pc, #240]	@ (8001570 <TIM6_DAC_IRQHandler+0x274>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e006      	b.n	8001492 <TIM6_DAC_IRQHandler+0x196>

			} else { // IF THERE IS ANOTHER FLOOR DESTINATION REQUEST
				floor_destinations[0] = floor_destinations[1];
 8001484:	4b3a      	ldr	r3, [pc, #232]	@ (8001570 <TIM6_DAC_IRQHandler+0x274>)
 8001486:	785a      	ldrb	r2, [r3, #1]
 8001488:	4b39      	ldr	r3, [pc, #228]	@ (8001570 <TIM6_DAC_IRQHandler+0x274>)
 800148a:	701a      	strb	r2, [r3, #0]
				floor_destinations[1] = 0;
 800148c:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <TIM6_DAC_IRQHandler+0x274>)
 800148e:	2200      	movs	r2, #0
 8001490:	705a      	strb	r2, [r3, #1]
				// CHECK FOR ANY INPUTS INSIDE ELEVATOR, ONLY ALLOW TO GO IN THE CURRENT DIRECTION
			}
//			HAL_TIM_Base_Stop_IT(&htim2);
//			start_timer = 0;
//			if (requests[0] || floor_destinations[0])		HAL_TIM_Base_Start_IT(&htim2);
			if (requests[0] || floor_destinations[0])	Reset_Timer(1, &htim2);
 8001492:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <TIM6_DAC_IRQHandler+0x27c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <TIM6_DAC_IRQHandler+0x1a6>
 800149a:	4b35      	ldr	r3, [pc, #212]	@ (8001570 <TIM6_DAC_IRQHandler+0x274>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <TIM6_DAC_IRQHandler+0x1ae>
 80014a2:	4936      	ldr	r1, [pc, #216]	@ (800157c <TIM6_DAC_IRQHandler+0x280>)
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 f94b 	bl	8001740 <Reset_Timer>
			count = 0;
 80014aa:	4b35      	ldr	r3, [pc, #212]	@ (8001580 <TIM6_DAC_IRQHandler+0x284>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 80014b0:	4834      	ldr	r0, [pc, #208]	@ (8001584 <TIM6_DAC_IRQHandler+0x288>)
 80014b2:	f002 fa4b 	bl	800394c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Stop_IT(&htim6);
 80014b6:	4834      	ldr	r0, [pc, #208]	@ (8001588 <TIM6_DAC_IRQHandler+0x28c>)
 80014b8:	f002 fa9c 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
 80014bc:	e11c      	b.n	80016f8 <TIM6_DAC_IRQHandler+0x3fc>

		} else if (floor_position == serving && traveling) {
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b32      	ldr	r3, [pc, #200]	@ (800158c <TIM6_DAC_IRQHandler+0x290>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	f040 8089 	bne.w	80015de <TIM6_DAC_IRQHandler+0x2e2>
 80014cc:	4b30      	ldr	r3, [pc, #192]	@ (8001590 <TIM6_DAC_IRQHandler+0x294>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8084 	beq.w	80015de <TIM6_DAC_IRQHandler+0x2e2>
			sprintf(msgs, "REQUEST AT FLOOR %d REACHED\r\n", floor_position);
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <TIM6_DAC_IRQHandler+0x25c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	492d      	ldr	r1, [pc, #180]	@ (8001594 <TIM6_DAC_IRQHandler+0x298>)
 80014de:	4820      	ldr	r0, [pc, #128]	@ (8001560 <TIM6_DAC_IRQHandler+0x264>)
 80014e0:	f003 fa6c 	bl	80049bc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 28, 100);
 80014e4:	2364      	movs	r3, #100	@ 0x64
 80014e6:	221c      	movs	r2, #28
 80014e8:	491d      	ldr	r1, [pc, #116]	@ (8001560 <TIM6_DAC_IRQHandler+0x264>)
 80014ea:	481e      	ldr	r0, [pc, #120]	@ (8001564 <TIM6_DAC_IRQHandler+0x268>)
 80014ec:	f002 fe8a 	bl	8004204 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(elevator_direction == 'u' ? DU_GPIO_Port : DD_GPIO_Port, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_RESET);
 80014f0:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <TIM6_DAC_IRQHandler+0x258>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b75      	cmp	r3, #117	@ 0x75
 80014f6:	d101      	bne.n	80014fc <TIM6_DAC_IRQHandler+0x200>
 80014f8:	2340      	movs	r3, #64	@ 0x40
 80014fa:	e000      	b.n	80014fe <TIM6_DAC_IRQHandler+0x202>
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	4819      	ldr	r0, [pc, #100]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 8001504:	f000 fd90 	bl	8002028 <HAL_GPIO_WritePin>
			traveling = 0;
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <TIM6_DAC_IRQHandler+0x294>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
			switch(serving) {
 800150e:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <TIM6_DAC_IRQHandler+0x290>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d042      	beq.n	800159c <TIM6_DAC_IRQHandler+0x2a0>
 8001516:	2b03      	cmp	r3, #3
 8001518:	dc4a      	bgt.n	80015b0 <TIM6_DAC_IRQHandler+0x2b4>
 800151a:	2b01      	cmp	r3, #1
 800151c:	d002      	beq.n	8001524 <TIM6_DAC_IRQHandler+0x228>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d00a      	beq.n	8001538 <TIM6_DAC_IRQHandler+0x23c>
 8001522:	e045      	b.n	80015b0 <TIM6_DAC_IRQHandler+0x2b4>
			  case 1:
				  elevator_direction = 'u';
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <TIM6_DAC_IRQHandler+0x258>)
 8001526:	2275      	movs	r2, #117	@ 0x75
 8001528:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001530:	480d      	ldr	r0, [pc, #52]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 8001532:	f000 fd79 	bl	8002028 <HAL_GPIO_WritePin>
				  break;
 8001536:	e03b      	b.n	80015b0 <TIM6_DAC_IRQHandler+0x2b4>
			  case 2:
				  elevator_direction = floor_requests[1].direction;
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <TIM6_DAC_IRQHandler+0x29c>)
 800153a:	78da      	ldrb	r2, [r3, #3]
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <TIM6_DAC_IRQHandler+0x258>)
 800153e:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001546:	4808      	ldr	r0, [pc, #32]	@ (8001568 <TIM6_DAC_IRQHandler+0x26c>)
 8001548:	f000 fd6e 	bl	8002028 <HAL_GPIO_WritePin>
				  break;
 800154c:	e030      	b.n	80015b0 <TIM6_DAC_IRQHandler+0x2b4>
 800154e:	bf00      	nop
 8001550:	20000220 	.word	0x20000220
 8001554:	20000212 	.word	0x20000212
 8001558:	20000213 	.word	0x20000213
 800155c:	08005340 	.word	0x08005340
 8001560:	20000224 	.word	0x20000224
 8001564:	2000015c 	.word	0x2000015c
 8001568:	48000800 	.word	0x48000800
 800156c:	08005364 	.word	0x08005364
 8001570:	20000214 	.word	0x20000214
 8001574:	0800537c 	.word	0x0800537c
 8001578:	20000218 	.word	0x20000218
 800157c:	20000078 	.word	0x20000078
 8001580:	2000021f 	.word	0x2000021f
 8001584:	20000110 	.word	0x20000110
 8001588:	200000c4 	.word	0x200000c4
 800158c:	2000021c 	.word	0x2000021c
 8001590:	2000021e 	.word	0x2000021e
 8001594:	080053a0 	.word	0x080053a0
 8001598:	2000020c 	.word	0x2000020c
			  case 3:
				  elevator_direction = 'd';
 800159c:	4b5a      	ldr	r3, [pc, #360]	@ (8001708 <TIM6_DAC_IRQHandler+0x40c>)
 800159e:	2264      	movs	r2, #100	@ 0x64
 80015a0:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015a8:	4858      	ldr	r0, [pc, #352]	@ (800170c <TIM6_DAC_IRQHandler+0x410>)
 80015aa:	f000 fd3d 	bl	8002028 <HAL_GPIO_WritePin>
				  break;
 80015ae:	bf00      	nop
			  }
			HAL_TIM_Base_Stop_IT(&htim2);
 80015b0:	4857      	ldr	r0, [pc, #348]	@ (8001710 <TIM6_DAC_IRQHandler+0x414>)
 80015b2:	f002 fa1f 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
			start_timer = 0;
 80015b6:	4b57      	ldr	r3, [pc, #348]	@ (8001714 <TIM6_DAC_IRQHandler+0x418>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
			if (requests[0])		HAL_TIM_Base_Start_IT(&htim2);
 80015bc:	4b56      	ldr	r3, [pc, #344]	@ (8001718 <TIM6_DAC_IRQHandler+0x41c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <TIM6_DAC_IRQHandler+0x2ce>
 80015c4:	4852      	ldr	r0, [pc, #328]	@ (8001710 <TIM6_DAC_IRQHandler+0x414>)
 80015c6:	f002 f9c1 	bl	800394c <HAL_TIM_Base_Start_IT>
			count = 0;
 80015ca:	4b54      	ldr	r3, [pc, #336]	@ (800171c <TIM6_DAC_IRQHandler+0x420>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 80015d0:	4853      	ldr	r0, [pc, #332]	@ (8001720 <TIM6_DAC_IRQHandler+0x424>)
 80015d2:	f002 f9bb 	bl	800394c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Stop_IT(&htim6);
 80015d6:	4853      	ldr	r0, [pc, #332]	@ (8001724 <TIM6_DAC_IRQHandler+0x428>)
 80015d8:	f002 fa0c 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
 80015dc:	e08c      	b.n	80016f8 <TIM6_DAC_IRQHandler+0x3fc>
		} else {
			// CHECK IF THERE ARE ANY REQUESTS AT THAT FLOOR GOING IN THE SAME DIRECTION AS THE ELEVATOR, AND SERVICE THEM IF SO
			uint8_t floor_requested = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
			switch(floor_position) {
 80015e2:	4b51      	ldr	r3, [pc, #324]	@ (8001728 <TIM6_DAC_IRQHandler+0x42c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d035      	beq.n	8001656 <TIM6_DAC_IRQHandler+0x35a>
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	dc45      	bgt.n	800167a <TIM6_DAC_IRQHandler+0x37e>
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d002      	beq.n	80015f8 <TIM6_DAC_IRQHandler+0x2fc>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d00d      	beq.n	8001612 <TIM6_DAC_IRQHandler+0x316>
 80015f6:	e040      	b.n	800167a <TIM6_DAC_IRQHandler+0x37e>
			case 1:
				if (floor_requests[0].requested) {
 80015f8:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <TIM6_DAC_IRQHandler+0x430>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d037      	beq.n	8001670 <TIM6_DAC_IRQHandler+0x374>
					HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001606:	4841      	ldr	r0, [pc, #260]	@ (800170c <TIM6_DAC_IRQHandler+0x410>)
 8001608:	f000 fd0e 	bl	8002028 <HAL_GPIO_WritePin>
					floor_requested = 1;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001610:	e02e      	b.n	8001670 <TIM6_DAC_IRQHandler+0x374>
			case 2:
				if (floor_requests[1].requested && floor_requests[1].direction == elevator_direction) {
 8001612:	4b46      	ldr	r3, [pc, #280]	@ (800172c <TIM6_DAC_IRQHandler+0x430>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d02c      	beq.n	8001674 <TIM6_DAC_IRQHandler+0x378>
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <TIM6_DAC_IRQHandler+0x430>)
 800161c:	78da      	ldrb	r2, [r3, #3]
 800161e:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <TIM6_DAC_IRQHandler+0x40c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d126      	bne.n	8001674 <TIM6_DAC_IRQHandler+0x378>
					sprintf(msgs, "%c %c\r\n", elevator_direction, floor_requests[1].direction);
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <TIM6_DAC_IRQHandler+0x40c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <TIM6_DAC_IRQHandler+0x430>)
 800162e:	78db      	ldrb	r3, [r3, #3]
 8001630:	493f      	ldr	r1, [pc, #252]	@ (8001730 <TIM6_DAC_IRQHandler+0x434>)
 8001632:	4840      	ldr	r0, [pc, #256]	@ (8001734 <TIM6_DAC_IRQHandler+0x438>)
 8001634:	f003 f9c2 	bl	80049bc <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*) msgs, 5, 100);
 8001638:	2364      	movs	r3, #100	@ 0x64
 800163a:	2205      	movs	r2, #5
 800163c:	493d      	ldr	r1, [pc, #244]	@ (8001734 <TIM6_DAC_IRQHandler+0x438>)
 800163e:	483e      	ldr	r0, [pc, #248]	@ (8001738 <TIM6_DAC_IRQHandler+0x43c>)
 8001640:	f002 fde0 	bl	8004204 <HAL_UART_Transmit>
					HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800164a:	4830      	ldr	r0, [pc, #192]	@ (800170c <TIM6_DAC_IRQHandler+0x410>)
 800164c:	f000 fcec 	bl	8002028 <HAL_GPIO_WritePin>
					floor_requested = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001654:	e00e      	b.n	8001674 <TIM6_DAC_IRQHandler+0x378>
			case 3:
				if (floor_requests[2].requested) {
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <TIM6_DAC_IRQHandler+0x430>)
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <TIM6_DAC_IRQHandler+0x37c>
					HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001664:	4829      	ldr	r0, [pc, #164]	@ (800170c <TIM6_DAC_IRQHandler+0x410>)
 8001666:	f000 fcdf 	bl	8002028 <HAL_GPIO_WritePin>
					floor_requested = 3;
 800166a:	2303      	movs	r3, #3
 800166c:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800166e:	e003      	b.n	8001678 <TIM6_DAC_IRQHandler+0x37c>
				break;
 8001670:	bf00      	nop
 8001672:	e002      	b.n	800167a <TIM6_DAC_IRQHandler+0x37e>
				break;
 8001674:	bf00      	nop
 8001676:	e000      	b.n	800167a <TIM6_DAC_IRQHandler+0x37e>
				break;
 8001678:	bf00      	nop
			}

			if (floor_requested) {
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d025      	beq.n	80016cc <TIM6_DAC_IRQHandler+0x3d0>
				for (int i = 0; i < 3; i++) {
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	e01f      	b.n	80016c6 <TIM6_DAC_IRQHandler+0x3ca>
					if (requests[i] == floor_requested) {
 8001686:	4a24      	ldr	r2, [pc, #144]	@ (8001718 <TIM6_DAC_IRQHandler+0x41c>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	429a      	cmp	r2, r3
 8001692:	d115      	bne.n	80016c0 <TIM6_DAC_IRQHandler+0x3c4>
						for (int k = i; k < 2; k++) {
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	e00b      	b.n	80016b2 <TIM6_DAC_IRQHandler+0x3b6>
							requests[k] = requests[k + 1];
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	4a1e      	ldr	r2, [pc, #120]	@ (8001718 <TIM6_DAC_IRQHandler+0x41c>)
 80016a0:	5cd1      	ldrb	r1, [r2, r3]
 80016a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001718 <TIM6_DAC_IRQHandler+0x41c>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	460a      	mov	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
						for (int k = i; k < 2; k++) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3301      	adds	r3, #1
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	ddf0      	ble.n	800169a <TIM6_DAC_IRQHandler+0x39e>
						}
						requests[3] = 0;
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <TIM6_DAC_IRQHandler+0x41c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	70da      	strb	r2, [r3, #3]
						break;
 80016be:	e005      	b.n	80016cc <TIM6_DAC_IRQHandler+0x3d0>
				for (int i = 0; i < 3; i++) {
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	dddc      	ble.n	8001686 <TIM6_DAC_IRQHandler+0x38a>
					}
				}
			}

			if (traveling) {
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <TIM6_DAC_IRQHandler+0x440>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d111      	bne.n	80016f8 <TIM6_DAC_IRQHandler+0x3fc>

			} else {
				count = 0;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <TIM6_DAC_IRQHandler+0x420>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80016da:	480d      	ldr	r0, [pc, #52]	@ (8001710 <TIM6_DAC_IRQHandler+0x414>)
 80016dc:	f002 f98a 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
				start_timer = 0;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <TIM6_DAC_IRQHandler+0x418>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 80016e6:	480a      	ldr	r0, [pc, #40]	@ (8001710 <TIM6_DAC_IRQHandler+0x414>)
 80016e8:	f002 f930 	bl	800394c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim15);
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <TIM6_DAC_IRQHandler+0x424>)
 80016ee:	f002 f92d 	bl	800394c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 80016f2:	480c      	ldr	r0, [pc, #48]	@ (8001724 <TIM6_DAC_IRQHandler+0x428>)
 80016f4:	f002 f97e 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f8:	480a      	ldr	r0, [pc, #40]	@ (8001724 <TIM6_DAC_IRQHandler+0x428>)
 80016fa:	f002 f9aa 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000212 	.word	0x20000212
 800170c:	48000800 	.word	0x48000800
 8001710:	20000078 	.word	0x20000078
 8001714:	2000021d 	.word	0x2000021d
 8001718:	20000218 	.word	0x20000218
 800171c:	2000021f 	.word	0x2000021f
 8001720:	20000110 	.word	0x20000110
 8001724:	200000c4 	.word	0x200000c4
 8001728:	20000213 	.word	0x20000213
 800172c:	2000020c 	.word	0x2000020c
 8001730:	080053c0 	.word	0x080053c0
 8001734:	20000224 	.word	0x20000224
 8001738:	2000015c 	.word	0x2000015c
 800173c:	2000021e 	.word	0x2000021e

08001740 <Reset_Timer>:
//	if (htim->Instance == TIM2) {
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	}
//}

void Reset_Timer(int num, ...) {
 8001740:	b40f      	push	{r0, r1, r2, r3}
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
	va_list arg_list;
	va_start(arg_list, num);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < num; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	e025      	b.n	80017a0 <Reset_Timer+0x60>
		if (va_arg(arg_list, TIM_HandleTypeDef*)->Instance == TIM2) {
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	603a      	str	r2, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001762:	d109      	bne.n	8001778 <Reset_Timer+0x38>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001764:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <Reset_Timer+0x78>)
 8001766:	f002 f945 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
			start_timer = 0;
 800176a:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <Reset_Timer+0x7c>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001770:	4811      	ldr	r0, [pc, #68]	@ (80017b8 <Reset_Timer+0x78>)
 8001772:	f002 f8eb 	bl	800394c <HAL_TIM_Base_Start_IT>
 8001776:	e010      	b.n	800179a <Reset_Timer+0x5a>
		} else if (va_arg(arg_list, TIM_HandleTypeDef*)->Instance == TIM15) {
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	1d1a      	adds	r2, r3, #4
 800177c:	603a      	str	r2, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a0f      	ldr	r2, [pc, #60]	@ (80017c0 <Reset_Timer+0x80>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d108      	bne.n	800179a <Reset_Timer+0x5a>
			HAL_TIM_Base_Stop_IT(&htim15);
 8001788:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <Reset_Timer+0x84>)
 800178a:	f002 f933 	bl	80039f4 <HAL_TIM_Base_Stop_IT>
			count = 0;
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <Reset_Timer+0x88>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim15);
 8001794:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <Reset_Timer+0x84>)
 8001796:	f002 f8d9 	bl	800394c <HAL_TIM_Base_Start_IT>
	for (int i = 0; i < num; i++) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbd5      	blt.n	8001754 <Reset_Timer+0x14>
		}
	}
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017b4:	b004      	add	sp, #16
 80017b6:	4770      	bx	lr
 80017b8:	20000078 	.word	0x20000078
 80017bc:	2000021d 	.word	0x2000021d
 80017c0:	40014000 	.word	0x40014000
 80017c4:	20000110 	.word	0x20000110
 80017c8:	2000021f 	.word	0x2000021f

080017cc <Choose_Floor_To_Service>:

void Choose_Floor_To_Service(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	// IF there is at least one floor requests and if we are not serving
	if (requests[0] && !serving) {
 80017d2:	4b40      	ldr	r3, [pc, #256]	@ (80018d4 <Choose_Floor_To_Service+0x108>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d077      	beq.n	80018ca <Choose_Floor_To_Service+0xfe>
 80017da:	4b3f      	ldr	r3, [pc, #252]	@ (80018d8 <Choose_Floor_To_Service+0x10c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d173      	bne.n	80018ca <Choose_Floor_To_Service+0xfe>
		serving = requests[0];
 80017e2:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <Choose_Floor_To_Service+0x108>)
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	4b3c      	ldr	r3, [pc, #240]	@ (80018d8 <Choose_Floor_To_Service+0x10c>)
 80017e8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 2; i++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	e00b      	b.n	8001808 <Choose_Floor_To_Service+0x3c>
			requests[i] = requests[i + 1];
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <Choose_Floor_To_Service+0x108>)
 80017f6:	5cd1      	ldrb	r1, [r2, r3]
 80017f8:	4a36      	ldr	r2, [pc, #216]	@ (80018d4 <Choose_Floor_To_Service+0x108>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	460a      	mov	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 2; i++) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	ddf0      	ble.n	80017f0 <Choose_Floor_To_Service+0x24>
		}
		requests[2] = 0;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <Choose_Floor_To_Service+0x108>)
 8001810:	2200      	movs	r2, #0
 8001812:	709a      	strb	r2, [r3, #2]

		// CASE 1
		// IF the elevator's floor position matches with the floor that we are serving
		if (floor_position == serving) {
 8001814:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <Choose_Floor_To_Service+0x110>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <Choose_Floor_To_Service+0x10c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d12d      	bne.n	800187c <Choose_Floor_To_Service+0xb0>
			switch(serving) {
 8001820:	4b2d      	ldr	r3, [pc, #180]	@ (80018d8 <Choose_Floor_To_Service+0x10c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d01b      	beq.n	8001860 <Choose_Floor_To_Service+0x94>
 8001828:	2b03      	cmp	r3, #3
 800182a:	dc23      	bgt.n	8001874 <Choose_Floor_To_Service+0xa8>
 800182c:	2b01      	cmp	r3, #1
 800182e:	d002      	beq.n	8001836 <Choose_Floor_To_Service+0x6a>
 8001830:	2b02      	cmp	r3, #2
 8001832:	d00a      	beq.n	800184a <Choose_Floor_To_Service+0x7e>
 8001834:	e01e      	b.n	8001874 <Choose_Floor_To_Service+0xa8>
			case 1:
				elevator_direction = 'u';
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <Choose_Floor_To_Service+0x114>)
 8001838:	2275      	movs	r2, #117	@ 0x75
 800183a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR1_GPIO_Port, FR1_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001842:	4828      	ldr	r0, [pc, #160]	@ (80018e4 <Choose_Floor_To_Service+0x118>)
 8001844:	f000 fbf0 	bl	8002028 <HAL_GPIO_WritePin>
				break;
 8001848:	e014      	b.n	8001874 <Choose_Floor_To_Service+0xa8>
			case 2:
				elevator_direction = floor_requests[1].direction;
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <Choose_Floor_To_Service+0x11c>)
 800184c:	78da      	ldrb	r2, [r3, #3]
 800184e:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <Choose_Floor_To_Service+0x114>)
 8001850:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR2_GPIO_Port, FR2_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001858:	4822      	ldr	r0, [pc, #136]	@ (80018e4 <Choose_Floor_To_Service+0x118>)
 800185a:	f000 fbe5 	bl	8002028 <HAL_GPIO_WritePin>
				break;
 800185e:	e009      	b.n	8001874 <Choose_Floor_To_Service+0xa8>
			case 3:
				elevator_direction = 'd';
 8001860:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <Choose_Floor_To_Service+0x114>)
 8001862:	2264      	movs	r2, #100	@ 0x64
 8001864:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(FR3_GPIO_Port, FR3_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800186c:	481d      	ldr	r0, [pc, #116]	@ (80018e4 <Choose_Floor_To_Service+0x118>)
 800186e:	f000 fbdb 	bl	8002028 <HAL_GPIO_WritePin>
				break;
 8001872:	bf00      	nop
			}

			HAL_TIM_Base_Start_IT(&htim15);
 8001874:	481d      	ldr	r0, [pc, #116]	@ (80018ec <Choose_Floor_To_Service+0x120>)
 8001876:	f002 f869 	bl	800394c <HAL_TIM_Base_Start_IT>
		  }
	}

//	// IF there is at least 1 floor request and if the elevator is either not serving or it is serving and the current floor position ma
//	if (requests[0] != 0 && (!serving || (serving && floor_position == requests[0]))) {
}
 800187a:	e026      	b.n	80018ca <Choose_Floor_To_Service+0xfe>
		  else if (!traveling && floor_position != serving) {
 800187c:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <Choose_Floor_To_Service+0x124>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d122      	bne.n	80018ca <Choose_Floor_To_Service+0xfe>
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <Choose_Floor_To_Service+0x110>)
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <Choose_Floor_To_Service+0x10c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d01c      	beq.n	80018ca <Choose_Floor_To_Service+0xfe>
			  traveling = 1;
 8001890:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <Choose_Floor_To_Service+0x124>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
			  elevator_direction = floor_position > serving ? 'd' : 'u';
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <Choose_Floor_To_Service+0x110>)
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <Choose_Floor_To_Service+0x10c>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d901      	bls.n	80018a6 <Choose_Floor_To_Service+0xda>
 80018a2:	2264      	movs	r2, #100	@ 0x64
 80018a4:	e000      	b.n	80018a8 <Choose_Floor_To_Service+0xdc>
 80018a6:	2275      	movs	r2, #117	@ 0x75
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <Choose_Floor_To_Service+0x114>)
 80018aa:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, elevator_direction == 'u' ? DU_Pin : DD_Pin, GPIO_PIN_SET);
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <Choose_Floor_To_Service+0x114>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b75      	cmp	r3, #117	@ 0x75
 80018b2:	d101      	bne.n	80018b8 <Choose_Floor_To_Service+0xec>
 80018b4:	2340      	movs	r3, #64	@ 0x40
 80018b6:	e000      	b.n	80018ba <Choose_Floor_To_Service+0xee>
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	2201      	movs	r2, #1
 80018bc:	4619      	mov	r1, r3
 80018be:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <Choose_Floor_To_Service+0x118>)
 80018c0:	f000 fbb2 	bl	8002028 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim6);
 80018c4:	480b      	ldr	r0, [pc, #44]	@ (80018f4 <Choose_Floor_To_Service+0x128>)
 80018c6:	f002 f841 	bl	800394c <HAL_TIM_Base_Start_IT>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000218 	.word	0x20000218
 80018d8:	2000021c 	.word	0x2000021c
 80018dc:	20000213 	.word	0x20000213
 80018e0:	20000212 	.word	0x20000212
 80018e4:	48000800 	.word	0x48000800
 80018e8:	2000020c 	.word	0x2000020c
 80018ec:	20000110 	.word	0x20000110
 80018f0:	2000021e 	.word	0x2000021e
 80018f4:	200000c4 	.word	0x200000c4

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f003 f870 	bl	8004a0c <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20004000 	.word	0x20004000
 8001958:	00000400 	.word	0x00000400
 800195c:	20000258 	.word	0x20000258
 8001960:	200003a8 	.word	0x200003a8

08001964 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800198c:	f7ff ffea 	bl	8001964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	@ (80019c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <LoopForever+0xe>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	@ (80019d4 <LoopForever+0x16>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f003 f82f 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ba:	f7fe fc59 	bl	8000270 <main>

080019be <LoopForever>:

LoopForever:
    b LoopForever
 80019be:	e7fe      	b.n	80019be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019c0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019cc:	08005444 	.word	0x08005444
  ldr r2, =_sbss
 80019d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80019d4:	200003a8 	.word	0x200003a8

080019d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC1_IRQHandler>
	...

080019dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_Init+0x28>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_Init+0x28>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 f94f 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f000 f808 	bl	8001a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff f804 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40022000 	.word	0x40022000

08001a08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_InitTick+0x54>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x58>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f967 	bl	8001cfa <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00e      	b.n	8001a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d80a      	bhi.n	8001a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f000 f92f 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4a06      	ldr	r2, [pc, #24]	@ (8001a64 <HAL_InitTick+0x5c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	@ (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	2000025c 	.word	0x2000025c

08001a90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2000025c 	.word	0x2000025c

08001aa8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000008 	.word	0x20000008

08001af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	@ (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	@ (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	@ 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff8e 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff29 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff3e 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff8e 	bl	8001be4 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5d 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff31 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa2 	bl	8001c4c <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e14e      	b.n	8001fc2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8140 	beq.w	8001fbc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d005      	beq.n	8001d54 <HAL_GPIO_Init+0x40>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d130      	bne.n	8001db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	f003 0201 	and.w	r2, r3, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d017      	beq.n	8001df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d123      	bne.n	8001e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	6939      	ldr	r1, [r7, #16]
 8001e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0203 	and.w	r2, r3, #3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 809a 	beq.w	8001fbc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e88:	4b55      	ldr	r3, [pc, #340]	@ (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a54      	ldr	r2, [pc, #336]	@ (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b52      	ldr	r3, [pc, #328]	@ (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ea0:	4a50      	ldr	r2, [pc, #320]	@ (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eca:	d013      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a46      	ldr	r2, [pc, #280]	@ (8001fe8 <HAL_GPIO_Init+0x2d4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1dc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a45      	ldr	r2, [pc, #276]	@ (8001fec <HAL_GPIO_Init+0x2d8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1d8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a44      	ldr	r2, [pc, #272]	@ (8001ff0 <HAL_GPIO_Init+0x2dc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1d4>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e006      	b.n	8001ef6 <HAL_GPIO_Init+0x1e2>
 8001ee8:	2305      	movs	r3, #5
 8001eea:	e004      	b.n	8001ef6 <HAL_GPIO_Init+0x1e2>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x1e2>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_GPIO_Init+0x1e2>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f06:	4937      	ldr	r1, [pc, #220]	@ (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f14:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f38:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f62:	4a24      	ldr	r2, [pc, #144]	@ (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f68:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f8c:	4a19      	ldr	r2, [pc, #100]	@ (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f aea9 	bne.w	8001d24 <HAL_GPIO_Init+0x10>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	48000400 	.word	0x48000400
 8001fec:	48000800 	.word	0x48000800
 8001ff0:	48000c00 	.word	0x48000c00
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e001      	b.n	800201a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002044:	e002      	b.n	800204c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43d9      	mvns	r1, r3
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	400b      	ands	r3, r1
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fc0a 	bl	80008c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	f001 b823 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 817d 	beq.w	80023f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020f8:	4bbc      	ldr	r3, [pc, #752]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b04      	cmp	r3, #4
 8002102:	d00c      	beq.n	800211e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002104:	4bb9      	ldr	r3, [pc, #740]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d15c      	bne.n	80021ca <HAL_RCC_OscConfig+0x10e>
 8002110:	4bb6      	ldr	r3, [pc, #728]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800211c:	d155      	bne.n	80021ca <HAL_RCC_OscConfig+0x10e>
 800211e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002122:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002132:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_RCC_OscConfig+0x94>
 800214a:	4ba8      	ldr	r3, [pc, #672]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e015      	b.n	800217c <HAL_RCC_OscConfig+0xc0>
 8002150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002154:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002168:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800216c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002178:	4b9c      	ldr	r3, [pc, #624]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002180:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002184:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002190:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f002 021f 	and.w	r2, r2, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 811f 	beq.w	80023f0 <HAL_RCC_OscConfig+0x334>
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 8116 	bne.w	80023f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f000 bfaf 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x12e>
 80021dc:	4b83      	ldr	r3, [pc, #524]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a82      	ldr	r2, [pc, #520]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e036      	b.n	8002258 <HAL_RCC_OscConfig+0x19c>
 80021ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x158>
 80021fa:	4b7c      	ldr	r3, [pc, #496]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7b      	ldr	r2, [pc, #492]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b79      	ldr	r3, [pc, #484]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a78      	ldr	r2, [pc, #480]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e021      	b.n	8002258 <HAL_RCC_OscConfig+0x19c>
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x184>
 8002226:	4b71      	ldr	r3, [pc, #452]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a70      	ldr	r2, [pc, #448]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6e      	ldr	r3, [pc, #440]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6d      	ldr	r2, [pc, #436]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0x19c>
 8002240:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a69      	ldr	r2, [pc, #420]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b67      	ldr	r3, [pc, #412]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a66      	ldr	r2, [pc, #408]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002256:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002258:	4b64      	ldr	r3, [pc, #400]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	f023 020f 	bic.w	r2, r3, #15
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	495f      	ldr	r1, [pc, #380]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 800226e:	4313      	orrs	r3, r2
 8002270:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d059      	beq.n	8002336 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fc05 	bl	8001a90 <HAL_GetTick>
 8002286:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fc00 	bl	8001a90 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	@ 0x64
 800229a:	d902      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	f000 bf43 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 80022a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80022b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0x218>
 80022ce:	4b47      	ldr	r3, [pc, #284]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	e015      	b.n	8002300 <HAL_RCC_OscConfig+0x244>
 80022d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022d8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80022e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80022f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80022fc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002304:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002308:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800230c:	fa92 f2a2 	rbit	r2, r2
 8002310:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002314:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f042 0220 	orr.w	r2, r2, #32
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f002 021f 	and.w	r2, r2, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f202 	lsl.w	r2, r1, r2
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ab      	beq.n	800228c <HAL_RCC_OscConfig+0x1d0>
 8002334:	e05d      	b.n	80023f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff fbab 	bl	8001a90 <HAL_GetTick>
 800233a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff fba6 	bl	8001a90 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	@ 0x64
 800234e:	d902      	bls.n	8002356 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	f000 bee9 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 8002356:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800235a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800236a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_RCC_OscConfig+0x2cc>
 8002382:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e015      	b.n	80023b4 <HAL_RCC_OscConfig+0x2f8>
 8002388:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800238c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800239c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023a0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80023a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80023b0:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023b8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80023bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80023c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f002 021f 	and.w	r2, r2, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ab      	bne.n	8002340 <HAL_RCC_OscConfig+0x284>
 80023e8:	e003      	b.n	80023f2 <HAL_RCC_OscConfig+0x336>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 817d 	beq.w	8002702 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002408:	4ba6      	ldr	r3, [pc, #664]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002414:	4ba3      	ldr	r3, [pc, #652]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d172      	bne.n	8002506 <HAL_RCC_OscConfig+0x44a>
 8002420:	4ba0      	ldr	r3, [pc, #640]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d16c      	bne.n	8002506 <HAL_RCC_OscConfig+0x44a>
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800243e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <HAL_RCC_OscConfig+0x3a0>
 8002456:	4b93      	ldr	r3, [pc, #588]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	e013      	b.n	8002484 <HAL_RCC_OscConfig+0x3c8>
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002474:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002480:	4b88      	ldr	r3, [pc, #544]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	2202      	movs	r2, #2
 8002486:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800248a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800248e:	fa92 f2a2 	rbit	r2, r2
 8002492:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002496:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f042 0220 	orr.w	r2, r2, #32
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f002 021f 	and.w	r2, r2, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCC_OscConfig+0x410>
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d002      	beq.n	80024cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f000 be2e 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b75      	ldr	r3, [pc, #468]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	21f8      	movs	r1, #248	@ 0xf8
 80024e2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80024ea:	fa91 f1a1 	rbit	r1, r1
 80024ee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80024f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80024f6:	fab1 f181 	clz	r1, r1
 80024fa:	b2c9      	uxtb	r1, r1
 80024fc:	408b      	lsls	r3, r1
 80024fe:	4969      	ldr	r1, [pc, #420]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002504:	e0fd      	b.n	8002702 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8088 	beq.w	8002628 <HAL_RCC_OscConfig+0x56c>
 8002518:	2301      	movs	r3, #1
 800251a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800252a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002538:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	461a      	mov	r2, r3
 8002540:	2301      	movs	r3, #1
 8002542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff faa4 	bl	8001a90 <HAL_GetTick>
 8002548:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff fa9f 	bl	8001a90 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	f000 bde2 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002576:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0x4d8>
 800258e:	4b45      	ldr	r3, [pc, #276]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e013      	b.n	80025bc <HAL_RCC_OscConfig+0x500>
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80025ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80025b8:	4b3a      	ldr	r3, [pc, #232]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	2202      	movs	r2, #2
 80025be:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80025c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80025c6:	fa92 f2a2 	rbit	r2, r2
 80025ca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80025ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f042 0220 	orr.w	r2, r2, #32
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f002 021f 	and.w	r2, r2, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0af      	beq.n	800254e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b2d      	ldr	r3, [pc, #180]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	21f8      	movs	r1, #248	@ 0xf8
 8002604:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800260c:	fa91 f1a1 	rbit	r1, r1
 8002610:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002614:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002618:	fab1 f181 	clz	r1, r1
 800261c:	b2c9      	uxtb	r1, r1
 800261e:	408b      	lsls	r3, r1
 8002620:	4920      	ldr	r1, [pc, #128]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
 8002626:	e06c      	b.n	8002702 <HAL_RCC_OscConfig+0x646>
 8002628:	2301      	movs	r3, #1
 800262a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800263a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002648:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	461a      	mov	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff fa1c 	bl	8001a90 <HAL_GetTick>
 8002658:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff fa17 	bl	8001a90 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d902      	bls.n	8002674 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	f000 bd5a 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002686:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d104      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5ec>
 800269e:	4b01      	ldr	r3, [pc, #4]	@ (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e015      	b.n	80026d0 <HAL_RCC_OscConfig+0x614>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	2302      	movs	r3, #2
 80026aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80026c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80026cc:	4bc8      	ldr	r3, [pc, #800]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	2202      	movs	r2, #2
 80026d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80026d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80026da:	fa92 f2a2 	rbit	r2, r2
 80026de:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80026e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80026e6:	fab2 f282 	clz	r2, r2
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f042 0220 	orr.w	r2, r2, #32
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	f002 021f 	and.w	r2, r2, #31
 80026f6:	2101      	movs	r1, #1
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ad      	bne.n	800265e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8110 	beq.w	8002938 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d079      	beq.n	800281c <HAL_RCC_OscConfig+0x760>
 8002728:	2301      	movs	r3, #1
 800272a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800273a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4bab      	ldr	r3, [pc, #684]	@ (80029f4 <HAL_RCC_OscConfig+0x938>)
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	461a      	mov	r2, r3
 800274e:	2301      	movs	r3, #1
 8002750:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7ff f99d 	bl	8001a90 <HAL_GetTick>
 8002756:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275c:	f7ff f998 	bl	8001a90 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d902      	bls.n	8002772 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f000 bcdb 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 8002772:	2302      	movs	r3, #2
 8002774:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800278c:	2202      	movs	r2, #2
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027cc:	4b88      	ldr	r3, [pc, #544]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 80027ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80027d8:	2102      	movs	r1, #2
 80027da:	6019      	str	r1, [r3, #0]
 80027dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f1a3 	rbit	r1, r3
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027f2:	6019      	str	r1, [r3, #0]
  return result;
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0a0      	beq.n	800275c <HAL_RCC_OscConfig+0x6a0>
 800281a:	e08d      	b.n	8002938 <HAL_RCC_OscConfig+0x87c>
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800283e:	601a      	str	r2, [r3, #0]
  return result;
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002848:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	4b68      	ldr	r3, [pc, #416]	@ (80029f4 <HAL_RCC_OscConfig+0x938>)
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	461a      	mov	r2, r3
 800285a:	2300      	movs	r3, #0
 800285c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff f917 	bl	8001a90 <HAL_GetTick>
 8002862:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002868:	f7ff f912 	bl	8001a90 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d902      	bls.n	800287e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	f000 bc55 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002886:	2202      	movs	r2, #2
 8002888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	fa93 f2a3 	rbit	r2, r3
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80028aa:	2202      	movs	r2, #2
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80028ce:	2202      	movs	r2, #2
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ea:	4b41      	ldr	r3, [pc, #260]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 80028ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80028f6:	2102      	movs	r1, #2
 80028f8:	6019      	str	r1, [r3, #0]
 80028fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f1a3 	rbit	r1, r3
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002910:	6019      	str	r1, [r3, #0]
  return result;
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d197      	bne.n	8002868 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 81a1 	beq.w	8002c90 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002954:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d116      	bne.n	800298e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	4b23      	ldr	r3, [pc, #140]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	4a22      	ldr	r2, [pc, #136]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296a:	61d3      	str	r3, [r2, #28]
 800296c:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002986:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <HAL_RCC_OscConfig+0x93c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11a      	bne.n	80029d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299a:	4b17      	ldr	r3, [pc, #92]	@ (80029f8 <HAL_RCC_OscConfig+0x93c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a16      	ldr	r2, [pc, #88]	@ (80029f8 <HAL_RCC_OscConfig+0x93c>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a6:	f7ff f873 	bl	8001a90 <HAL_GetTick>
 80029aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	e009      	b.n	80029c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7ff f86e 	bl	8001a90 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b64      	cmp	r3, #100	@ 0x64
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e3b1      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <HAL_RCC_OscConfig+0x93c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ef      	beq.n	80029b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10d      	bne.n	80029fc <HAL_RCC_OscConfig+0x940>
 80029e0:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a02      	ldr	r2, [pc, #8]	@ (80029f0 <HAL_RCC_OscConfig+0x934>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	e03c      	b.n	8002a68 <HAL_RCC_OscConfig+0x9ac>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	10908120 	.word	0x10908120
 80029f8:	40007000 	.word	0x40007000
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RCC_OscConfig+0x96a>
 8002a0c:	4bc1      	ldr	r3, [pc, #772]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4ac0      	ldr	r2, [pc, #768]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6213      	str	r3, [r2, #32]
 8002a18:	4bbe      	ldr	r3, [pc, #760]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4abd      	ldr	r2, [pc, #756]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a1e:	f023 0304 	bic.w	r3, r3, #4
 8002a22:	6213      	str	r3, [r2, #32]
 8002a24:	e020      	b.n	8002a68 <HAL_RCC_OscConfig+0x9ac>
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x994>
 8002a36:	4bb7      	ldr	r3, [pc, #732]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4ab6      	ldr	r2, [pc, #728]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4bb4      	ldr	r3, [pc, #720]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4ab3      	ldr	r2, [pc, #716]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0x9ac>
 8002a50:	4bb0      	ldr	r3, [pc, #704]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4aaf      	ldr	r2, [pc, #700]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	4bad      	ldr	r3, [pc, #692]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4aac      	ldr	r2, [pc, #688]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a62:	f023 0304 	bic.w	r3, r3, #4
 8002a66:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8081 	beq.w	8002b7c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7ff f809 	bl	8001a90 <HAL_GetTick>
 8002a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7ff f804 	bl	8001a90 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e345      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ac8:	2202      	movs	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ae2:	601a      	str	r2, [r3, #0]
  return result;
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002aec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0xa4c>
 8002b02:	4b84      	ldr	r3, [pc, #528]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	e013      	b.n	8002b30 <HAL_RCC_OscConfig+0xa74>
 8002b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	4b79      	ldr	r3, [pc, #484]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b34:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b38:	2102      	movs	r1, #2
 8002b3a:	6011      	str	r1, [r2, #0]
 8002b3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b40:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	fa92 f1a2 	rbit	r1, r2
 8002b4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b4e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b52:	6011      	str	r1, [r2, #0]
  return result;
 8002b54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b58:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	fab2 f282 	clz	r2, r2
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	f002 021f 	and.w	r2, r2, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f202 	lsl.w	r2, r1, r2
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d084      	beq.n	8002a84 <HAL_RCC_OscConfig+0x9c8>
 8002b7a:	e07f      	b.n	8002c7c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe ff88 	bl	8001a90 <HAL_GetTick>
 8002b80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	e00b      	b.n	8002b9e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe ff83 	bl	8001a90 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e2c4      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f2a3 	rbit	r2, r3
 8002bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002bca:	2202      	movs	r2, #2
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002be4:	601a      	str	r2, [r3, #0]
  return result;
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002bee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d102      	bne.n	8002c0a <HAL_RCC_OscConfig+0xb4e>
 8002c04:	4b43      	ldr	r3, [pc, #268]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	e013      	b.n	8002c32 <HAL_RCC_OscConfig+0xb76>
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	4b39      	ldr	r3, [pc, #228]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c36:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	6011      	str	r1, [r2, #0]
 8002c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c42:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	fa92 f1a2 	rbit	r1, r2
 8002c4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c50:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c54:	6011      	str	r1, [r2, #0]
  return result;
 8002c56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c5a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d184      	bne.n	8002b86 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d105      	bne.n	8002c90 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c84:	4b23      	ldr	r3, [pc, #140]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4a22      	ldr	r2, [pc, #136]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8242 	beq.w	8003126 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	f000 8213 	beq.w	80030d6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	f040 8162 	bne.w	8002f86 <HAL_RCC_OscConfig+0xeca>
 8002cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002cca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ce6:	601a      	str	r2, [r3, #0]
  return result;
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002cf0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cfc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	461a      	mov	r2, r3
 8002d04:	2300      	movs	r3, #0
 8002d06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe fec2 	bl	8001a90 <HAL_GetTick>
 8002d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d10:	e00c      	b.n	8002d2c <HAL_RCC_OscConfig+0xc70>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe feba 	bl	8001a90 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1fd      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d50:	601a      	str	r2, [r3, #0]
  return result;
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0xcba>
 8002d70:	4bb0      	ldr	r3, [pc, #704]	@ (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	e027      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd0a>
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d88:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d96:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002da4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002dce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dd2:	6011      	str	r1, [r2, #0]
 8002dd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dd8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	fa92 f1a2 	rbit	r1, r2
 8002de2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002dea:	6011      	str	r1, [r2, #0]
  return result;
 8002dec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f042 0220 	orr.w	r2, r2, #32
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f002 021f 	and.w	r2, r2, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d182      	bne.n	8002d18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e12:	4b88      	ldr	r3, [pc, #544]	@ (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	497f      	ldr	r1, [pc, #508]	@ (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e5e:	601a      	str	r2, [r3, #0]
  return result;
 8002e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e64:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fe06 	bl	8001a90 <HAL_GetTick>
 8002e84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e88:	e009      	b.n	8002e9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7fe fe01 	bl	8001a90 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e144      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ea6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002ec2:	601a      	str	r2, [r3, #0]
  return result;
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002ecc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xe2c>
 8002ee2:	4b54      	ldr	r3, [pc, #336]	@ (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	e027      	b.n	8002f38 <HAL_RCC_OscConfig+0xe7c>
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ef0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f12:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	4b3f      	ldr	r3, [pc, #252]	@ (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f3c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f4a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	fa92 f1a2 	rbit	r1, r2
 8002f54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f58:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f5c:	6011      	str	r1, [r2, #0]
  return result;
 8002f5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f62:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f002 021f 	and.w	r2, r2, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d082      	beq.n	8002e8a <HAL_RCC_OscConfig+0xdce>
 8002f84:	e0cf      	b.n	8003126 <HAL_RCC_OscConfig+0x106a>
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002f8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	fa93 f2a3 	rbit	r2, r3
 8002fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002faa:	601a      	str	r2, [r3, #0]
  return result;
 8002fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002fb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fd60 	bl	8001a90 <HAL_GetTick>
 8002fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	e009      	b.n	8002fea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe fd5b 	bl	8001a90 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e09e      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ff2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800300e:	601a      	str	r2, [r3, #0]
  return result;
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003018:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d104      	bne.n	8003038 <HAL_RCC_OscConfig+0xf7c>
 800302e:	4b01      	ldr	r3, [pc, #4]	@ (8003034 <HAL_RCC_OscConfig+0xf78>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	e029      	b.n	8003088 <HAL_RCC_OscConfig+0xfcc>
 8003034:	40021000 	.word	0x40021000
 8003038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003040:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003058:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003066:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003070:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	4b2b      	ldr	r3, [pc, #172]	@ (8003134 <HAL_RCC_OscConfig+0x1078>)
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800308c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003090:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003094:	6011      	str	r1, [r2, #0]
 8003096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800309a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	fa92 f1a2 	rbit	r1, r2
 80030a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030ac:	6011      	str	r1, [r2, #0]
  return result;
 80030ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	fab2 f282 	clz	r2, r2
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f042 0220 	orr.w	r2, r2, #32
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f002 021f 	and.w	r2, r2, #31
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f202 	lsl.w	r2, r1, r2
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d180      	bne.n	8002fd6 <HAL_RCC_OscConfig+0xf1a>
 80030d4:	e027      	b.n	8003126 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e01e      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_RCC_OscConfig+0x1078>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80030f6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	429a      	cmp	r2, r3
 8003108:	d10b      	bne.n	8003122 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800310a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800310e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800311e:	429a      	cmp	r2, r3
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b09e      	sub	sp, #120	@ 0x78
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e162      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003150:	4b90      	ldr	r3, [pc, #576]	@ (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d910      	bls.n	8003180 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b8d      	ldr	r3, [pc, #564]	@ (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	498b      	ldr	r1, [pc, #556]	@ (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b89      	ldr	r3, [pc, #548]	@ (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e14a      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b82      	ldr	r3, [pc, #520]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	497f      	ldr	r1, [pc, #508]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80dc 	beq.w	8003364 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d13c      	bne.n	800322e <HAL_RCC_ClockConfig+0xf6>
 80031b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80031c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_RCC_ClockConfig+0xa6>
 80031d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	e00f      	b.n	80031fe <HAL_RCC_ClockConfig+0xc6>
 80031de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80031ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80031f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031fa:	4b67      	ldr	r3, [pc, #412]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003202:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003206:	fa92 f2a2 	rbit	r2, r2
 800320a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800320c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800320e:	fab2 f282 	clz	r2, r2
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f042 0220 	orr.w	r2, r2, #32
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	f002 021f 	and.w	r2, r2, #31
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f202 	lsl.w	r2, r1, r2
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d17b      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0f3      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d13c      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x178>
 8003236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800323a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d102      	bne.n	8003260 <HAL_RCC_ClockConfig+0x128>
 800325a:	4b4f      	ldr	r3, [pc, #316]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e00f      	b.n	8003280 <HAL_RCC_ClockConfig+0x148>
 8003260:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003264:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	647b      	str	r3, [r7, #68]	@ 0x44
 800326e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003272:	643b      	str	r3, [r7, #64]	@ 0x40
 8003274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800327c:	4b46      	ldr	r3, [pc, #280]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003284:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003286:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003288:	fa92 f2a2 	rbit	r2, r2
 800328c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800328e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f002 021f 	and.w	r2, r2, #31
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d13a      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0b2      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
 80032b0:	2302      	movs	r3, #2
 80032b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x1a0>
 80032d2:	4b31      	ldr	r3, [pc, #196]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	e00d      	b.n	80032f4 <HAL_RCC_ClockConfig+0x1bc>
 80032d8:	2302      	movs	r3, #2
 80032da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e4:	2302      	movs	r3, #2
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	4b29      	ldr	r3, [pc, #164]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	2202      	movs	r2, #2
 80032f6:	61ba      	str	r2, [r7, #24]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	fa92 f2a2 	rbit	r2, r2
 80032fe:	617a      	str	r2, [r7, #20]
  return result;
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	fab2 f282 	clz	r2, r2
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	f042 0220 	orr.w	r2, r2, #32
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	f002 021f 	and.w	r2, r2, #31
 8003312:	2101      	movs	r1, #1
 8003314:	fa01 f202 	lsl.w	r2, r1, r2
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e079      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	491a      	ldr	r1, [pc, #104]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003334:	f7fe fbac 	bl	8001a90 <HAL_GetTick>
 8003338:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fe fba8 	bl	8001a90 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e061      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_RCC_ClockConfig+0x260>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d214      	bcs.n	800339c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 0207 	bic.w	r2, r3, #7
 800337a:	4906      	ldr	r1, [pc, #24]	@ (8003394 <HAL_RCC_ClockConfig+0x25c>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e040      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
 8003394:	40022000 	.word	0x40022000
 8003398:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	491a      	ldr	r1, [pc, #104]	@ (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b16      	ldr	r3, [pc, #88]	@ (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4912      	ldr	r1, [pc, #72]	@ (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033da:	f000 f829 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033de:	4601      	mov	r1, r0
 80033e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e8:	22f0      	movs	r2, #240	@ 0xf0
 80033ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	fa92 f2a2 	rbit	r2, r2
 80033f2:	60fa      	str	r2, [r7, #12]
  return result;
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	fab2 f282 	clz	r2, r2
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	40d3      	lsrs	r3, r2
 80033fe:	4a09      	ldr	r2, [pc, #36]	@ (8003424 <HAL_RCC_ClockConfig+0x2ec>)
 8003400:	5cd3      	ldrb	r3, [r2, r3]
 8003402:	fa21 f303 	lsr.w	r3, r1, r3
 8003406:	4a08      	ldr	r2, [pc, #32]	@ (8003428 <HAL_RCC_ClockConfig+0x2f0>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_RCC_ClockConfig+0x2f4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fafa 	bl	8001a08 <HAL_InitTick>
  
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3778      	adds	r7, #120	@ 0x78
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	080053c8 	.word	0x080053c8
 8003428:	20000000 	.word	0x20000000
 800342c:	20000004 	.word	0x20000004

08003430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800344a:	4b1e      	ldr	r3, [pc, #120]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x30>
 800345a:	2b08      	cmp	r3, #8
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x36>
 800345e:	e026      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003460:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003462:	613b      	str	r3, [r7, #16]
      break;
 8003464:	e026      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	0c9b      	lsrs	r3, r3, #18
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a17      	ldr	r2, [pc, #92]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003474:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800348c:	4a0e      	ldr	r2, [pc, #56]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e004      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a0c      	ldr	r2, [pc, #48]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	613b      	str	r3, [r7, #16]
      break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80034b0:	613b      	str	r3, [r7, #16]
      break;
 80034b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b4:	693b      	ldr	r3, [r7, #16]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	007a1200 	.word	0x007a1200
 80034cc:	080053e0 	.word	0x080053e0
 80034d0:	080053f0 	.word	0x080053f0
 80034d4:	003d0900 	.word	0x003d0900

080034d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034dc:	4b03      	ldr	r3, [pc, #12]	@ (80034ec <HAL_RCC_GetHCLKFreq+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000000 	.word	0x20000000

080034f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034f6:	f7ff ffef 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 80034fa:	4601      	mov	r1, r0
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003504:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003508:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	fa92 f2a2 	rbit	r2, r2
 8003510:	603a      	str	r2, [r7, #0]
  return result;
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	40d3      	lsrs	r3, r2
 800351c:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <HAL_RCC_GetPCLK1Freq+0x40>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	080053d8 	.word	0x080053d8

08003534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800353a:	f7ff ffcd 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 800353e:	4601      	mov	r1, r0
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003548:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800354c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	fa92 f2a2 	rbit	r2, r2
 8003554:	603a      	str	r2, [r7, #0]
  return result;
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	fab2 f282 	clz	r2, r2
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	40d3      	lsrs	r3, r2
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	080053d8 	.word	0x080053d8

08003578 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b092      	sub	sp, #72	@ 0x48
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80d4 	beq.w	8003744 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359c:	4b4e      	ldr	r3, [pc, #312]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10e      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b4b      	ldr	r3, [pc, #300]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4a4a      	ldr	r2, [pc, #296]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	61d3      	str	r3, [r2, #28]
 80035b4:	4b48      	ldr	r3, [pc, #288]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c6:	4b45      	ldr	r3, [pc, #276]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d118      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d2:	4b42      	ldr	r3, [pc, #264]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a41      	ldr	r2, [pc, #260]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035de:	f7fe fa57 	bl	8001a90 <HAL_GetTick>
 80035e2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	e008      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fe fa53 	bl	8001a90 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	@ 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e14b      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	4b38      	ldr	r3, [pc, #224]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003604:	4b34      	ldr	r3, [pc, #208]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800360e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8084 	beq.w	800371e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800361e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003620:	429a      	cmp	r2, r3
 8003622:	d07c      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003624:	4b2c      	ldr	r3, [pc, #176]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800362e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003632:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800363c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	4b26      	ldr	r3, [pc, #152]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	461a      	mov	r2, r3
 800364e:	2301      	movs	r3, #1
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	461a      	mov	r2, r3
 8003672:	2300      	movs	r3, #0
 8003674:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003676:	4a18      	ldr	r2, [pc, #96]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800367c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d04b      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe fa03 	bl	8001a90 <HAL_GetTick>
 800368a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe f9ff 	bl	8001a90 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0f5      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80036a4:	2302      	movs	r3, #2
 80036a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b0:	2302      	movs	r3, #2
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	61fb      	str	r3, [r7, #28]
  return result;
 80036bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d108      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036d2:	4b01      	ldr	r3, [pc, #4]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	e00d      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40007000 	.word	0x40007000
 80036e0:	10908100 	.word	0x10908100
 80036e4:	2302      	movs	r3, #2
 80036e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	4b69      	ldr	r3, [pc, #420]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2202      	movs	r2, #2
 80036f6:	613a      	str	r2, [r7, #16]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	fa92 f2a2 	rbit	r2, r2
 80036fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	fab2 f282 	clz	r2, r2
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	f002 021f 	and.w	r2, r2, #31
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f202 	lsl.w	r2, r1, r2
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0b7      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800371e:	4b5e      	ldr	r3, [pc, #376]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	495b      	ldr	r1, [pc, #364]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800372c:	4313      	orrs	r3, r2
 800372e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003730:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4b57      	ldr	r3, [pc, #348]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4a56      	ldr	r2, [pc, #344]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003742:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003750:	4b51      	ldr	r3, [pc, #324]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	f023 0203 	bic.w	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	494e      	ldr	r1, [pc, #312]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800375e:	4313      	orrs	r3, r2
 8003760:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800376e:	4b4a      	ldr	r3, [pc, #296]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f023 0210 	bic.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	4947      	ldr	r1, [pc, #284]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800377c:	4313      	orrs	r3, r2
 800377e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800378c:	4b42      	ldr	r3, [pc, #264]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	493f      	ldr	r1, [pc, #252]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f023 0220 	bic.w	r2, r3, #32
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	4938      	ldr	r1, [pc, #224]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c8:	4b33      	ldr	r3, [pc, #204]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	4930      	ldr	r1, [pc, #192]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4929      	ldr	r1, [pc, #164]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	4921      	ldr	r1, [pc, #132]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003812:	4313      	orrs	r3, r2
 8003814:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003822:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	491a      	ldr	r1, [pc, #104]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003830:	4313      	orrs	r3, r2
 8003832:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003840:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003844:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	4912      	ldr	r1, [pc, #72]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800384e:	4313      	orrs	r3, r2
 8003850:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800385e:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	490b      	ldr	r1, [pc, #44]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800386c:	4313      	orrs	r3, r2
 800386e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800387c:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	4903      	ldr	r1, [pc, #12]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800388a:	4313      	orrs	r3, r2
 800388c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3748      	adds	r7, #72	@ 0x48
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000

0800389c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e049      	b.n	8003942 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd f8c2 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f000 faac 	bl	8003e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d001      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e03b      	b.n	80039dc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_TIM_Base_Start_IT+0x4e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398e:	d004      	beq.n	800399a <HAL_TIM_Base_Start_IT+0x4e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a15      	ldr	r2, [pc, #84]	@ (80039ec <HAL_TIM_Base_Start_IT+0xa0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d115      	bne.n	80039c6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <HAL_TIM_Base_Start_IT+0xa4>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d015      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x8c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b2:	d011      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c4:	e008      	b.n	80039d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e000      	b.n	80039da <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40014000 	.word	0x40014000
 80039f0:	00010007 	.word	0x00010007

080039f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a1a      	ldr	r2, [r3, #32]
 8003a12:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10f      	bne.n	8003a3c <HAL_TIM_Base_Stop_IT+0x48>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a1a      	ldr	r2, [r3, #32]
 8003a22:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_Base_Stop_IT+0x48>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d020      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01b      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0202 	mvn.w	r2, #2
 8003a86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f9ad 	bl	8003dfc <HAL_TIM_IC_CaptureCallback>
 8003aa2:	e005      	b.n	8003ab0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f99f 	bl	8003de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9b0 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01b      	beq.n	8003b02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0204 	mvn.w	r2, #4
 8003ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f987 	bl	8003dfc <HAL_TIM_IC_CaptureCallback>
 8003aee:	e005      	b.n	8003afc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f979 	bl	8003de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f98a 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01b      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f06f 0208 	mvn.w	r2, #8
 8003b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f961 	bl	8003dfc <HAL_TIM_IC_CaptureCallback>
 8003b3a:	e005      	b.n	8003b48 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f953 	bl	8003de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f964 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d020      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01b      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0210 	mvn.w	r2, #16
 8003b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f93b 	bl	8003dfc <HAL_TIM_IC_CaptureCallback>
 8003b86:	e005      	b.n	8003b94 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f92d 	bl	8003de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f93e 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00c      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f06f 0201 	mvn.w	r2, #1
 8003bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fc fe9d 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00c      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 faaf 	bl	8004140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00c      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 faa7 	bl	8004154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f8fd 	bl	8003e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f06f 0220 	mvn.w	r2, #32
 8003c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fa6f 	bl	800412c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_ConfigClockSource+0x1c>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0b6      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x18a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c90:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cae:	d03e      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xd8>
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb4:	f200 8087 	bhi.w	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbc:	f000 8086 	beq.w	8003dcc <HAL_TIM_ConfigClockSource+0x176>
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc4:	d87f      	bhi.n	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
 8003cc6:	2b70      	cmp	r3, #112	@ 0x70
 8003cc8:	d01a      	beq.n	8003d00 <HAL_TIM_ConfigClockSource+0xaa>
 8003cca:	2b70      	cmp	r3, #112	@ 0x70
 8003ccc:	d87b      	bhi.n	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
 8003cce:	2b60      	cmp	r3, #96	@ 0x60
 8003cd0:	d050      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0x11e>
 8003cd2:	2b60      	cmp	r3, #96	@ 0x60
 8003cd4:	d877      	bhi.n	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
 8003cd6:	2b50      	cmp	r3, #80	@ 0x50
 8003cd8:	d03c      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0xfe>
 8003cda:	2b50      	cmp	r3, #80	@ 0x50
 8003cdc:	d873      	bhi.n	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
 8003cde:	2b40      	cmp	r3, #64	@ 0x40
 8003ce0:	d058      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0x13e>
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d86f      	bhi.n	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
 8003ce6:	2b30      	cmp	r3, #48	@ 0x30
 8003ce8:	d064      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x15e>
 8003cea:	2b30      	cmp	r3, #48	@ 0x30
 8003cec:	d86b      	bhi.n	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d060      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x15e>
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d867      	bhi.n	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d05c      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x15e>
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d05a      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x15e>
 8003cfe:	e062      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d10:	f000 f986 	bl	8004020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	609a      	str	r2, [r3, #8]
      break;
 8003d2c:	e04f      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d3e:	f000 f96f 	bl	8004020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d50:	609a      	str	r2, [r3, #8]
      break;
 8003d52:	e03c      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d60:	461a      	mov	r2, r3
 8003d62:	f000 f8e3 	bl	8003f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2150      	movs	r1, #80	@ 0x50
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f93c 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003d72:	e02c      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d80:	461a      	mov	r2, r3
 8003d82:	f000 f902 	bl	8003f8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2160      	movs	r1, #96	@ 0x60
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f92c 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003d92:	e01c      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da0:	461a      	mov	r2, r3
 8003da2:	f000 f8c3 	bl	8003f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2140      	movs	r1, #64	@ 0x40
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f91c 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003db2:	e00c      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 f913 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003dc4:	e003      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dca:	e000      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a34      	ldr	r2, [pc, #208]	@ (8003f1c <TIM_Base_SetConfig+0xe4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x20>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f1c <TIM_Base_SetConfig+0xe4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0x5a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0x5a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a28      	ldr	r2, [pc, #160]	@ (8003f20 <TIM_Base_SetConfig+0xe8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0x5a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a27      	ldr	r2, [pc, #156]	@ (8003f24 <TIM_Base_SetConfig+0xec>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0x5a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a26      	ldr	r2, [pc, #152]	@ (8003f28 <TIM_Base_SetConfig+0xf0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a14      	ldr	r2, [pc, #80]	@ (8003f1c <TIM_Base_SetConfig+0xe4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00b      	beq.n	8003ee8 <TIM_Base_SetConfig+0xb0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a13      	ldr	r2, [pc, #76]	@ (8003f20 <TIM_Base_SetConfig+0xe8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d007      	beq.n	8003ee8 <TIM_Base_SetConfig+0xb0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <TIM_Base_SetConfig+0xec>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d003      	beq.n	8003ee8 <TIM_Base_SetConfig+0xb0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a11      	ldr	r2, [pc, #68]	@ (8003f28 <TIM_Base_SetConfig+0xf0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d103      	bne.n	8003ef0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d105      	bne.n	8003f0e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f023 0201 	bic.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800

08003f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 030a 	bic.w	r3, r3, #10
 8003f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f023 0210 	bic.w	r2, r3, #16
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	031b      	lsls	r3, r3, #12
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	f043 0307 	orr.w	r3, r3, #7
 800400c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800403a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	021a      	lsls	r2, r3, #8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	431a      	orrs	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	609a      	str	r2, [r3, #8]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e04f      	b.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a21      	ldr	r2, [pc, #132]	@ (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e0:	d004      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a10      	ldr	r2, [pc, #64]	@ (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10c      	bne.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40014000 	.word	0x40014000

0800412c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e040      	b.n	80041fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc fcba 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	@ 0x24
 8004194:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f9e8 	bl	8004584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8af 	bl	8004318 <UART_SetConfig>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e01b      	b.n	80041fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fa67 	bl	80046c8 <UART_CheckIdleState>
 80041fa:	4603      	mov	r3, r0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004218:	2b20      	cmp	r3, #32
 800421a:	d177      	bne.n	800430c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_UART_Transmit+0x24>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e070      	b.n	800430e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2221      	movs	r2, #33	@ 0x21
 8004238:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800423a:	f7fd fc29 	bl	8001a90 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004258:	d108      	bne.n	800426c <HAL_UART_Transmit+0x68>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e003      	b.n	8004274 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004274:	e02f      	b.n	80042d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2200      	movs	r2, #0
 800427e:	2180      	movs	r1, #128	@ 0x80
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fac9 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e03b      	b.n	800430e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a8:	b292      	uxth	r2, r2
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	3302      	adds	r3, #2
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e007      	b.n	80042c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1c9      	bne.n	8004276 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2140      	movs	r1, #64	@ 0x40
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fa93 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e005      	b.n	800430e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b8a      	ldr	r3, [pc, #552]	@ (800456c <UART_SetConfig+0x254>)
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	6979      	ldr	r1, [r7, #20]
 800434c:	430b      	orrs	r3, r1
 800434e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	430a      	orrs	r2, r1
 8004388:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a78      	ldr	r2, [pc, #480]	@ (8004570 <UART_SetConfig+0x258>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d120      	bne.n	80043d6 <UART_SetConfig+0xbe>
 8004394:	4b77      	ldr	r3, [pc, #476]	@ (8004574 <UART_SetConfig+0x25c>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	2b03      	cmp	r3, #3
 800439e:	d817      	bhi.n	80043d0 <UART_SetConfig+0xb8>
 80043a0:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <UART_SetConfig+0x90>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043c5 	.word	0x080043c5
 80043b0:	080043cb 	.word	0x080043cb
 80043b4:	080043bf 	.word	0x080043bf
 80043b8:	2300      	movs	r3, #0
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e01d      	b.n	80043fa <UART_SetConfig+0xe2>
 80043be:	2302      	movs	r3, #2
 80043c0:	77fb      	strb	r3, [r7, #31]
 80043c2:	e01a      	b.n	80043fa <UART_SetConfig+0xe2>
 80043c4:	2304      	movs	r3, #4
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e017      	b.n	80043fa <UART_SetConfig+0xe2>
 80043ca:	2308      	movs	r3, #8
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	e014      	b.n	80043fa <UART_SetConfig+0xe2>
 80043d0:	2310      	movs	r3, #16
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e011      	b.n	80043fa <UART_SetConfig+0xe2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a67      	ldr	r2, [pc, #412]	@ (8004578 <UART_SetConfig+0x260>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d102      	bne.n	80043e6 <UART_SetConfig+0xce>
 80043e0:	2300      	movs	r3, #0
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e009      	b.n	80043fa <UART_SetConfig+0xe2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a64      	ldr	r2, [pc, #400]	@ (800457c <UART_SetConfig+0x264>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d102      	bne.n	80043f6 <UART_SetConfig+0xde>
 80043f0:	2300      	movs	r3, #0
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e001      	b.n	80043fa <UART_SetConfig+0xe2>
 80043f6:	2310      	movs	r3, #16
 80043f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004402:	d15a      	bne.n	80044ba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004404:	7ffb      	ldrb	r3, [r7, #31]
 8004406:	2b08      	cmp	r3, #8
 8004408:	d827      	bhi.n	800445a <UART_SetConfig+0x142>
 800440a:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <UART_SetConfig+0xf8>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	08004435 	.word	0x08004435
 8004414:	0800443d 	.word	0x0800443d
 8004418:	08004445 	.word	0x08004445
 800441c:	0800445b 	.word	0x0800445b
 8004420:	0800444b 	.word	0x0800444b
 8004424:	0800445b 	.word	0x0800445b
 8004428:	0800445b 	.word	0x0800445b
 800442c:	0800445b 	.word	0x0800445b
 8004430:	08004453 	.word	0x08004453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004434:	f7ff f85c 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8004438:	61b8      	str	r0, [r7, #24]
        break;
 800443a:	e013      	b.n	8004464 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800443c:	f7ff f87a 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 8004440:	61b8      	str	r0, [r7, #24]
        break;
 8004442:	e00f      	b.n	8004464 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004444:	4b4e      	ldr	r3, [pc, #312]	@ (8004580 <UART_SetConfig+0x268>)
 8004446:	61bb      	str	r3, [r7, #24]
        break;
 8004448:	e00c      	b.n	8004464 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444a:	f7fe fff1 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 800444e:	61b8      	str	r0, [r7, #24]
        break;
 8004450:	e008      	b.n	8004464 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004456:	61bb      	str	r3, [r7, #24]
        break;
 8004458:	e004      	b.n	8004464 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	77bb      	strb	r3, [r7, #30]
        break;
 8004462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d074      	beq.n	8004554 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	005a      	lsls	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	441a      	add	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b0f      	cmp	r3, #15
 8004484:	d916      	bls.n	80044b4 <UART_SetConfig+0x19c>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448c:	d212      	bcs.n	80044b4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f023 030f 	bic.w	r3, r3, #15
 8004496:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	89fb      	ldrh	r3, [r7, #14]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	89fa      	ldrh	r2, [r7, #14]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	e04f      	b.n	8004554 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	77bb      	strb	r3, [r7, #30]
 80044b8:	e04c      	b.n	8004554 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d828      	bhi.n	8004512 <UART_SetConfig+0x1fa>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <UART_SetConfig+0x1b0>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044ed 	.word	0x080044ed
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	080044fd 	.word	0x080044fd
 80044d4:	08004513 	.word	0x08004513
 80044d8:	08004503 	.word	0x08004503
 80044dc:	08004513 	.word	0x08004513
 80044e0:	08004513 	.word	0x08004513
 80044e4:	08004513 	.word	0x08004513
 80044e8:	0800450b 	.word	0x0800450b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ec:	f7ff f800 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 80044f0:	61b8      	str	r0, [r7, #24]
        break;
 80044f2:	e013      	b.n	800451c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7ff f81e 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 80044f8:	61b8      	str	r0, [r7, #24]
        break;
 80044fa:	e00f      	b.n	800451c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044fc:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <UART_SetConfig+0x268>)
 80044fe:	61bb      	str	r3, [r7, #24]
        break;
 8004500:	e00c      	b.n	800451c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004502:	f7fe ff95 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 8004506:	61b8      	str	r0, [r7, #24]
        break;
 8004508:	e008      	b.n	800451c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450e:	61bb      	str	r3, [r7, #24]
        break;
 8004510:	e004      	b.n	800451c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	77bb      	strb	r3, [r7, #30]
        break;
 800451a:	bf00      	nop
    }

    if (pclk != 0U)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	085a      	lsrs	r2, r3, #1
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	441a      	add	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	d909      	bls.n	8004550 <UART_SetConfig+0x238>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004542:	d205      	bcs.n	8004550 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e001      	b.n	8004554 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004560:	7fbb      	ldrb	r3, [r7, #30]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	efff69f3 	.word	0xefff69f3
 8004570:	40013800 	.word	0x40013800
 8004574:	40021000 	.word	0x40021000
 8004578:	40004400 	.word	0x40004400
 800457c:	40004800 	.word	0x40004800
 8004580:	007a1200 	.word	0x007a1200

08004584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004682:	d10a      	bne.n	800469a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b098      	sub	sp, #96	@ 0x60
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046d8:	f7fd f9da 	bl	8001a90 <HAL_GetTick>
 80046dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d12e      	bne.n	800474a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f4:	2200      	movs	r2, #0
 80046f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f88c 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d021      	beq.n	800474a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800471a:	653b      	str	r3, [r7, #80]	@ 0x50
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004724:	647b      	str	r3, [r7, #68]	@ 0x44
 8004726:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800472a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e6      	bne.n	8004706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e062      	b.n	8004810 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b04      	cmp	r3, #4
 8004756:	d149      	bne.n	80047ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004758:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004760:	2200      	movs	r2, #0
 8004762:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f856 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d03c      	beq.n	80047ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	623b      	str	r3, [r7, #32]
   return(result);
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004790:	633b      	str	r3, [r7, #48]	@ 0x30
 8004792:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800479e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e6      	bne.n	8004772 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047c4:	61fa      	str	r2, [r7, #28]
 80047c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	69b9      	ldr	r1, [r7, #24]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	617b      	str	r3, [r7, #20]
   return(result);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e5      	bne.n	80047a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e011      	b.n	8004810 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3758      	adds	r7, #88	@ 0x58
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004828:	e04f      	b.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d04b      	beq.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004832:	f7fd f92d 	bl	8001a90 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <UART_WaitOnFlagUntilTimeout+0x30>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e04e      	b.n	80048ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d037      	beq.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b80      	cmp	r3, #128	@ 0x80
 800485e:	d034      	beq.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b40      	cmp	r3, #64	@ 0x40
 8004864:	d031      	beq.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b08      	cmp	r3, #8
 8004872:	d110      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2208      	movs	r2, #8
 800487a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f838 	bl	80048f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2208      	movs	r2, #8
 8004886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e029      	b.n	80048ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a4:	d111      	bne.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f81e 	bl	80048f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e00f      	b.n	80048ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	bf0c      	ite	eq
 80048da:	2301      	moveq	r3, #1
 80048dc:	2300      	movne	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d0a0      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b095      	sub	sp, #84	@ 0x54
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800490e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004918:	643b      	str	r3, [r7, #64]	@ 0x40
 800491a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800491e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	61fb      	str	r3, [r7, #28]
   return(result);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800494c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800494e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	2b01      	cmp	r3, #1
 8004966:	d118      	bne.n	800499a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	60bb      	str	r3, [r7, #8]
   return(result);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f023 0310 	bic.w	r3, r3, #16
 800497c:	647b      	str	r3, [r7, #68]	@ 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6979      	ldr	r1, [r7, #20]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	613b      	str	r3, [r7, #16]
   return(result);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e6      	bne.n	8004968 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049ae:	bf00      	nop
 80049b0:	3754      	adds	r7, #84	@ 0x54
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <siprintf>:
 80049bc:	b40e      	push	{r1, r2, r3}
 80049be:	b500      	push	{lr}
 80049c0:	b09c      	sub	sp, #112	@ 0x70
 80049c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80049c4:	9002      	str	r0, [sp, #8]
 80049c6:	9006      	str	r0, [sp, #24]
 80049c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049cc:	4809      	ldr	r0, [pc, #36]	@ (80049f4 <siprintf+0x38>)
 80049ce:	9107      	str	r1, [sp, #28]
 80049d0:	9104      	str	r1, [sp, #16]
 80049d2:	4909      	ldr	r1, [pc, #36]	@ (80049f8 <siprintf+0x3c>)
 80049d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d8:	9105      	str	r1, [sp, #20]
 80049da:	6800      	ldr	r0, [r0, #0]
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	a902      	add	r1, sp, #8
 80049e0:	f000 f994 	bl	8004d0c <_svfiprintf_r>
 80049e4:	9b02      	ldr	r3, [sp, #8]
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	b01c      	add	sp, #112	@ 0x70
 80049ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f0:	b003      	add	sp, #12
 80049f2:	4770      	bx	lr
 80049f4:	2000000c 	.word	0x2000000c
 80049f8:	ffff0208 	.word	0xffff0208

080049fc <memset>:
 80049fc:	4402      	add	r2, r0
 80049fe:	4603      	mov	r3, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <__errno>:
 8004a0c:	4b01      	ldr	r3, [pc, #4]	@ (8004a14 <__errno+0x8>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	@ (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f000 fc66 	bl	80052fc <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	0800543c 	.word	0x0800543c
 8004a54:	0800543c 	.word	0x0800543c
 8004a58:	0800543c 	.word	0x0800543c
 8004a5c:	08005440 	.word	0x08005440

08004a60 <__retarget_lock_acquire_recursive>:
 8004a60:	4770      	bx	lr

08004a62 <__retarget_lock_release_recursive>:
 8004a62:	4770      	bx	lr

08004a64 <_free_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4605      	mov	r5, r0
 8004a68:	2900      	cmp	r1, #0
 8004a6a:	d041      	beq.n	8004af0 <_free_r+0x8c>
 8004a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a70:	1f0c      	subs	r4, r1, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bfb8      	it	lt
 8004a76:	18e4      	addlt	r4, r4, r3
 8004a78:	f000 f8e0 	bl	8004c3c <__malloc_lock>
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <_free_r+0x90>)
 8004a7e:	6813      	ldr	r3, [r2, #0]
 8004a80:	b933      	cbnz	r3, 8004a90 <_free_r+0x2c>
 8004a82:	6063      	str	r3, [r4, #4]
 8004a84:	6014      	str	r4, [r2, #0]
 8004a86:	4628      	mov	r0, r5
 8004a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a8c:	f000 b8dc 	b.w	8004c48 <__malloc_unlock>
 8004a90:	42a3      	cmp	r3, r4
 8004a92:	d908      	bls.n	8004aa6 <_free_r+0x42>
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	1821      	adds	r1, r4, r0
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	bf01      	itttt	eq
 8004a9c:	6819      	ldreq	r1, [r3, #0]
 8004a9e:	685b      	ldreq	r3, [r3, #4]
 8004aa0:	1809      	addeq	r1, r1, r0
 8004aa2:	6021      	streq	r1, [r4, #0]
 8004aa4:	e7ed      	b.n	8004a82 <_free_r+0x1e>
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	b10b      	cbz	r3, 8004ab0 <_free_r+0x4c>
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d9fa      	bls.n	8004aa6 <_free_r+0x42>
 8004ab0:	6811      	ldr	r1, [r2, #0]
 8004ab2:	1850      	adds	r0, r2, r1
 8004ab4:	42a0      	cmp	r0, r4
 8004ab6:	d10b      	bne.n	8004ad0 <_free_r+0x6c>
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	4401      	add	r1, r0
 8004abc:	1850      	adds	r0, r2, r1
 8004abe:	4283      	cmp	r3, r0
 8004ac0:	6011      	str	r1, [r2, #0]
 8004ac2:	d1e0      	bne.n	8004a86 <_free_r+0x22>
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	6053      	str	r3, [r2, #4]
 8004aca:	4408      	add	r0, r1
 8004acc:	6010      	str	r0, [r2, #0]
 8004ace:	e7da      	b.n	8004a86 <_free_r+0x22>
 8004ad0:	d902      	bls.n	8004ad8 <_free_r+0x74>
 8004ad2:	230c      	movs	r3, #12
 8004ad4:	602b      	str	r3, [r5, #0]
 8004ad6:	e7d6      	b.n	8004a86 <_free_r+0x22>
 8004ad8:	6820      	ldr	r0, [r4, #0]
 8004ada:	1821      	adds	r1, r4, r0
 8004adc:	428b      	cmp	r3, r1
 8004ade:	bf04      	itt	eq
 8004ae0:	6819      	ldreq	r1, [r3, #0]
 8004ae2:	685b      	ldreq	r3, [r3, #4]
 8004ae4:	6063      	str	r3, [r4, #4]
 8004ae6:	bf04      	itt	eq
 8004ae8:	1809      	addeq	r1, r1, r0
 8004aea:	6021      	streq	r1, [r4, #0]
 8004aec:	6054      	str	r4, [r2, #4]
 8004aee:	e7ca      	b.n	8004a86 <_free_r+0x22>
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
 8004af2:	bf00      	nop
 8004af4:	200003a4 	.word	0x200003a4

08004af8 <sbrk_aligned>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	4e0f      	ldr	r6, [pc, #60]	@ (8004b38 <sbrk_aligned+0x40>)
 8004afc:	460c      	mov	r4, r1
 8004afe:	6831      	ldr	r1, [r6, #0]
 8004b00:	4605      	mov	r5, r0
 8004b02:	b911      	cbnz	r1, 8004b0a <sbrk_aligned+0x12>
 8004b04:	f000 fba6 	bl	8005254 <_sbrk_r>
 8004b08:	6030      	str	r0, [r6, #0]
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f000 fba1 	bl	8005254 <_sbrk_r>
 8004b12:	1c43      	adds	r3, r0, #1
 8004b14:	d103      	bne.n	8004b1e <sbrk_aligned+0x26>
 8004b16:	f04f 34ff 	mov.w	r4, #4294967295
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	bd70      	pop	{r4, r5, r6, pc}
 8004b1e:	1cc4      	adds	r4, r0, #3
 8004b20:	f024 0403 	bic.w	r4, r4, #3
 8004b24:	42a0      	cmp	r0, r4
 8004b26:	d0f8      	beq.n	8004b1a <sbrk_aligned+0x22>
 8004b28:	1a21      	subs	r1, r4, r0
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 fb92 	bl	8005254 <_sbrk_r>
 8004b30:	3001      	adds	r0, #1
 8004b32:	d1f2      	bne.n	8004b1a <sbrk_aligned+0x22>
 8004b34:	e7ef      	b.n	8004b16 <sbrk_aligned+0x1e>
 8004b36:	bf00      	nop
 8004b38:	200003a0 	.word	0x200003a0

08004b3c <_malloc_r>:
 8004b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b40:	1ccd      	adds	r5, r1, #3
 8004b42:	f025 0503 	bic.w	r5, r5, #3
 8004b46:	3508      	adds	r5, #8
 8004b48:	2d0c      	cmp	r5, #12
 8004b4a:	bf38      	it	cc
 8004b4c:	250c      	movcc	r5, #12
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	4606      	mov	r6, r0
 8004b52:	db01      	blt.n	8004b58 <_malloc_r+0x1c>
 8004b54:	42a9      	cmp	r1, r5
 8004b56:	d904      	bls.n	8004b62 <_malloc_r+0x26>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	6033      	str	r3, [r6, #0]
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c38 <_malloc_r+0xfc>
 8004b66:	f000 f869 	bl	8004c3c <__malloc_lock>
 8004b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b6e:	461c      	mov	r4, r3
 8004b70:	bb44      	cbnz	r4, 8004bc4 <_malloc_r+0x88>
 8004b72:	4629      	mov	r1, r5
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7ff ffbf 	bl	8004af8 <sbrk_aligned>
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	d158      	bne.n	8004c32 <_malloc_r+0xf6>
 8004b80:	f8d8 4000 	ldr.w	r4, [r8]
 8004b84:	4627      	mov	r7, r4
 8004b86:	2f00      	cmp	r7, #0
 8004b88:	d143      	bne.n	8004c12 <_malloc_r+0xd6>
 8004b8a:	2c00      	cmp	r4, #0
 8004b8c:	d04b      	beq.n	8004c26 <_malloc_r+0xea>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	4639      	mov	r1, r7
 8004b92:	4630      	mov	r0, r6
 8004b94:	eb04 0903 	add.w	r9, r4, r3
 8004b98:	f000 fb5c 	bl	8005254 <_sbrk_r>
 8004b9c:	4581      	cmp	r9, r0
 8004b9e:	d142      	bne.n	8004c26 <_malloc_r+0xea>
 8004ba0:	6821      	ldr	r1, [r4, #0]
 8004ba2:	1a6d      	subs	r5, r5, r1
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f7ff ffa6 	bl	8004af8 <sbrk_aligned>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d03a      	beq.n	8004c26 <_malloc_r+0xea>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	442b      	add	r3, r5
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	bb62      	cbnz	r2, 8004c18 <_malloc_r+0xdc>
 8004bbe:	f8c8 7000 	str.w	r7, [r8]
 8004bc2:	e00f      	b.n	8004be4 <_malloc_r+0xa8>
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	1b52      	subs	r2, r2, r5
 8004bc8:	d420      	bmi.n	8004c0c <_malloc_r+0xd0>
 8004bca:	2a0b      	cmp	r2, #11
 8004bcc:	d917      	bls.n	8004bfe <_malloc_r+0xc2>
 8004bce:	1961      	adds	r1, r4, r5
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	6025      	str	r5, [r4, #0]
 8004bd4:	bf18      	it	ne
 8004bd6:	6059      	strne	r1, [r3, #4]
 8004bd8:	6863      	ldr	r3, [r4, #4]
 8004bda:	bf08      	it	eq
 8004bdc:	f8c8 1000 	streq.w	r1, [r8]
 8004be0:	5162      	str	r2, [r4, r5]
 8004be2:	604b      	str	r3, [r1, #4]
 8004be4:	4630      	mov	r0, r6
 8004be6:	f000 f82f 	bl	8004c48 <__malloc_unlock>
 8004bea:	f104 000b 	add.w	r0, r4, #11
 8004bee:	1d23      	adds	r3, r4, #4
 8004bf0:	f020 0007 	bic.w	r0, r0, #7
 8004bf4:	1ac2      	subs	r2, r0, r3
 8004bf6:	bf1c      	itt	ne
 8004bf8:	1a1b      	subne	r3, r3, r0
 8004bfa:	50a3      	strne	r3, [r4, r2]
 8004bfc:	e7af      	b.n	8004b5e <_malloc_r+0x22>
 8004bfe:	6862      	ldr	r2, [r4, #4]
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	bf0c      	ite	eq
 8004c04:	f8c8 2000 	streq.w	r2, [r8]
 8004c08:	605a      	strne	r2, [r3, #4]
 8004c0a:	e7eb      	b.n	8004be4 <_malloc_r+0xa8>
 8004c0c:	4623      	mov	r3, r4
 8004c0e:	6864      	ldr	r4, [r4, #4]
 8004c10:	e7ae      	b.n	8004b70 <_malloc_r+0x34>
 8004c12:	463c      	mov	r4, r7
 8004c14:	687f      	ldr	r7, [r7, #4]
 8004c16:	e7b6      	b.n	8004b86 <_malloc_r+0x4a>
 8004c18:	461a      	mov	r2, r3
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	42a3      	cmp	r3, r4
 8004c1e:	d1fb      	bne.n	8004c18 <_malloc_r+0xdc>
 8004c20:	2300      	movs	r3, #0
 8004c22:	6053      	str	r3, [r2, #4]
 8004c24:	e7de      	b.n	8004be4 <_malloc_r+0xa8>
 8004c26:	230c      	movs	r3, #12
 8004c28:	6033      	str	r3, [r6, #0]
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f000 f80c 	bl	8004c48 <__malloc_unlock>
 8004c30:	e794      	b.n	8004b5c <_malloc_r+0x20>
 8004c32:	6005      	str	r5, [r0, #0]
 8004c34:	e7d6      	b.n	8004be4 <_malloc_r+0xa8>
 8004c36:	bf00      	nop
 8004c38:	200003a4 	.word	0x200003a4

08004c3c <__malloc_lock>:
 8004c3c:	4801      	ldr	r0, [pc, #4]	@ (8004c44 <__malloc_lock+0x8>)
 8004c3e:	f7ff bf0f 	b.w	8004a60 <__retarget_lock_acquire_recursive>
 8004c42:	bf00      	nop
 8004c44:	2000039c 	.word	0x2000039c

08004c48 <__malloc_unlock>:
 8004c48:	4801      	ldr	r0, [pc, #4]	@ (8004c50 <__malloc_unlock+0x8>)
 8004c4a:	f7ff bf0a 	b.w	8004a62 <__retarget_lock_release_recursive>
 8004c4e:	bf00      	nop
 8004c50:	2000039c 	.word	0x2000039c

08004c54 <__ssputs_r>:
 8004c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	688e      	ldr	r6, [r1, #8]
 8004c5a:	461f      	mov	r7, r3
 8004c5c:	42be      	cmp	r6, r7
 8004c5e:	680b      	ldr	r3, [r1, #0]
 8004c60:	4682      	mov	sl, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	4690      	mov	r8, r2
 8004c66:	d82d      	bhi.n	8004cc4 <__ssputs_r+0x70>
 8004c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c70:	d026      	beq.n	8004cc0 <__ssputs_r+0x6c>
 8004c72:	6965      	ldr	r5, [r4, #20]
 8004c74:	6909      	ldr	r1, [r1, #16]
 8004c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c7a:	eba3 0901 	sub.w	r9, r3, r1
 8004c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c82:	1c7b      	adds	r3, r7, #1
 8004c84:	444b      	add	r3, r9
 8004c86:	106d      	asrs	r5, r5, #1
 8004c88:	429d      	cmp	r5, r3
 8004c8a:	bf38      	it	cc
 8004c8c:	461d      	movcc	r5, r3
 8004c8e:	0553      	lsls	r3, r2, #21
 8004c90:	d527      	bpl.n	8004ce2 <__ssputs_r+0x8e>
 8004c92:	4629      	mov	r1, r5
 8004c94:	f7ff ff52 	bl	8004b3c <_malloc_r>
 8004c98:	4606      	mov	r6, r0
 8004c9a:	b360      	cbz	r0, 8004cf6 <__ssputs_r+0xa2>
 8004c9c:	6921      	ldr	r1, [r4, #16]
 8004c9e:	464a      	mov	r2, r9
 8004ca0:	f000 fae8 	bl	8005274 <memcpy>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	6126      	str	r6, [r4, #16]
 8004cb2:	6165      	str	r5, [r4, #20]
 8004cb4:	444e      	add	r6, r9
 8004cb6:	eba5 0509 	sub.w	r5, r5, r9
 8004cba:	6026      	str	r6, [r4, #0]
 8004cbc:	60a5      	str	r5, [r4, #8]
 8004cbe:	463e      	mov	r6, r7
 8004cc0:	42be      	cmp	r6, r7
 8004cc2:	d900      	bls.n	8004cc6 <__ssputs_r+0x72>
 8004cc4:	463e      	mov	r6, r7
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	4632      	mov	r2, r6
 8004cca:	4641      	mov	r1, r8
 8004ccc:	f000 faa8 	bl	8005220 <memmove>
 8004cd0:	68a3      	ldr	r3, [r4, #8]
 8004cd2:	1b9b      	subs	r3, r3, r6
 8004cd4:	60a3      	str	r3, [r4, #8]
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	4433      	add	r3, r6
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	2000      	movs	r0, #0
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	f000 fad4 	bl	8005290 <_realloc_r>
 8004ce8:	4606      	mov	r6, r0
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d1e0      	bne.n	8004cb0 <__ssputs_r+0x5c>
 8004cee:	6921      	ldr	r1, [r4, #16]
 8004cf0:	4650      	mov	r0, sl
 8004cf2:	f7ff feb7 	bl	8004a64 <_free_r>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	f8ca 3000 	str.w	r3, [sl]
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d02:	81a3      	strh	r3, [r4, #12]
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	e7e9      	b.n	8004cde <__ssputs_r+0x8a>
	...

08004d0c <_svfiprintf_r>:
 8004d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	4698      	mov	r8, r3
 8004d12:	898b      	ldrh	r3, [r1, #12]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	b09d      	sub	sp, #116	@ 0x74
 8004d18:	4607      	mov	r7, r0
 8004d1a:	460d      	mov	r5, r1
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	d510      	bpl.n	8004d42 <_svfiprintf_r+0x36>
 8004d20:	690b      	ldr	r3, [r1, #16]
 8004d22:	b973      	cbnz	r3, 8004d42 <_svfiprintf_r+0x36>
 8004d24:	2140      	movs	r1, #64	@ 0x40
 8004d26:	f7ff ff09 	bl	8004b3c <_malloc_r>
 8004d2a:	6028      	str	r0, [r5, #0]
 8004d2c:	6128      	str	r0, [r5, #16]
 8004d2e:	b930      	cbnz	r0, 8004d3e <_svfiprintf_r+0x32>
 8004d30:	230c      	movs	r3, #12
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295
 8004d38:	b01d      	add	sp, #116	@ 0x74
 8004d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3e:	2340      	movs	r3, #64	@ 0x40
 8004d40:	616b      	str	r3, [r5, #20]
 8004d42:	2300      	movs	r3, #0
 8004d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d46:	2320      	movs	r3, #32
 8004d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d50:	2330      	movs	r3, #48	@ 0x30
 8004d52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ef0 <_svfiprintf_r+0x1e4>
 8004d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d5a:	f04f 0901 	mov.w	r9, #1
 8004d5e:	4623      	mov	r3, r4
 8004d60:	469a      	mov	sl, r3
 8004d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d66:	b10a      	cbz	r2, 8004d6c <_svfiprintf_r+0x60>
 8004d68:	2a25      	cmp	r2, #37	@ 0x25
 8004d6a:	d1f9      	bne.n	8004d60 <_svfiprintf_r+0x54>
 8004d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d70:	d00b      	beq.n	8004d8a <_svfiprintf_r+0x7e>
 8004d72:	465b      	mov	r3, fp
 8004d74:	4622      	mov	r2, r4
 8004d76:	4629      	mov	r1, r5
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f7ff ff6b 	bl	8004c54 <__ssputs_r>
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f000 80a7 	beq.w	8004ed2 <_svfiprintf_r+0x1c6>
 8004d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d86:	445a      	add	r2, fp
 8004d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 809f 	beq.w	8004ed2 <_svfiprintf_r+0x1c6>
 8004d94:	2300      	movs	r3, #0
 8004d96:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d9e:	f10a 0a01 	add.w	sl, sl, #1
 8004da2:	9304      	str	r3, [sp, #16]
 8004da4:	9307      	str	r3, [sp, #28]
 8004da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dac:	4654      	mov	r4, sl
 8004dae:	2205      	movs	r2, #5
 8004db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db4:	484e      	ldr	r0, [pc, #312]	@ (8004ef0 <_svfiprintf_r+0x1e4>)
 8004db6:	f7fb fa0b 	bl	80001d0 <memchr>
 8004dba:	9a04      	ldr	r2, [sp, #16]
 8004dbc:	b9d8      	cbnz	r0, 8004df6 <_svfiprintf_r+0xea>
 8004dbe:	06d0      	lsls	r0, r2, #27
 8004dc0:	bf44      	itt	mi
 8004dc2:	2320      	movmi	r3, #32
 8004dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dc8:	0711      	lsls	r1, r2, #28
 8004dca:	bf44      	itt	mi
 8004dcc:	232b      	movmi	r3, #43	@ 0x2b
 8004dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dd8:	d015      	beq.n	8004e06 <_svfiprintf_r+0xfa>
 8004dda:	9a07      	ldr	r2, [sp, #28]
 8004ddc:	4654      	mov	r4, sl
 8004dde:	2000      	movs	r0, #0
 8004de0:	f04f 0c0a 	mov.w	ip, #10
 8004de4:	4621      	mov	r1, r4
 8004de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dea:	3b30      	subs	r3, #48	@ 0x30
 8004dec:	2b09      	cmp	r3, #9
 8004dee:	d94b      	bls.n	8004e88 <_svfiprintf_r+0x17c>
 8004df0:	b1b0      	cbz	r0, 8004e20 <_svfiprintf_r+0x114>
 8004df2:	9207      	str	r2, [sp, #28]
 8004df4:	e014      	b.n	8004e20 <_svfiprintf_r+0x114>
 8004df6:	eba0 0308 	sub.w	r3, r0, r8
 8004dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	46a2      	mov	sl, r4
 8004e04:	e7d2      	b.n	8004dac <_svfiprintf_r+0xa0>
 8004e06:	9b03      	ldr	r3, [sp, #12]
 8004e08:	1d19      	adds	r1, r3, #4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	9103      	str	r1, [sp, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bfbb      	ittet	lt
 8004e12:	425b      	neglt	r3, r3
 8004e14:	f042 0202 	orrlt.w	r2, r2, #2
 8004e18:	9307      	strge	r3, [sp, #28]
 8004e1a:	9307      	strlt	r3, [sp, #28]
 8004e1c:	bfb8      	it	lt
 8004e1e:	9204      	strlt	r2, [sp, #16]
 8004e20:	7823      	ldrb	r3, [r4, #0]
 8004e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e24:	d10a      	bne.n	8004e3c <_svfiprintf_r+0x130>
 8004e26:	7863      	ldrb	r3, [r4, #1]
 8004e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e2a:	d132      	bne.n	8004e92 <_svfiprintf_r+0x186>
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	9203      	str	r2, [sp, #12]
 8004e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e38:	3402      	adds	r4, #2
 8004e3a:	9305      	str	r3, [sp, #20]
 8004e3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f00 <_svfiprintf_r+0x1f4>
 8004e40:	7821      	ldrb	r1, [r4, #0]
 8004e42:	2203      	movs	r2, #3
 8004e44:	4650      	mov	r0, sl
 8004e46:	f7fb f9c3 	bl	80001d0 <memchr>
 8004e4a:	b138      	cbz	r0, 8004e5c <_svfiprintf_r+0x150>
 8004e4c:	9b04      	ldr	r3, [sp, #16]
 8004e4e:	eba0 000a 	sub.w	r0, r0, sl
 8004e52:	2240      	movs	r2, #64	@ 0x40
 8004e54:	4082      	lsls	r2, r0
 8004e56:	4313      	orrs	r3, r2
 8004e58:	3401      	adds	r4, #1
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e60:	4824      	ldr	r0, [pc, #144]	@ (8004ef4 <_svfiprintf_r+0x1e8>)
 8004e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e66:	2206      	movs	r2, #6
 8004e68:	f7fb f9b2 	bl	80001d0 <memchr>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d036      	beq.n	8004ede <_svfiprintf_r+0x1d2>
 8004e70:	4b21      	ldr	r3, [pc, #132]	@ (8004ef8 <_svfiprintf_r+0x1ec>)
 8004e72:	bb1b      	cbnz	r3, 8004ebc <_svfiprintf_r+0x1b0>
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	3307      	adds	r3, #7
 8004e78:	f023 0307 	bic.w	r3, r3, #7
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	9303      	str	r3, [sp, #12]
 8004e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e82:	4433      	add	r3, r6
 8004e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e86:	e76a      	b.n	8004d5e <_svfiprintf_r+0x52>
 8004e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	2001      	movs	r0, #1
 8004e90:	e7a8      	b.n	8004de4 <_svfiprintf_r+0xd8>
 8004e92:	2300      	movs	r3, #0
 8004e94:	3401      	adds	r4, #1
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f04f 0c0a 	mov.w	ip, #10
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea4:	3a30      	subs	r2, #48	@ 0x30
 8004ea6:	2a09      	cmp	r2, #9
 8004ea8:	d903      	bls.n	8004eb2 <_svfiprintf_r+0x1a6>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0c6      	beq.n	8004e3c <_svfiprintf_r+0x130>
 8004eae:	9105      	str	r1, [sp, #20]
 8004eb0:	e7c4      	b.n	8004e3c <_svfiprintf_r+0x130>
 8004eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e7f0      	b.n	8004e9e <_svfiprintf_r+0x192>
 8004ebc:	ab03      	add	r3, sp, #12
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8004efc <_svfiprintf_r+0x1f0>)
 8004ec4:	a904      	add	r1, sp, #16
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f3af 8000 	nop.w
 8004ecc:	1c42      	adds	r2, r0, #1
 8004ece:	4606      	mov	r6, r0
 8004ed0:	d1d6      	bne.n	8004e80 <_svfiprintf_r+0x174>
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	065b      	lsls	r3, r3, #25
 8004ed6:	f53f af2d 	bmi.w	8004d34 <_svfiprintf_r+0x28>
 8004eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004edc:	e72c      	b.n	8004d38 <_svfiprintf_r+0x2c>
 8004ede:	ab03      	add	r3, sp, #12
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	462a      	mov	r2, r5
 8004ee4:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <_svfiprintf_r+0x1f0>)
 8004ee6:	a904      	add	r1, sp, #16
 8004ee8:	4638      	mov	r0, r7
 8004eea:	f000 f879 	bl	8004fe0 <_printf_i>
 8004eee:	e7ed      	b.n	8004ecc <_svfiprintf_r+0x1c0>
 8004ef0:	08005400 	.word	0x08005400
 8004ef4:	0800540a 	.word	0x0800540a
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	08004c55 	.word	0x08004c55
 8004f00:	08005406 	.word	0x08005406

08004f04 <_printf_common>:
 8004f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	4616      	mov	r6, r2
 8004f0a:	4698      	mov	r8, r3
 8004f0c:	688a      	ldr	r2, [r1, #8]
 8004f0e:	690b      	ldr	r3, [r1, #16]
 8004f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f14:	4293      	cmp	r3, r2
 8004f16:	bfb8      	it	lt
 8004f18:	4613      	movlt	r3, r2
 8004f1a:	6033      	str	r3, [r6, #0]
 8004f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f20:	4607      	mov	r7, r0
 8004f22:	460c      	mov	r4, r1
 8004f24:	b10a      	cbz	r2, 8004f2a <_printf_common+0x26>
 8004f26:	3301      	adds	r3, #1
 8004f28:	6033      	str	r3, [r6, #0]
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	0699      	lsls	r1, r3, #26
 8004f2e:	bf42      	ittt	mi
 8004f30:	6833      	ldrmi	r3, [r6, #0]
 8004f32:	3302      	addmi	r3, #2
 8004f34:	6033      	strmi	r3, [r6, #0]
 8004f36:	6825      	ldr	r5, [r4, #0]
 8004f38:	f015 0506 	ands.w	r5, r5, #6
 8004f3c:	d106      	bne.n	8004f4c <_printf_common+0x48>
 8004f3e:	f104 0a19 	add.w	sl, r4, #25
 8004f42:	68e3      	ldr	r3, [r4, #12]
 8004f44:	6832      	ldr	r2, [r6, #0]
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	42ab      	cmp	r3, r5
 8004f4a:	dc26      	bgt.n	8004f9a <_printf_common+0x96>
 8004f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	3b00      	subs	r3, #0
 8004f54:	bf18      	it	ne
 8004f56:	2301      	movne	r3, #1
 8004f58:	0692      	lsls	r2, r2, #26
 8004f5a:	d42b      	bmi.n	8004fb4 <_printf_common+0xb0>
 8004f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f60:	4641      	mov	r1, r8
 8004f62:	4638      	mov	r0, r7
 8004f64:	47c8      	blx	r9
 8004f66:	3001      	adds	r0, #1
 8004f68:	d01e      	beq.n	8004fa8 <_printf_common+0xa4>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	6922      	ldr	r2, [r4, #16]
 8004f6e:	f003 0306 	and.w	r3, r3, #6
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	bf02      	ittt	eq
 8004f76:	68e5      	ldreq	r5, [r4, #12]
 8004f78:	6833      	ldreq	r3, [r6, #0]
 8004f7a:	1aed      	subeq	r5, r5, r3
 8004f7c:	68a3      	ldr	r3, [r4, #8]
 8004f7e:	bf0c      	ite	eq
 8004f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f84:	2500      	movne	r5, #0
 8004f86:	4293      	cmp	r3, r2
 8004f88:	bfc4      	itt	gt
 8004f8a:	1a9b      	subgt	r3, r3, r2
 8004f8c:	18ed      	addgt	r5, r5, r3
 8004f8e:	2600      	movs	r6, #0
 8004f90:	341a      	adds	r4, #26
 8004f92:	42b5      	cmp	r5, r6
 8004f94:	d11a      	bne.n	8004fcc <_printf_common+0xc8>
 8004f96:	2000      	movs	r0, #0
 8004f98:	e008      	b.n	8004fac <_printf_common+0xa8>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	47c8      	blx	r9
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d103      	bne.n	8004fb0 <_printf_common+0xac>
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb0:	3501      	adds	r5, #1
 8004fb2:	e7c6      	b.n	8004f42 <_printf_common+0x3e>
 8004fb4:	18e1      	adds	r1, r4, r3
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	2030      	movs	r0, #48	@ 0x30
 8004fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fbe:	4422      	add	r2, r4
 8004fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fc8:	3302      	adds	r3, #2
 8004fca:	e7c7      	b.n	8004f5c <_printf_common+0x58>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4622      	mov	r2, r4
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	47c8      	blx	r9
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d0e6      	beq.n	8004fa8 <_printf_common+0xa4>
 8004fda:	3601      	adds	r6, #1
 8004fdc:	e7d9      	b.n	8004f92 <_printf_common+0x8e>
	...

08004fe0 <_printf_i>:
 8004fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe4:	7e0f      	ldrb	r7, [r1, #24]
 8004fe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fe8:	2f78      	cmp	r7, #120	@ 0x78
 8004fea:	4691      	mov	r9, r2
 8004fec:	4680      	mov	r8, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	469a      	mov	sl, r3
 8004ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ff6:	d807      	bhi.n	8005008 <_printf_i+0x28>
 8004ff8:	2f62      	cmp	r7, #98	@ 0x62
 8004ffa:	d80a      	bhi.n	8005012 <_printf_i+0x32>
 8004ffc:	2f00      	cmp	r7, #0
 8004ffe:	f000 80d2 	beq.w	80051a6 <_printf_i+0x1c6>
 8005002:	2f58      	cmp	r7, #88	@ 0x58
 8005004:	f000 80b9 	beq.w	800517a <_printf_i+0x19a>
 8005008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800500c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005010:	e03a      	b.n	8005088 <_printf_i+0xa8>
 8005012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005016:	2b15      	cmp	r3, #21
 8005018:	d8f6      	bhi.n	8005008 <_printf_i+0x28>
 800501a:	a101      	add	r1, pc, #4	@ (adr r1, 8005020 <_printf_i+0x40>)
 800501c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005020:	08005079 	.word	0x08005079
 8005024:	0800508d 	.word	0x0800508d
 8005028:	08005009 	.word	0x08005009
 800502c:	08005009 	.word	0x08005009
 8005030:	08005009 	.word	0x08005009
 8005034:	08005009 	.word	0x08005009
 8005038:	0800508d 	.word	0x0800508d
 800503c:	08005009 	.word	0x08005009
 8005040:	08005009 	.word	0x08005009
 8005044:	08005009 	.word	0x08005009
 8005048:	08005009 	.word	0x08005009
 800504c:	0800518d 	.word	0x0800518d
 8005050:	080050b7 	.word	0x080050b7
 8005054:	08005147 	.word	0x08005147
 8005058:	08005009 	.word	0x08005009
 800505c:	08005009 	.word	0x08005009
 8005060:	080051af 	.word	0x080051af
 8005064:	08005009 	.word	0x08005009
 8005068:	080050b7 	.word	0x080050b7
 800506c:	08005009 	.word	0x08005009
 8005070:	08005009 	.word	0x08005009
 8005074:	0800514f 	.word	0x0800514f
 8005078:	6833      	ldr	r3, [r6, #0]
 800507a:	1d1a      	adds	r2, r3, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6032      	str	r2, [r6, #0]
 8005080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005088:	2301      	movs	r3, #1
 800508a:	e09d      	b.n	80051c8 <_printf_i+0x1e8>
 800508c:	6833      	ldr	r3, [r6, #0]
 800508e:	6820      	ldr	r0, [r4, #0]
 8005090:	1d19      	adds	r1, r3, #4
 8005092:	6031      	str	r1, [r6, #0]
 8005094:	0606      	lsls	r6, r0, #24
 8005096:	d501      	bpl.n	800509c <_printf_i+0xbc>
 8005098:	681d      	ldr	r5, [r3, #0]
 800509a:	e003      	b.n	80050a4 <_printf_i+0xc4>
 800509c:	0645      	lsls	r5, r0, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0xb8>
 80050a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	da03      	bge.n	80050b0 <_printf_i+0xd0>
 80050a8:	232d      	movs	r3, #45	@ 0x2d
 80050aa:	426d      	negs	r5, r5
 80050ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050b0:	4859      	ldr	r0, [pc, #356]	@ (8005218 <_printf_i+0x238>)
 80050b2:	230a      	movs	r3, #10
 80050b4:	e011      	b.n	80050da <_printf_i+0xfa>
 80050b6:	6821      	ldr	r1, [r4, #0]
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	0608      	lsls	r0, r1, #24
 80050bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80050c0:	d402      	bmi.n	80050c8 <_printf_i+0xe8>
 80050c2:	0649      	lsls	r1, r1, #25
 80050c4:	bf48      	it	mi
 80050c6:	b2ad      	uxthmi	r5, r5
 80050c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ca:	4853      	ldr	r0, [pc, #332]	@ (8005218 <_printf_i+0x238>)
 80050cc:	6033      	str	r3, [r6, #0]
 80050ce:	bf14      	ite	ne
 80050d0:	230a      	movne	r3, #10
 80050d2:	2308      	moveq	r3, #8
 80050d4:	2100      	movs	r1, #0
 80050d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050da:	6866      	ldr	r6, [r4, #4]
 80050dc:	60a6      	str	r6, [r4, #8]
 80050de:	2e00      	cmp	r6, #0
 80050e0:	bfa2      	ittt	ge
 80050e2:	6821      	ldrge	r1, [r4, #0]
 80050e4:	f021 0104 	bicge.w	r1, r1, #4
 80050e8:	6021      	strge	r1, [r4, #0]
 80050ea:	b90d      	cbnz	r5, 80050f0 <_printf_i+0x110>
 80050ec:	2e00      	cmp	r6, #0
 80050ee:	d04b      	beq.n	8005188 <_printf_i+0x1a8>
 80050f0:	4616      	mov	r6, r2
 80050f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050f6:	fb03 5711 	mls	r7, r3, r1, r5
 80050fa:	5dc7      	ldrb	r7, [r0, r7]
 80050fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005100:	462f      	mov	r7, r5
 8005102:	42bb      	cmp	r3, r7
 8005104:	460d      	mov	r5, r1
 8005106:	d9f4      	bls.n	80050f2 <_printf_i+0x112>
 8005108:	2b08      	cmp	r3, #8
 800510a:	d10b      	bne.n	8005124 <_printf_i+0x144>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	07df      	lsls	r7, r3, #31
 8005110:	d508      	bpl.n	8005124 <_printf_i+0x144>
 8005112:	6923      	ldr	r3, [r4, #16]
 8005114:	6861      	ldr	r1, [r4, #4]
 8005116:	4299      	cmp	r1, r3
 8005118:	bfde      	ittt	le
 800511a:	2330      	movle	r3, #48	@ 0x30
 800511c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005120:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005124:	1b92      	subs	r2, r2, r6
 8005126:	6122      	str	r2, [r4, #16]
 8005128:	f8cd a000 	str.w	sl, [sp]
 800512c:	464b      	mov	r3, r9
 800512e:	aa03      	add	r2, sp, #12
 8005130:	4621      	mov	r1, r4
 8005132:	4640      	mov	r0, r8
 8005134:	f7ff fee6 	bl	8004f04 <_printf_common>
 8005138:	3001      	adds	r0, #1
 800513a:	d14a      	bne.n	80051d2 <_printf_i+0x1f2>
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	b004      	add	sp, #16
 8005142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	f043 0320 	orr.w	r3, r3, #32
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	4833      	ldr	r0, [pc, #204]	@ (800521c <_printf_i+0x23c>)
 8005150:	2778      	movs	r7, #120	@ 0x78
 8005152:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	6831      	ldr	r1, [r6, #0]
 800515a:	061f      	lsls	r7, r3, #24
 800515c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005160:	d402      	bmi.n	8005168 <_printf_i+0x188>
 8005162:	065f      	lsls	r7, r3, #25
 8005164:	bf48      	it	mi
 8005166:	b2ad      	uxthmi	r5, r5
 8005168:	6031      	str	r1, [r6, #0]
 800516a:	07d9      	lsls	r1, r3, #31
 800516c:	bf44      	itt	mi
 800516e:	f043 0320 	orrmi.w	r3, r3, #32
 8005172:	6023      	strmi	r3, [r4, #0]
 8005174:	b11d      	cbz	r5, 800517e <_printf_i+0x19e>
 8005176:	2310      	movs	r3, #16
 8005178:	e7ac      	b.n	80050d4 <_printf_i+0xf4>
 800517a:	4827      	ldr	r0, [pc, #156]	@ (8005218 <_printf_i+0x238>)
 800517c:	e7e9      	b.n	8005152 <_printf_i+0x172>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f023 0320 	bic.w	r3, r3, #32
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	e7f6      	b.n	8005176 <_printf_i+0x196>
 8005188:	4616      	mov	r6, r2
 800518a:	e7bd      	b.n	8005108 <_printf_i+0x128>
 800518c:	6833      	ldr	r3, [r6, #0]
 800518e:	6825      	ldr	r5, [r4, #0]
 8005190:	6961      	ldr	r1, [r4, #20]
 8005192:	1d18      	adds	r0, r3, #4
 8005194:	6030      	str	r0, [r6, #0]
 8005196:	062e      	lsls	r6, r5, #24
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	d501      	bpl.n	80051a0 <_printf_i+0x1c0>
 800519c:	6019      	str	r1, [r3, #0]
 800519e:	e002      	b.n	80051a6 <_printf_i+0x1c6>
 80051a0:	0668      	lsls	r0, r5, #25
 80051a2:	d5fb      	bpl.n	800519c <_printf_i+0x1bc>
 80051a4:	8019      	strh	r1, [r3, #0]
 80051a6:	2300      	movs	r3, #0
 80051a8:	6123      	str	r3, [r4, #16]
 80051aa:	4616      	mov	r6, r2
 80051ac:	e7bc      	b.n	8005128 <_printf_i+0x148>
 80051ae:	6833      	ldr	r3, [r6, #0]
 80051b0:	1d1a      	adds	r2, r3, #4
 80051b2:	6032      	str	r2, [r6, #0]
 80051b4:	681e      	ldr	r6, [r3, #0]
 80051b6:	6862      	ldr	r2, [r4, #4]
 80051b8:	2100      	movs	r1, #0
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7fb f808 	bl	80001d0 <memchr>
 80051c0:	b108      	cbz	r0, 80051c6 <_printf_i+0x1e6>
 80051c2:	1b80      	subs	r0, r0, r6
 80051c4:	6060      	str	r0, [r4, #4]
 80051c6:	6863      	ldr	r3, [r4, #4]
 80051c8:	6123      	str	r3, [r4, #16]
 80051ca:	2300      	movs	r3, #0
 80051cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d0:	e7aa      	b.n	8005128 <_printf_i+0x148>
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	4632      	mov	r2, r6
 80051d6:	4649      	mov	r1, r9
 80051d8:	4640      	mov	r0, r8
 80051da:	47d0      	blx	sl
 80051dc:	3001      	adds	r0, #1
 80051de:	d0ad      	beq.n	800513c <_printf_i+0x15c>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	079b      	lsls	r3, r3, #30
 80051e4:	d413      	bmi.n	800520e <_printf_i+0x22e>
 80051e6:	68e0      	ldr	r0, [r4, #12]
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	4298      	cmp	r0, r3
 80051ec:	bfb8      	it	lt
 80051ee:	4618      	movlt	r0, r3
 80051f0:	e7a6      	b.n	8005140 <_printf_i+0x160>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4632      	mov	r2, r6
 80051f6:	4649      	mov	r1, r9
 80051f8:	4640      	mov	r0, r8
 80051fa:	47d0      	blx	sl
 80051fc:	3001      	adds	r0, #1
 80051fe:	d09d      	beq.n	800513c <_printf_i+0x15c>
 8005200:	3501      	adds	r5, #1
 8005202:	68e3      	ldr	r3, [r4, #12]
 8005204:	9903      	ldr	r1, [sp, #12]
 8005206:	1a5b      	subs	r3, r3, r1
 8005208:	42ab      	cmp	r3, r5
 800520a:	dcf2      	bgt.n	80051f2 <_printf_i+0x212>
 800520c:	e7eb      	b.n	80051e6 <_printf_i+0x206>
 800520e:	2500      	movs	r5, #0
 8005210:	f104 0619 	add.w	r6, r4, #25
 8005214:	e7f5      	b.n	8005202 <_printf_i+0x222>
 8005216:	bf00      	nop
 8005218:	08005411 	.word	0x08005411
 800521c:	08005422 	.word	0x08005422

08005220 <memmove>:
 8005220:	4288      	cmp	r0, r1
 8005222:	b510      	push	{r4, lr}
 8005224:	eb01 0402 	add.w	r4, r1, r2
 8005228:	d902      	bls.n	8005230 <memmove+0x10>
 800522a:	4284      	cmp	r4, r0
 800522c:	4623      	mov	r3, r4
 800522e:	d807      	bhi.n	8005240 <memmove+0x20>
 8005230:	1e43      	subs	r3, r0, #1
 8005232:	42a1      	cmp	r1, r4
 8005234:	d008      	beq.n	8005248 <memmove+0x28>
 8005236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800523a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800523e:	e7f8      	b.n	8005232 <memmove+0x12>
 8005240:	4402      	add	r2, r0
 8005242:	4601      	mov	r1, r0
 8005244:	428a      	cmp	r2, r1
 8005246:	d100      	bne.n	800524a <memmove+0x2a>
 8005248:	bd10      	pop	{r4, pc}
 800524a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800524e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005252:	e7f7      	b.n	8005244 <memmove+0x24>

08005254 <_sbrk_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	@ (8005270 <_sbrk_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fc fb4a 	bl	80018f8 <_sbrk>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_sbrk_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_sbrk_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20000398 	.word	0x20000398

08005274 <memcpy>:
 8005274:	440a      	add	r2, r1
 8005276:	4291      	cmp	r1, r2
 8005278:	f100 33ff 	add.w	r3, r0, #4294967295
 800527c:	d100      	bne.n	8005280 <memcpy+0xc>
 800527e:	4770      	bx	lr
 8005280:	b510      	push	{r4, lr}
 8005282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800528a:	4291      	cmp	r1, r2
 800528c:	d1f9      	bne.n	8005282 <memcpy+0xe>
 800528e:	bd10      	pop	{r4, pc}

08005290 <_realloc_r>:
 8005290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005294:	4680      	mov	r8, r0
 8005296:	4615      	mov	r5, r2
 8005298:	460c      	mov	r4, r1
 800529a:	b921      	cbnz	r1, 80052a6 <_realloc_r+0x16>
 800529c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052a0:	4611      	mov	r1, r2
 80052a2:	f7ff bc4b 	b.w	8004b3c <_malloc_r>
 80052a6:	b92a      	cbnz	r2, 80052b4 <_realloc_r+0x24>
 80052a8:	f7ff fbdc 	bl	8004a64 <_free_r>
 80052ac:	2400      	movs	r4, #0
 80052ae:	4620      	mov	r0, r4
 80052b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b4:	f000 f81a 	bl	80052ec <_malloc_usable_size_r>
 80052b8:	4285      	cmp	r5, r0
 80052ba:	4606      	mov	r6, r0
 80052bc:	d802      	bhi.n	80052c4 <_realloc_r+0x34>
 80052be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052c2:	d8f4      	bhi.n	80052ae <_realloc_r+0x1e>
 80052c4:	4629      	mov	r1, r5
 80052c6:	4640      	mov	r0, r8
 80052c8:	f7ff fc38 	bl	8004b3c <_malloc_r>
 80052cc:	4607      	mov	r7, r0
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d0ec      	beq.n	80052ac <_realloc_r+0x1c>
 80052d2:	42b5      	cmp	r5, r6
 80052d4:	462a      	mov	r2, r5
 80052d6:	4621      	mov	r1, r4
 80052d8:	bf28      	it	cs
 80052da:	4632      	movcs	r2, r6
 80052dc:	f7ff ffca 	bl	8005274 <memcpy>
 80052e0:	4621      	mov	r1, r4
 80052e2:	4640      	mov	r0, r8
 80052e4:	f7ff fbbe 	bl	8004a64 <_free_r>
 80052e8:	463c      	mov	r4, r7
 80052ea:	e7e0      	b.n	80052ae <_realloc_r+0x1e>

080052ec <_malloc_usable_size_r>:
 80052ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f0:	1f18      	subs	r0, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bfbc      	itt	lt
 80052f6:	580b      	ldrlt	r3, [r1, r0]
 80052f8:	18c0      	addlt	r0, r0, r3
 80052fa:	4770      	bx	lr

080052fc <_init>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr

08005308 <_fini>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr
